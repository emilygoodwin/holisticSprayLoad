function _mergeNamespaces(n9, m2) {
  m2.forEach(function(e2) {
    e2 && typeof e2 !== "string" && !Array.isArray(e2) && Object.keys(e2).forEach(function(k2) {
      if (k2 !== "default" && !(k2 in n9)) {
        var d2 = Object.getOwnPropertyDescriptor(e2, k2);
        Object.defineProperty(n9, k2, d2.get ? d2 : {
          enumerable: true,
          get: function() {
            return e2[k2];
          }
        });
      }
    });
  });
  return Object.freeze(Object.defineProperty(n9, Symbol.toStringTag, { value: "Module" }));
}
const p$6 = function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(script) {
    const fetchOpts = {};
    if (script.integrity)
      fetchOpts.integrity = script.integrity;
    if (script.referrerpolicy)
      fetchOpts.referrerPolicy = script.referrerpolicy;
    if (script.crossorigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (script.crossorigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
};
p$6();
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$4 = Symbol.for("react.element"), n$1 = Symbol.for("react.portal"), p$5 = Symbol.for("react.fragment"), q$2 = Symbol.for("react.strict_mode"), r$3 = Symbol.for("react.profiler"), t$2 = Symbol.for("react.provider"), u$3 = Symbol.for("react.context"), v$5 = Symbol.for("react.forward_ref"), w$3 = Symbol.for("react.suspense"), x$2 = Symbol.for("react.memo"), y$1 = Symbol.for("react.lazy"), z$2 = Symbol.iterator;
function A$3(a2) {
  if (null === a2 || "object" !== typeof a2)
    return null;
  a2 = z$2 && a2[z$2] || a2["@@iterator"];
  return "function" === typeof a2 ? a2 : null;
}
var B$4 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, C$4 = Object.assign, D$5 = {};
function E$5(a2, b2, e2) {
  this.props = a2;
  this.context = b2;
  this.refs = D$5;
  this.updater = e2 || B$4;
}
E$5.prototype.isReactComponent = {};
E$5.prototype.setState = function(a2, b2) {
  if ("object" !== typeof a2 && "function" !== typeof a2 && null != a2)
    throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a2, b2, "setState");
};
E$5.prototype.forceUpdate = function(a2) {
  this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
};
function F$3() {
}
F$3.prototype = E$5.prototype;
function G$3(a2, b2, e2) {
  this.props = a2;
  this.context = b2;
  this.refs = D$5;
  this.updater = e2 || B$4;
}
var H$4 = G$3.prototype = new F$3();
H$4.constructor = G$3;
C$4(H$4, E$5.prototype);
H$4.isPureReactComponent = true;
var I$3 = Array.isArray, J$4 = Object.prototype.hasOwnProperty, K$4 = { current: null }, L$4 = { key: true, ref: true, __self: true, __source: true };
function M$3(a2, b2, e2) {
  var d2, c2 = {}, k2 = null, h2 = null;
  if (null != b2)
    for (d2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
      J$4.call(b2, d2) && !L$4.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
  var g2 = arguments.length - 2;
  if (1 === g2)
    c2.children = e2;
  else if (1 < g2) {
    for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
      f2[m2] = arguments[m2 + 2];
    c2.children = f2;
  }
  if (a2 && a2.defaultProps)
    for (d2 in g2 = a2.defaultProps, g2)
      void 0 === c2[d2] && (c2[d2] = g2[d2]);
  return { $$typeof: l$4, type: a2, key: k2, ref: h2, props: c2, _owner: K$4.current };
}
function N$5(a2, b2) {
  return { $$typeof: l$4, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
}
function O$4(a2) {
  return "object" === typeof a2 && null !== a2 && a2.$$typeof === l$4;
}
function escape(a2) {
  var b2 = { "=": "=0", ":": "=2" };
  return "$" + a2.replace(/[=:]/g, function(a3) {
    return b2[a3];
  });
}
var P$4 = /\/+/g;
function Q$4(a2, b2) {
  return "object" === typeof a2 && null !== a2 && null != a2.key ? escape("" + a2.key) : b2.toString(36);
}
function R$4(a2, b2, e2, d2, c2) {
  var k2 = typeof a2;
  if ("undefined" === k2 || "boolean" === k2)
    a2 = null;
  var h2 = false;
  if (null === a2)
    h2 = true;
  else
    switch (k2) {
      case "string":
      case "number":
        h2 = true;
        break;
      case "object":
        switch (a2.$$typeof) {
          case l$4:
          case n$1:
            h2 = true;
        }
    }
  if (h2)
    return h2 = a2, c2 = c2(h2), a2 = "" === d2 ? "." + Q$4(h2, 0) : d2, I$3(c2) ? (e2 = "", null != a2 && (e2 = a2.replace(P$4, "$&/") + "/"), R$4(c2, b2, e2, "", function(a3) {
      return a3;
    })) : null != c2 && (O$4(c2) && (c2 = N$5(c2, e2 + (!c2.key || h2 && h2.key === c2.key ? "" : ("" + c2.key).replace(P$4, "$&/") + "/") + a2)), b2.push(c2)), 1;
  h2 = 0;
  d2 = "" === d2 ? "." : d2 + ":";
  if (I$3(a2))
    for (var g2 = 0; g2 < a2.length; g2++) {
      k2 = a2[g2];
      var f2 = d2 + Q$4(k2, g2);
      h2 += R$4(k2, b2, e2, f2, c2);
    }
  else if (f2 = A$3(a2), "function" === typeof f2)
    for (a2 = f2.call(a2), g2 = 0; !(k2 = a2.next()).done; )
      k2 = k2.value, f2 = d2 + Q$4(k2, g2++), h2 += R$4(k2, b2, e2, f2, c2);
  else if ("object" === k2)
    throw b2 = String(a2), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
  return h2;
}
function S$3(a2, b2, e2) {
  if (null == a2)
    return a2;
  var d2 = [], c2 = 0;
  R$4(a2, d2, "", "", function(a3) {
    return b2.call(e2, a3, c2++);
  });
  return d2;
}
function T$2(a2) {
  if (-1 === a2._status) {
    var b2 = a2._result;
    b2 = b2();
    b2.then(function(b3) {
      if (0 === a2._status || -1 === a2._status)
        a2._status = 1, a2._result = b3;
    }, function(b3) {
      if (0 === a2._status || -1 === a2._status)
        a2._status = 2, a2._result = b3;
    });
    -1 === a2._status && (a2._status = 0, a2._result = b2);
  }
  if (1 === a2._status)
    return a2._result.default;
  throw a2._result;
}
var U$3 = { current: null }, V$3 = { transition: null }, W$5 = { ReactCurrentDispatcher: U$3, ReactCurrentBatchConfig: V$3, ReactCurrentOwner: K$4 };
react_production_min.Children = { map: S$3, forEach: function(a2, b2, e2) {
  S$3(a2, function() {
    b2.apply(this, arguments);
  }, e2);
}, count: function(a2) {
  var b2 = 0;
  S$3(a2, function() {
    b2++;
  });
  return b2;
}, toArray: function(a2) {
  return S$3(a2, function(a3) {
    return a3;
  }) || [];
}, only: function(a2) {
  if (!O$4(a2))
    throw Error("React.Children.only expected to receive a single React element child.");
  return a2;
} };
react_production_min.Component = E$5;
react_production_min.Fragment = p$5;
react_production_min.Profiler = r$3;
react_production_min.PureComponent = G$3;
react_production_min.StrictMode = q$2;
react_production_min.Suspense = w$3;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$5;
react_production_min.cloneElement = function(a2, b2, e2) {
  if (null === a2 || void 0 === a2)
    throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a2 + ".");
  var d2 = C$4({}, a2.props), c2 = a2.key, k2 = a2.ref, h2 = a2._owner;
  if (null != b2) {
    void 0 !== b2.ref && (k2 = b2.ref, h2 = K$4.current);
    void 0 !== b2.key && (c2 = "" + b2.key);
    if (a2.type && a2.type.defaultProps)
      var g2 = a2.type.defaultProps;
    for (f2 in b2)
      J$4.call(b2, f2) && !L$4.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2)
    d2.children = e2;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m2 = 0; m2 < f2; m2++)
      g2[m2] = arguments[m2 + 2];
    d2.children = g2;
  }
  return { $$typeof: l$4, type: a2.type, key: c2, ref: k2, props: d2, _owner: h2 };
};
react_production_min.createContext = function(a2) {
  a2 = { $$typeof: u$3, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
  a2.Provider = { $$typeof: t$2, _context: a2 };
  return a2.Consumer = a2;
};
react_production_min.createElement = M$3;
react_production_min.createFactory = function(a2) {
  var b2 = M$3.bind(null, a2);
  b2.type = a2;
  return b2;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a2) {
  return { $$typeof: v$5, render: a2 };
};
react_production_min.isValidElement = O$4;
react_production_min.lazy = function(a2) {
  return { $$typeof: y$1, _payload: { _status: -1, _result: a2 }, _init: T$2 };
};
react_production_min.memo = function(a2, b2) {
  return { $$typeof: x$2, type: a2, compare: void 0 === b2 ? null : b2 };
};
react_production_min.startTransition = function(a2) {
  var b2 = V$3.transition;
  V$3.transition = {};
  try {
    a2();
  } finally {
    V$3.transition = b2;
  }
};
react_production_min.unstable_act = function() {
  throw Error("act(...) is not supported in production builds of React.");
};
react_production_min.useCallback = function(a2, b2) {
  return U$3.current.useCallback(a2, b2);
};
react_production_min.useContext = function(a2) {
  return U$3.current.useContext(a2);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useDeferredValue = function(a2) {
  return U$3.current.useDeferredValue(a2);
};
react_production_min.useEffect = function(a2, b2) {
  return U$3.current.useEffect(a2, b2);
};
react_production_min.useId = function() {
  return U$3.current.useId();
};
react_production_min.useImperativeHandle = function(a2, b2, e2) {
  return U$3.current.useImperativeHandle(a2, b2, e2);
};
react_production_min.useInsertionEffect = function(a2, b2) {
  return U$3.current.useInsertionEffect(a2, b2);
};
react_production_min.useLayoutEffect = function(a2, b2) {
  return U$3.current.useLayoutEffect(a2, b2);
};
react_production_min.useMemo = function(a2, b2) {
  return U$3.current.useMemo(a2, b2);
};
react_production_min.useReducer = function(a2, b2, e2) {
  return U$3.current.useReducer(a2, b2, e2);
};
react_production_min.useRef = function(a2) {
  return U$3.current.useRef(a2);
};
react_production_min.useState = function(a2) {
  return U$3.current.useState(a2);
};
react_production_min.useSyncExternalStore = function(a2, b2, e2) {
  return U$3.current.useSyncExternalStore(a2, b2, e2);
};
react_production_min.useTransition = function() {
  return U$3.current.useTransition();
};
react_production_min.version = "18.2.0";
{
  react.exports = react_production_min;
}
var React = react.exports;
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports) {
  function f2(a2, b2) {
    var c2 = a2.length;
    a2.push(b2);
    a:
      for (; 0 < c2; ) {
        var d2 = c2 - 1 >>> 1, e2 = a2[d2];
        if (0 < g2(e2, b2))
          a2[d2] = b2, a2[c2] = e2, c2 = d2;
        else
          break a;
      }
  }
  function h2(a2) {
    return 0 === a2.length ? null : a2[0];
  }
  function k2(a2) {
    if (0 === a2.length)
      return null;
    var b2 = a2[0], c2 = a2.pop();
    if (c2 !== b2) {
      a2[0] = c2;
      a:
        for (var d2 = 0, e2 = a2.length, w2 = e2 >>> 1; d2 < w2; ) {
          var m2 = 2 * (d2 + 1) - 1, C2 = a2[m2], n9 = m2 + 1, x2 = a2[n9];
          if (0 > g2(C2, c2))
            n9 < e2 && 0 > g2(x2, C2) ? (a2[d2] = x2, a2[n9] = c2, d2 = n9) : (a2[d2] = C2, a2[m2] = c2, d2 = m2);
          else if (n9 < e2 && 0 > g2(x2, c2))
            a2[d2] = x2, a2[n9] = c2, d2 = n9;
          else
            break a;
        }
    }
    return b2;
  }
  function g2(a2, b2) {
    var c2 = a2.sortIndex - b2.sortIndex;
    return 0 !== c2 ? c2 : a2.id - b2.id;
  }
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function G2(a2) {
    for (var b2 = h2(t2); null !== b2; ) {
      if (null === b2.callback)
        k2(t2);
      else if (b2.startTime <= a2)
        k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
      else
        break;
      b2 = h2(t2);
    }
  }
  function H2(a2) {
    B2 = false;
    G2(a2);
    if (!A2)
      if (null !== h2(r2))
        A2 = true, I2(J2);
      else {
        var b2 = h2(t2);
        null !== b2 && K2(H2, b2.startTime - a2);
      }
  }
  function J2(a2, b2) {
    A2 = false;
    B2 && (B2 = false, E2(L2), L2 = -1);
    z2 = true;
    var c2 = y2;
    try {
      G2(b2);
      for (v2 = h2(r2); null !== v2 && (!(v2.expirationTime > b2) || a2 && !M2()); ) {
        var d2 = v2.callback;
        if ("function" === typeof d2) {
          v2.callback = null;
          y2 = v2.priorityLevel;
          var e2 = d2(v2.expirationTime <= b2);
          b2 = exports.unstable_now();
          "function" === typeof e2 ? v2.callback = e2 : v2 === h2(r2) && k2(r2);
          G2(b2);
        } else
          k2(r2);
        v2 = h2(r2);
      }
      if (null !== v2)
        var w2 = true;
      else {
        var m2 = h2(t2);
        null !== m2 && K2(H2, m2.startTime - b2);
        w2 = false;
      }
      return w2;
    } finally {
      v2 = null, y2 = c2, z2 = false;
    }
  }
  var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
  function M2() {
    return exports.unstable_now() - Q2 < P2 ? false : true;
  }
  function R2() {
    if (null !== O2) {
      var a2 = exports.unstable_now();
      Q2 = a2;
      var b2 = true;
      try {
        b2 = O2(true, a2);
      } finally {
        b2 ? S2() : (N2 = false, O2 = null);
      }
    } else
      N2 = false;
  }
  var S2;
  if ("function" === typeof F2)
    S2 = function() {
      F2(R2);
    };
  else if ("undefined" !== typeof MessageChannel) {
    var T2 = new MessageChannel(), U2 = T2.port2;
    T2.port1.onmessage = R2;
    S2 = function() {
      U2.postMessage(null);
    };
  } else
    S2 = function() {
      D2(R2, 0);
    };
  function I2(a2) {
    O2 = a2;
    N2 || (N2 = true, S2());
  }
  function K2(a2, b2) {
    L2 = D2(function() {
      a2(exports.unstable_now());
    }, b2);
  }
  exports.unstable_IdlePriority = 5;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_LowPriority = 4;
  exports.unstable_NormalPriority = 3;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_cancelCallback = function(a2) {
    a2.callback = null;
  };
  exports.unstable_continueExecution = function() {
    A2 || z2 || (A2 = true, I2(J2));
  };
  exports.unstable_forceFrameRate = function(a2) {
    0 > a2 || 125 < a2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a2 ? Math.floor(1e3 / a2) : 5;
  };
  exports.unstable_getCurrentPriorityLevel = function() {
    return y2;
  };
  exports.unstable_getFirstCallbackNode = function() {
    return h2(r2);
  };
  exports.unstable_next = function(a2) {
    switch (y2) {
      case 1:
      case 2:
      case 3:
        var b2 = 3;
        break;
      default:
        b2 = y2;
    }
    var c2 = y2;
    y2 = b2;
    try {
      return a2();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_pauseExecution = function() {
  };
  exports.unstable_requestPaint = function() {
  };
  exports.unstable_runWithPriority = function(a2, b2) {
    switch (a2) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a2 = 3;
    }
    var c2 = y2;
    y2 = a2;
    try {
      return b2();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_scheduleCallback = function(a2, b2, c2) {
    var d2 = exports.unstable_now();
    "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
    switch (a2) {
      case 1:
        var e2 = -1;
        break;
      case 2:
        e2 = 250;
        break;
      case 5:
        e2 = 1073741823;
        break;
      case 4:
        e2 = 1e4;
        break;
      default:
        e2 = 5e3;
    }
    e2 = c2 + e2;
    a2 = { id: u2++, callback: b2, priorityLevel: a2, startTime: c2, expirationTime: e2, sortIndex: -1 };
    c2 > d2 ? (a2.sortIndex = c2, f2(t2, a2), null === h2(r2) && a2 === h2(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c2 - d2))) : (a2.sortIndex = e2, f2(r2, a2), A2 || z2 || (A2 = true, I2(J2)));
    return a2;
  };
  exports.unstable_shouldYield = M2;
  exports.unstable_wrapCallback = function(a2) {
    var b2 = y2;
    return function() {
      var c2 = y2;
      y2 = b2;
      try {
        return a2.apply(this, arguments);
      } finally {
        y2 = c2;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = react.exports, ca = scheduler.exports;
function p$4(a2) {
  for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
    b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
  return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = /* @__PURE__ */ new Set(), ea = {};
function fa(a2, b2) {
  ha(a2, b2);
  ha(a2 + "Capture", b2);
}
function ha(a2, b2) {
  ea[a2] = b2;
  for (a2 = 0; a2 < b2.length; a2++)
    da.add(b2[a2]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
function oa(a2) {
  if (ja.call(ma, a2))
    return true;
  if (ja.call(la, a2))
    return false;
  if (ka.test(a2))
    return ma[a2] = true;
  la[a2] = true;
  return false;
}
function pa(a2, b2, c2, d2) {
  if (null !== c2 && 0 === c2.type)
    return false;
  switch (typeof b2) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d2)
        return false;
      if (null !== c2)
        return !c2.acceptsBooleans;
      a2 = a2.toLowerCase().slice(0, 5);
      return "data-" !== a2 && "aria-" !== a2;
    default:
      return false;
  }
}
function qa(a2, b2, c2, d2) {
  if (null === b2 || "undefined" === typeof b2 || pa(a2, b2, c2, d2))
    return true;
  if (d2)
    return false;
  if (null !== c2)
    switch (c2.type) {
      case 3:
        return !b2;
      case 4:
        return false === b2;
      case 5:
        return isNaN(b2);
      case 6:
        return isNaN(b2) || 1 > b2;
    }
  return false;
}
function v$4(a2, b2, c2, d2, e2, f2, g2) {
  this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
  this.attributeName = d2;
  this.attributeNamespace = e2;
  this.mustUseProperty = c2;
  this.propertyName = a2;
  this.type = b2;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var z$1 = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a2) {
  z$1[a2] = new v$4(a2, 0, false, a2, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a2) {
  var b2 = a2[0];
  z$1[b2] = new v$4(b2, 1, false, a2[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a2) {
  z$1[a2] = new v$4(a2, 2, false, a2.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a2) {
  z$1[a2] = new v$4(a2, 2, false, a2, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a2) {
  z$1[a2] = new v$4(a2, 3, false, a2.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a2) {
  z$1[a2] = new v$4(a2, 3, true, a2, null, false, false);
});
["capture", "download"].forEach(function(a2) {
  z$1[a2] = new v$4(a2, 4, false, a2, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a2) {
  z$1[a2] = new v$4(a2, 6, false, a2, null, false, false);
});
["rowSpan", "start"].forEach(function(a2) {
  z$1[a2] = new v$4(a2, 5, false, a2.toLowerCase(), null, false, false);
});
var ra = /[\-:]([a-z])/g;
function sa(a2) {
  return a2[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a2) {
  var b2 = a2.replace(
    ra,
    sa
  );
  z$1[b2] = new v$4(b2, 1, false, a2, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a2) {
  var b2 = a2.replace(ra, sa);
  z$1[b2] = new v$4(b2, 1, false, a2, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a2) {
  var b2 = a2.replace(ra, sa);
  z$1[b2] = new v$4(b2, 1, false, a2, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a2) {
  z$1[a2] = new v$4(a2, 1, false, a2.toLowerCase(), null, false, false);
});
z$1.xlinkHref = new v$4("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a2) {
  z$1[a2] = new v$4(a2, 1, false, a2.toLowerCase(), null, true, true);
});
function ta(a2, b2, c2, d2) {
  var e2 = z$1.hasOwnProperty(b2) ? z$1[b2] : null;
  if (null !== e2 ? 0 !== e2.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
    qa(b2, c2, e2, d2) && (c2 = null), d2 || null === e2 ? oa(b2) && (null === c2 ? a2.removeAttribute(b2) : a2.setAttribute(b2, "" + c2)) : e2.mustUseProperty ? a2[e2.propertyName] = null === c2 ? 3 === e2.type ? false : "" : c2 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, null === c2 ? a2.removeAttribute(b2) : (e2 = e2.type, c2 = 3 === e2 || 4 === e2 && true === c2 ? "" : "" + c2, d2 ? a2.setAttributeNS(d2, b2, c2) : a2.setAttribute(b2, c2)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
var Ia = Symbol.for("react.offscreen");
var Ja = Symbol.iterator;
function Ka(a2) {
  if (null === a2 || "object" !== typeof a2)
    return null;
  a2 = Ja && a2[Ja] || a2["@@iterator"];
  return "function" === typeof a2 ? a2 : null;
}
var A$2 = Object.assign, La;
function Ma(a2) {
  if (void 0 === La)
    try {
      throw Error();
    } catch (c2) {
      var b2 = c2.stack.trim().match(/\n( *(at )?)/);
      La = b2 && b2[1] || "";
    }
  return "\n" + La + a2;
}
var Na = false;
function Oa(a2, b2) {
  if (!a2 || Na)
    return "";
  Na = true;
  var c2 = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b2)
      if (b2 = function() {
        throw Error();
      }, Object.defineProperty(b2.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b2, []);
        } catch (l2) {
          var d2 = l2;
        }
        Reflect.construct(a2, [], b2);
      } else {
        try {
          b2.call();
        } catch (l2) {
          d2 = l2;
        }
        a2.call(b2.prototype);
      }
    else {
      try {
        throw Error();
      } catch (l2) {
        d2 = l2;
      }
      a2();
    }
  } catch (l2) {
    if (l2 && d2 && "string" === typeof l2.stack) {
      for (var e2 = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e2[g2] !== f2[h2]; )
        h2--;
      for (; 1 <= g2 && 0 <= h2; g2--, h2--)
        if (e2[g2] !== f2[h2]) {
          if (1 !== g2 || 1 !== h2) {
            do
              if (g2--, h2--, 0 > h2 || e2[g2] !== f2[h2]) {
                var k2 = "\n" + e2[g2].replace(" at new ", " at ");
                a2.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a2.displayName));
                return k2;
              }
            while (1 <= g2 && 0 <= h2);
          }
          break;
        }
    }
  } finally {
    Na = false, Error.prepareStackTrace = c2;
  }
  return (a2 = a2 ? a2.displayName || a2.name : "") ? Ma(a2) : "";
}
function Pa(a2) {
  switch (a2.tag) {
    case 5:
      return Ma(a2.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a2 = Oa(a2.type, false), a2;
    case 11:
      return a2 = Oa(a2.type.render, false), a2;
    case 1:
      return a2 = Oa(a2.type, true), a2;
    default:
      return "";
  }
}
function Qa(a2) {
  if (null == a2)
    return null;
  if ("function" === typeof a2)
    return a2.displayName || a2.name || null;
  if ("string" === typeof a2)
    return a2;
  switch (a2) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a2)
    switch (a2.$$typeof) {
      case Ca:
        return (a2.displayName || "Context") + ".Consumer";
      case Ba:
        return (a2._context.displayName || "Context") + ".Provider";
      case Da:
        var b2 = a2.render;
        a2 = a2.displayName;
        a2 || (a2 = b2.displayName || b2.name || "", a2 = "" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
        return a2;
      case Ga:
        return b2 = a2.displayName || null, null !== b2 ? b2 : Qa(a2.type) || "Memo";
      case Ha:
        b2 = a2._payload;
        a2 = a2._init;
        try {
          return Qa(a2(b2));
        } catch (c2) {
        }
    }
  return null;
}
function Ra(a2) {
  var b2 = a2.type;
  switch (a2.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b2.displayName || "Context") + ".Consumer";
    case 10:
      return (b2._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a2 = b2.render, a2 = a2.displayName || a2.name || "", b2.displayName || ("" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b2;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b2);
    case 8:
      return b2 === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b2)
        return b2.displayName || b2.name || null;
      if ("string" === typeof b2)
        return b2;
  }
  return null;
}
function Sa(a2) {
  switch (typeof a2) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a2;
    case "object":
      return a2;
    default:
      return "";
  }
}
function Ta(a2) {
  var b2 = a2.type;
  return (a2 = a2.nodeName) && "input" === a2.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
}
function Ua(a2) {
  var b2 = Ta(a2) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a2.constructor.prototype, b2), d2 = "" + a2[b2];
  if (!a2.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
    var e2 = c2.get, f2 = c2.set;
    Object.defineProperty(a2, b2, { configurable: true, get: function() {
      return e2.call(this);
    }, set: function(a3) {
      d2 = "" + a3;
      f2.call(this, a3);
    } });
    Object.defineProperty(a2, b2, { enumerable: c2.enumerable });
    return { getValue: function() {
      return d2;
    }, setValue: function(a3) {
      d2 = "" + a3;
    }, stopTracking: function() {
      a2._valueTracker = null;
      delete a2[b2];
    } };
  }
}
function Va(a2) {
  a2._valueTracker || (a2._valueTracker = Ua(a2));
}
function Wa(a2) {
  if (!a2)
    return false;
  var b2 = a2._valueTracker;
  if (!b2)
    return true;
  var c2 = b2.getValue();
  var d2 = "";
  a2 && (d2 = Ta(a2) ? a2.checked ? "true" : "false" : a2.value);
  a2 = d2;
  return a2 !== c2 ? (b2.setValue(a2), true) : false;
}
function Xa(a2) {
  a2 = a2 || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a2)
    return null;
  try {
    return a2.activeElement || a2.body;
  } catch (b2) {
    return a2.body;
  }
}
function Ya(a2, b2) {
  var c2 = b2.checked;
  return A$2({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a2._wrapperState.initialChecked });
}
function Za(a2, b2) {
  var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
  c2 = Sa(null != b2.value ? b2.value : c2);
  a2._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
}
function ab(a2, b2) {
  b2 = b2.checked;
  null != b2 && ta(a2, "checked", b2, false);
}
function bb(a2, b2) {
  ab(a2, b2);
  var c2 = Sa(b2.value), d2 = b2.type;
  if (null != c2)
    if ("number" === d2) {
      if (0 === c2 && "" === a2.value || a2.value != c2)
        a2.value = "" + c2;
    } else
      a2.value !== "" + c2 && (a2.value = "" + c2);
  else if ("submit" === d2 || "reset" === d2) {
    a2.removeAttribute("value");
    return;
  }
  b2.hasOwnProperty("value") ? cb(a2, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a2, b2.type, Sa(b2.defaultValue));
  null == b2.checked && null != b2.defaultChecked && (a2.defaultChecked = !!b2.defaultChecked);
}
function db(a2, b2, c2) {
  if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
    var d2 = b2.type;
    if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
      return;
    b2 = "" + a2._wrapperState.initialValue;
    c2 || b2 === a2.value || (a2.value = b2);
    a2.defaultValue = b2;
  }
  c2 = a2.name;
  "" !== c2 && (a2.name = "");
  a2.defaultChecked = !!a2._wrapperState.initialChecked;
  "" !== c2 && (a2.name = c2);
}
function cb(a2, b2, c2) {
  if ("number" !== b2 || Xa(a2.ownerDocument) !== a2)
    null == c2 ? a2.defaultValue = "" + a2._wrapperState.initialValue : a2.defaultValue !== "" + c2 && (a2.defaultValue = "" + c2);
}
var eb = Array.isArray;
function fb(a2, b2, c2, d2) {
  a2 = a2.options;
  if (b2) {
    b2 = {};
    for (var e2 = 0; e2 < c2.length; e2++)
      b2["$" + c2[e2]] = true;
    for (c2 = 0; c2 < a2.length; c2++)
      e2 = b2.hasOwnProperty("$" + a2[c2].value), a2[c2].selected !== e2 && (a2[c2].selected = e2), e2 && d2 && (a2[c2].defaultSelected = true);
  } else {
    c2 = "" + Sa(c2);
    b2 = null;
    for (e2 = 0; e2 < a2.length; e2++) {
      if (a2[e2].value === c2) {
        a2[e2].selected = true;
        d2 && (a2[e2].defaultSelected = true);
        return;
      }
      null !== b2 || a2[e2].disabled || (b2 = a2[e2]);
    }
    null !== b2 && (b2.selected = true);
  }
}
function gb(a2, b2) {
  if (null != b2.dangerouslySetInnerHTML)
    throw Error(p$4(91));
  return A$2({}, b2, { value: void 0, defaultValue: void 0, children: "" + a2._wrapperState.initialValue });
}
function hb(a2, b2) {
  var c2 = b2.value;
  if (null == c2) {
    c2 = b2.children;
    b2 = b2.defaultValue;
    if (null != c2) {
      if (null != b2)
        throw Error(p$4(92));
      if (eb(c2)) {
        if (1 < c2.length)
          throw Error(p$4(93));
        c2 = c2[0];
      }
      b2 = c2;
    }
    null == b2 && (b2 = "");
    c2 = b2;
  }
  a2._wrapperState = { initialValue: Sa(c2) };
}
function ib(a2, b2) {
  var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
  null != c2 && (c2 = "" + c2, c2 !== a2.value && (a2.value = c2), null == b2.defaultValue && a2.defaultValue !== c2 && (a2.defaultValue = c2));
  null != d2 && (a2.defaultValue = "" + d2);
}
function jb(a2) {
  var b2 = a2.textContent;
  b2 === a2._wrapperState.initialValue && "" !== b2 && null !== b2 && (a2.value = b2);
}
function kb(a2) {
  switch (a2) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a2, b2) {
  return null == a2 || "http://www.w3.org/1999/xhtml" === a2 ? kb(b2) : "http://www.w3.org/2000/svg" === a2 && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a2;
}
var mb, nb = function(a2) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e2) {
    MSApp.execUnsafeLocalFunction(function() {
      return a2(b2, c2, d2, e2);
    });
  } : a2;
}(function(a2, b2) {
  if ("http://www.w3.org/2000/svg" !== a2.namespaceURI || "innerHTML" in a2)
    a2.innerHTML = b2;
  else {
    mb = mb || document.createElement("div");
    mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
    for (b2 = mb.firstChild; a2.firstChild; )
      a2.removeChild(a2.firstChild);
    for (; b2.firstChild; )
      a2.appendChild(b2.firstChild);
  }
});
function ob(a2, b2) {
  if (b2) {
    var c2 = a2.firstChild;
    if (c2 && c2 === a2.lastChild && 3 === c2.nodeType) {
      c2.nodeValue = b2;
      return;
    }
  }
  a2.textContent = b2;
}
var pb = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(a2) {
  qb.forEach(function(b2) {
    b2 = b2 + a2.charAt(0).toUpperCase() + a2.substring(1);
    pb[b2] = pb[a2];
  });
});
function rb(a2, b2, c2) {
  return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a2) && pb[a2] ? ("" + b2).trim() : b2 + "px";
}
function sb(a2, b2) {
  a2 = a2.style;
  for (var c2 in b2)
    if (b2.hasOwnProperty(c2)) {
      var d2 = 0 === c2.indexOf("--"), e2 = rb(c2, b2[c2], d2);
      "float" === c2 && (c2 = "cssFloat");
      d2 ? a2.setProperty(c2, e2) : a2[c2] = e2;
    }
}
var tb = A$2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function ub(a2, b2) {
  if (b2) {
    if (tb[a2] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
      throw Error(p$4(137, a2));
    if (null != b2.dangerouslySetInnerHTML) {
      if (null != b2.children)
        throw Error(p$4(60));
      if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
        throw Error(p$4(61));
    }
    if (null != b2.style && "object" !== typeof b2.style)
      throw Error(p$4(62));
  }
}
function vb(a2, b2) {
  if (-1 === a2.indexOf("-"))
    return "string" === typeof b2.is;
  switch (a2) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
var wb = null;
function xb(a2) {
  a2 = a2.target || a2.srcElement || window;
  a2.correspondingUseElement && (a2 = a2.correspondingUseElement);
  return 3 === a2.nodeType ? a2.parentNode : a2;
}
var yb = null, zb = null, Ab = null;
function Bb(a2) {
  if (a2 = Cb(a2)) {
    if ("function" !== typeof yb)
      throw Error(p$4(280));
    var b2 = a2.stateNode;
    b2 && (b2 = Db(b2), yb(a2.stateNode, a2.type, b2));
  }
}
function Eb(a2) {
  zb ? Ab ? Ab.push(a2) : Ab = [a2] : zb = a2;
}
function Fb() {
  if (zb) {
    var a2 = zb, b2 = Ab;
    Ab = zb = null;
    Bb(a2);
    if (b2)
      for (a2 = 0; a2 < b2.length; a2++)
        Bb(b2[a2]);
  }
}
function Gb(a2, b2) {
  return a2(b2);
}
function Hb() {
}
var Ib = false;
function Jb(a2, b2, c2) {
  if (Ib)
    return a2(b2, c2);
  Ib = true;
  try {
    return Gb(a2, b2, c2);
  } finally {
    if (Ib = false, null !== zb || null !== Ab)
      Hb(), Fb();
  }
}
function Kb(a2, b2) {
  var c2 = a2.stateNode;
  if (null === c2)
    return null;
  var d2 = Db(c2);
  if (null === d2)
    return null;
  c2 = d2[b2];
  a:
    switch (b2) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d2 = !d2.disabled) || (a2 = a2.type, d2 = !("button" === a2 || "input" === a2 || "select" === a2 || "textarea" === a2));
        a2 = !d2;
        break a;
      default:
        a2 = false;
    }
  if (a2)
    return null;
  if (c2 && "function" !== typeof c2)
    throw Error(p$4(231, b2, typeof c2));
  return c2;
}
var Lb = false;
if (ia)
  try {
    var Mb = {};
    Object.defineProperty(Mb, "passive", { get: function() {
      Lb = true;
    } });
    window.addEventListener("test", Mb, Mb);
    window.removeEventListener("test", Mb, Mb);
  } catch (a2) {
    Lb = false;
  }
function Nb(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b2.apply(c2, l2);
  } catch (m2) {
    this.onError(m2);
  }
}
var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a2) {
  Ob = true;
  Pb = a2;
} };
function Tb(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  Ob = false;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l2 = Pb;
      Ob = false;
      Pb = null;
    } else
      throw Error(p$4(198));
    Qb || (Qb = true, Rb = l2);
  }
}
function Vb(a2) {
  var b2 = a2, c2 = a2;
  if (a2.alternate)
    for (; b2.return; )
      b2 = b2.return;
  else {
    a2 = b2;
    do
      b2 = a2, 0 !== (b2.flags & 4098) && (c2 = b2.return), a2 = b2.return;
    while (a2);
  }
  return 3 === b2.tag ? c2 : null;
}
function Wb(a2) {
  if (13 === a2.tag) {
    var b2 = a2.memoizedState;
    null === b2 && (a2 = a2.alternate, null !== a2 && (b2 = a2.memoizedState));
    if (null !== b2)
      return b2.dehydrated;
  }
  return null;
}
function Xb(a2) {
  if (Vb(a2) !== a2)
    throw Error(p$4(188));
}
function Yb(a2) {
  var b2 = a2.alternate;
  if (!b2) {
    b2 = Vb(a2);
    if (null === b2)
      throw Error(p$4(188));
    return b2 !== a2 ? null : a2;
  }
  for (var c2 = a2, d2 = b2; ; ) {
    var e2 = c2.return;
    if (null === e2)
      break;
    var f2 = e2.alternate;
    if (null === f2) {
      d2 = e2.return;
      if (null !== d2) {
        c2 = d2;
        continue;
      }
      break;
    }
    if (e2.child === f2.child) {
      for (f2 = e2.child; f2; ) {
        if (f2 === c2)
          return Xb(e2), a2;
        if (f2 === d2)
          return Xb(e2), b2;
        f2 = f2.sibling;
      }
      throw Error(p$4(188));
    }
    if (c2.return !== d2.return)
      c2 = e2, d2 = f2;
    else {
      for (var g2 = false, h2 = e2.child; h2; ) {
        if (h2 === c2) {
          g2 = true;
          c2 = e2;
          d2 = f2;
          break;
        }
        if (h2 === d2) {
          g2 = true;
          d2 = e2;
          c2 = f2;
          break;
        }
        h2 = h2.sibling;
      }
      if (!g2) {
        for (h2 = f2.child; h2; ) {
          if (h2 === c2) {
            g2 = true;
            c2 = f2;
            d2 = e2;
            break;
          }
          if (h2 === d2) {
            g2 = true;
            d2 = f2;
            c2 = e2;
            break;
          }
          h2 = h2.sibling;
        }
        if (!g2)
          throw Error(p$4(189));
      }
    }
    if (c2.alternate !== d2)
      throw Error(p$4(190));
  }
  if (3 !== c2.tag)
    throw Error(p$4(188));
  return c2.stateNode.current === c2 ? a2 : b2;
}
function Zb(a2) {
  a2 = Yb(a2);
  return null !== a2 ? $b(a2) : null;
}
function $b(a2) {
  if (5 === a2.tag || 6 === a2.tag)
    return a2;
  for (a2 = a2.child; null !== a2; ) {
    var b2 = $b(a2);
    if (null !== b2)
      return b2;
    a2 = a2.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B$3 = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
function mc(a2) {
  if (lc && "function" === typeof lc.onCommitFiberRoot)
    try {
      lc.onCommitFiberRoot(kc, a2, void 0, 128 === (a2.current.flags & 128));
    } catch (b2) {
    }
}
var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
function nc(a2) {
  a2 >>>= 0;
  return 0 === a2 ? 32 : 31 - (pc(a2) / qc | 0) | 0;
}
var rc = 64, sc = 4194304;
function tc(a2) {
  switch (a2 & -a2) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a2 & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a2 & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a2;
  }
}
function uc(a2, b2) {
  var c2 = a2.pendingLanes;
  if (0 === c2)
    return 0;
  var d2 = 0, e2 = a2.suspendedLanes, f2 = a2.pingedLanes, g2 = c2 & 268435455;
  if (0 !== g2) {
    var h2 = g2 & ~e2;
    0 !== h2 ? d2 = tc(h2) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
  } else
    g2 = c2 & ~e2, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
  if (0 === d2)
    return 0;
  if (0 !== b2 && b2 !== d2 && 0 === (b2 & e2) && (e2 = d2 & -d2, f2 = b2 & -b2, e2 >= f2 || 16 === e2 && 0 !== (f2 & 4194240)))
    return b2;
  0 !== (d2 & 4) && (d2 |= c2 & 16);
  b2 = a2.entangledLanes;
  if (0 !== b2)
    for (a2 = a2.entanglements, b2 &= d2; 0 < b2; )
      c2 = 31 - oc(b2), e2 = 1 << c2, d2 |= a2[c2], b2 &= ~e2;
  return d2;
}
function vc(a2, b2) {
  switch (a2) {
    case 1:
    case 2:
    case 4:
      return b2 + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b2 + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a2, b2) {
  for (var c2 = a2.suspendedLanes, d2 = a2.pingedLanes, e2 = a2.expirationTimes, f2 = a2.pendingLanes; 0 < f2; ) {
    var g2 = 31 - oc(f2), h2 = 1 << g2, k2 = e2[g2];
    if (-1 === k2) {
      if (0 === (h2 & c2) || 0 !== (h2 & d2))
        e2[g2] = vc(h2, b2);
    } else
      k2 <= b2 && (a2.expiredLanes |= h2);
    f2 &= ~h2;
  }
}
function xc(a2) {
  a2 = a2.pendingLanes & -1073741825;
  return 0 !== a2 ? a2 : a2 & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a2 = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a2;
}
function zc(a2) {
  for (var b2 = [], c2 = 0; 31 > c2; c2++)
    b2.push(a2);
  return b2;
}
function Ac(a2, b2, c2) {
  a2.pendingLanes |= b2;
  536870912 !== b2 && (a2.suspendedLanes = 0, a2.pingedLanes = 0);
  a2 = a2.eventTimes;
  b2 = 31 - oc(b2);
  a2[b2] = c2;
}
function Bc(a2, b2) {
  var c2 = a2.pendingLanes & ~b2;
  a2.pendingLanes = b2;
  a2.suspendedLanes = 0;
  a2.pingedLanes = 0;
  a2.expiredLanes &= b2;
  a2.mutableReadLanes &= b2;
  a2.entangledLanes &= b2;
  b2 = a2.entanglements;
  var d2 = a2.eventTimes;
  for (a2 = a2.expirationTimes; 0 < c2; ) {
    var e2 = 31 - oc(c2), f2 = 1 << e2;
    b2[e2] = 0;
    d2[e2] = -1;
    a2[e2] = -1;
    c2 &= ~f2;
  }
}
function Cc(a2, b2) {
  var c2 = a2.entangledLanes |= b2;
  for (a2 = a2.entanglements; c2; ) {
    var d2 = 31 - oc(c2), e2 = 1 << d2;
    e2 & b2 | a2[d2] & b2 && (a2[d2] |= b2);
    c2 &= ~e2;
  }
}
var C$3 = 0;
function Dc(a2) {
  a2 &= -a2;
  return 1 < a2 ? 4 < a2 ? 0 !== (a2 & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a2, b2) {
  switch (a2) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b2.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b2.pointerId);
  }
}
function Tc(a2, b2, c2, d2, e2, f2) {
  if (null === a2 || a2.nativeEvent !== f2)
    return a2 = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e2] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a2;
  a2.eventSystemFlags |= d2;
  b2 = a2.targetContainers;
  null !== e2 && -1 === b2.indexOf(e2) && b2.push(e2);
  return a2;
}
function Uc(a2, b2, c2, d2, e2) {
  switch (b2) {
    case "focusin":
      return Lc = Tc(Lc, a2, b2, c2, d2, e2), true;
    case "dragenter":
      return Mc = Tc(Mc, a2, b2, c2, d2, e2), true;
    case "mouseover":
      return Nc = Tc(Nc, a2, b2, c2, d2, e2), true;
    case "pointerover":
      var f2 = e2.pointerId;
      Oc.set(f2, Tc(Oc.get(f2) || null, a2, b2, c2, d2, e2));
      return true;
    case "gotpointercapture":
      return f2 = e2.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a2, b2, c2, d2, e2)), true;
  }
  return false;
}
function Vc(a2) {
  var b2 = Wc(a2.target);
  if (null !== b2) {
    var c2 = Vb(b2);
    if (null !== c2) {
      if (b2 = c2.tag, 13 === b2) {
        if (b2 = Wb(c2), null !== b2) {
          a2.blockedOn = b2;
          Ic(a2.priority, function() {
            Gc(c2);
          });
          return;
        }
      } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
        a2.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a2.blockedOn = null;
}
function Xc(a2) {
  if (null !== a2.blockedOn)
    return false;
  for (var b2 = a2.targetContainers; 0 < b2.length; ) {
    var c2 = Yc(a2.domEventName, a2.eventSystemFlags, b2[0], a2.nativeEvent);
    if (null === c2) {
      c2 = a2.nativeEvent;
      var d2 = new c2.constructor(c2.type, c2);
      wb = d2;
      c2.target.dispatchEvent(d2);
      wb = null;
    } else
      return b2 = Cb(c2), null !== b2 && Fc(b2), a2.blockedOn = c2, false;
    b2.shift();
  }
  return true;
}
function Zc(a2, b2, c2) {
  Xc(a2) && c2.delete(b2);
}
function $c() {
  Jc = false;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a2, b2) {
  a2.blockedOn === b2 && (a2.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a2) {
  function b2(b3) {
    return ad(b3, a2);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a2);
    for (var c2 = 1; c2 < Kc.length; c2++) {
      var d2 = Kc[c2];
      d2.blockedOn === a2 && (d2.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a2);
  null !== Mc && ad(Mc, a2);
  null !== Nc && ad(Nc, a2);
  Oc.forEach(b2);
  Pc.forEach(b2);
  for (c2 = 0; c2 < Qc.length; c2++)
    d2 = Qc[c2], d2.blockedOn === a2 && (d2.blockedOn = null);
  for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); )
    Vc(c2), null === c2.blockedOn && Qc.shift();
}
var cd = ua.ReactCurrentBatchConfig, dd = true;
function ed(a2, b2, c2, d2) {
  var e2 = C$3, f2 = cd.transition;
  cd.transition = null;
  try {
    C$3 = 1, fd(a2, b2, c2, d2);
  } finally {
    C$3 = e2, cd.transition = f2;
  }
}
function gd(a2, b2, c2, d2) {
  var e2 = C$3, f2 = cd.transition;
  cd.transition = null;
  try {
    C$3 = 4, fd(a2, b2, c2, d2);
  } finally {
    C$3 = e2, cd.transition = f2;
  }
}
function fd(a2, b2, c2, d2) {
  if (dd) {
    var e2 = Yc(a2, b2, c2, d2);
    if (null === e2)
      hd(a2, b2, d2, id, c2), Sc(a2, d2);
    else if (Uc(e2, a2, b2, c2, d2))
      d2.stopPropagation();
    else if (Sc(a2, d2), b2 & 4 && -1 < Rc.indexOf(a2)) {
      for (; null !== e2; ) {
        var f2 = Cb(e2);
        null !== f2 && Ec(f2);
        f2 = Yc(a2, b2, c2, d2);
        null === f2 && hd(a2, b2, d2, id, c2);
        if (f2 === e2)
          break;
        e2 = f2;
      }
      null !== e2 && d2.stopPropagation();
    } else
      hd(a2, b2, d2, null, c2);
  }
}
var id = null;
function Yc(a2, b2, c2, d2) {
  id = null;
  a2 = xb(d2);
  a2 = Wc(a2);
  if (null !== a2)
    if (b2 = Vb(a2), null === b2)
      a2 = null;
    else if (c2 = b2.tag, 13 === c2) {
      a2 = Wb(b2);
      if (null !== a2)
        return a2;
      a2 = null;
    } else if (3 === c2) {
      if (b2.stateNode.current.memoizedState.isDehydrated)
        return 3 === b2.tag ? b2.stateNode.containerInfo : null;
      a2 = null;
    } else
      b2 !== a2 && (a2 = null);
  id = a2;
  return null;
}
function jd(a2) {
  switch (a2) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a2, b2 = ld, c2 = b2.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
  for (a2 = 0; a2 < c2 && b2[a2] === e2[a2]; a2++)
    ;
  var g2 = c2 - a2;
  for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e2[f2 - d2]; d2++)
    ;
  return md = e2.slice(a2, 1 < d2 ? 1 - d2 : void 0);
}
function od(a2) {
  var b2 = a2.keyCode;
  "charCode" in a2 ? (a2 = a2.charCode, 0 === a2 && 13 === b2 && (a2 = 13)) : a2 = b2;
  10 === a2 && (a2 = 13);
  return 32 <= a2 || 13 === a2 ? a2 : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a2) {
  function b2(b3, d2, e2, f2, g2) {
    this._reactName = b3;
    this._targetInst = e2;
    this.type = d2;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c2 in a2)
      a2.hasOwnProperty(c2) && (b3 = a2[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A$2(b2.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a3 = this.nativeEvent;
    a3 && (a3.preventDefault ? a3.preventDefault() : "unknown" !== typeof a3.returnValue && (a3.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a3 = this.nativeEvent;
    a3 && (a3.stopPropagation ? a3.stopPropagation() : "unknown" !== typeof a3.cancelBubble && (a3.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b2;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a2) {
  return a2.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A$2({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A$2({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a2) {
  return void 0 === a2.relatedTarget ? a2.fromElement === a2.srcElement ? a2.toElement : a2.fromElement : a2.relatedTarget;
}, movementX: function(a2) {
  if ("movementX" in a2)
    return a2.movementX;
  a2 !== yd && (yd && "mousemove" === a2.type ? (wd = a2.screenX - yd.screenX, xd = a2.screenY - yd.screenY) : xd = wd = 0, yd = a2);
  return wd;
}, movementY: function(a2) {
  return "movementY" in a2 ? a2.movementY : xd;
} }), Bd = rd(Ad), Cd = A$2({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A$2({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A$2({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A$2({}, sd, { clipboardData: function(a2) {
  return "clipboardData" in a2 ? a2.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = A$2({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a2) {
  var b2 = this.nativeEvent;
  return b2.getModifierState ? b2.getModifierState(a2) : (a2 = Od[a2]) ? !!b2[a2] : false;
}
function zd() {
  return Pd;
}
var Qd = A$2({}, ud, { key: function(a2) {
  if (a2.key) {
    var b2 = Md[a2.key] || a2.key;
    if ("Unidentified" !== b2)
      return b2;
  }
  return "keypress" === a2.type ? (a2 = od(a2), 13 === a2 ? "Enter" : String.fromCharCode(a2)) : "keydown" === a2.type || "keyup" === a2.type ? Nd[a2.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a2) {
  return "keypress" === a2.type ? od(a2) : 0;
}, keyCode: function(a2) {
  return "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
}, which: function(a2) {
  return "keypress" === a2.type ? od(a2) : "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
} }), Rd = rd(Qd), Sd = A$2({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A$2({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A$2({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A$2({}, Ad, {
  deltaX: function(a2) {
    return "deltaX" in a2 ? a2.deltaX : "wheelDeltaX" in a2 ? -a2.wheelDeltaX : 0;
  },
  deltaY: function(a2) {
    return "deltaY" in a2 ? a2.deltaY : "wheelDeltaY" in a2 ? -a2.wheelDeltaY : "wheelDelta" in a2 ? -a2.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae$2 = ia && "CompositionEvent" in window, be$2 = null;
ia && "documentMode" in document && (be$2 = document.documentMode);
var ce$2 = ia && "TextEvent" in window && !be$2, de$1 = ia && (!ae$2 || be$2 && 8 < be$2 && 11 >= be$2), ee$2 = String.fromCharCode(32), fe$2 = false;
function ge$2(a2, b2) {
  switch (a2) {
    case "keyup":
      return -1 !== $d.indexOf(b2.keyCode);
    case "keydown":
      return 229 !== b2.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he$2(a2) {
  a2 = a2.detail;
  return "object" === typeof a2 && "data" in a2 ? a2.data : null;
}
var ie$2 = false;
function je$2(a2, b2) {
  switch (a2) {
    case "compositionend":
      return he$2(b2);
    case "keypress":
      if (32 !== b2.which)
        return null;
      fe$2 = true;
      return ee$2;
    case "textInput":
      return a2 = b2.data, a2 === ee$2 && fe$2 ? null : a2;
    default:
      return null;
  }
}
function ke$1(a2, b2) {
  if (ie$2)
    return "compositionend" === a2 || !ae$2 && ge$2(a2, b2) ? (a2 = nd(), md = ld = kd = null, ie$2 = false, a2) : null;
  switch (a2) {
    case "paste":
      return null;
    case "keypress":
      if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
        if (b2.char && 1 < b2.char.length)
          return b2.char;
        if (b2.which)
          return String.fromCharCode(b2.which);
      }
      return null;
    case "compositionend":
      return de$1 && "ko" !== b2.locale ? null : b2.data;
    default:
      return null;
  }
}
var le$2 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me$2(a2) {
  var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
  return "input" === b2 ? !!le$2[a2.type] : "textarea" === b2 ? true : false;
}
function ne$2(a2, b2, c2, d2) {
  Eb(d2);
  b2 = oe$2(b2, "onChange");
  0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a2.push({ event: c2, listeners: b2 }));
}
var pe$1 = null, qe$1 = null;
function re$2(a2) {
  se$1(a2, 0);
}
function te$2(a2) {
  var b2 = ue$2(a2);
  if (Wa(b2))
    return a2;
}
function ve$2(a2, b2) {
  if ("change" === a2)
    return b2;
}
var we$2 = false;
if (ia) {
  var xe$2;
  if (ia) {
    var ye$2 = "oninput" in document;
    if (!ye$2) {
      var ze$2 = document.createElement("div");
      ze$2.setAttribute("oninput", "return;");
      ye$2 = "function" === typeof ze$2.oninput;
    }
    xe$2 = ye$2;
  } else
    xe$2 = false;
  we$2 = xe$2 && (!document.documentMode || 9 < document.documentMode);
}
function Ae$2() {
  pe$1 && (pe$1.detachEvent("onpropertychange", Be$2), qe$1 = pe$1 = null);
}
function Be$2(a2) {
  if ("value" === a2.propertyName && te$2(qe$1)) {
    var b2 = [];
    ne$2(b2, qe$1, a2, xb(a2));
    Jb(re$2, b2);
  }
}
function Ce$2(a2, b2, c2) {
  "focusin" === a2 ? (Ae$2(), pe$1 = b2, qe$1 = c2, pe$1.attachEvent("onpropertychange", Be$2)) : "focusout" === a2 && Ae$2();
}
function De$2(a2) {
  if ("selectionchange" === a2 || "keyup" === a2 || "keydown" === a2)
    return te$2(qe$1);
}
function Ee$2(a2, b2) {
  if ("click" === a2)
    return te$2(b2);
}
function Fe$2(a2, b2) {
  if ("input" === a2 || "change" === a2)
    return te$2(b2);
}
function Ge$2(a2, b2) {
  return a2 === b2 && (0 !== a2 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
}
var He$2 = "function" === typeof Object.is ? Object.is : Ge$2;
function Ie$2(a2, b2) {
  if (He$2(a2, b2))
    return true;
  if ("object" !== typeof a2 || null === a2 || "object" !== typeof b2 || null === b2)
    return false;
  var c2 = Object.keys(a2), d2 = Object.keys(b2);
  if (c2.length !== d2.length)
    return false;
  for (d2 = 0; d2 < c2.length; d2++) {
    var e2 = c2[d2];
    if (!ja.call(b2, e2) || !He$2(a2[e2], b2[e2]))
      return false;
  }
  return true;
}
function Je$2(a2) {
  for (; a2 && a2.firstChild; )
    a2 = a2.firstChild;
  return a2;
}
function Ke$2(a2, b2) {
  var c2 = Je$2(a2);
  a2 = 0;
  for (var d2; c2; ) {
    if (3 === c2.nodeType) {
      d2 = a2 + c2.textContent.length;
      if (a2 <= b2 && d2 >= b2)
        return { node: c2, offset: b2 - a2 };
      a2 = d2;
    }
    a: {
      for (; c2; ) {
        if (c2.nextSibling) {
          c2 = c2.nextSibling;
          break a;
        }
        c2 = c2.parentNode;
      }
      c2 = void 0;
    }
    c2 = Je$2(c2);
  }
}
function Le$2(a2, b2) {
  return a2 && b2 ? a2 === b2 ? true : a2 && 3 === a2.nodeType ? false : b2 && 3 === b2.nodeType ? Le$2(a2, b2.parentNode) : "contains" in a2 ? a2.contains(b2) : a2.compareDocumentPosition ? !!(a2.compareDocumentPosition(b2) & 16) : false : false;
}
function Me$2() {
  for (var a2 = window, b2 = Xa(); b2 instanceof a2.HTMLIFrameElement; ) {
    try {
      var c2 = "string" === typeof b2.contentWindow.location.href;
    } catch (d2) {
      c2 = false;
    }
    if (c2)
      a2 = b2.contentWindow;
    else
      break;
    b2 = Xa(a2.document);
  }
  return b2;
}
function Ne$2(a2) {
  var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
  return b2 && ("input" === b2 && ("text" === a2.type || "search" === a2.type || "tel" === a2.type || "url" === a2.type || "password" === a2.type) || "textarea" === b2 || "true" === a2.contentEditable);
}
function Oe$2(a2) {
  var b2 = Me$2(), c2 = a2.focusedElem, d2 = a2.selectionRange;
  if (b2 !== c2 && c2 && c2.ownerDocument && Le$2(c2.ownerDocument.documentElement, c2)) {
    if (null !== d2 && Ne$2(c2)) {
      if (b2 = d2.start, a2 = d2.end, void 0 === a2 && (a2 = b2), "selectionStart" in c2)
        c2.selectionStart = b2, c2.selectionEnd = Math.min(a2, c2.value.length);
      else if (a2 = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a2.getSelection) {
        a2 = a2.getSelection();
        var e2 = c2.textContent.length, f2 = Math.min(d2.start, e2);
        d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e2);
        !a2.extend && f2 > d2 && (e2 = d2, d2 = f2, f2 = e2);
        e2 = Ke$2(c2, f2);
        var g2 = Ke$2(
          c2,
          d2
        );
        e2 && g2 && (1 !== a2.rangeCount || a2.anchorNode !== e2.node || a2.anchorOffset !== e2.offset || a2.focusNode !== g2.node || a2.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e2.node, e2.offset), a2.removeAllRanges(), f2 > d2 ? (a2.addRange(b2), a2.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a2.addRange(b2)));
      }
    }
    b2 = [];
    for (a2 = c2; a2 = a2.parentNode; )
      1 === a2.nodeType && b2.push({ element: a2, left: a2.scrollLeft, top: a2.scrollTop });
    "function" === typeof c2.focus && c2.focus();
    for (c2 = 0; c2 < b2.length; c2++)
      a2 = b2[c2], a2.element.scrollLeft = a2.left, a2.element.scrollTop = a2.top;
  }
}
var Pe$2 = ia && "documentMode" in document && 11 >= document.documentMode, Qe$2 = null, Re$2 = null, Se$2 = null, Te$2 = false;
function Ue$2(a2, b2, c2) {
  var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
  Te$2 || null == Qe$2 || Qe$2 !== Xa(d2) || (d2 = Qe$2, "selectionStart" in d2 && Ne$2(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se$2 && Ie$2(Se$2, d2) || (Se$2 = d2, d2 = oe$2(Re$2, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a2.push({ event: b2, listeners: d2 }), b2.target = Qe$2)));
}
function Ve$1(a2, b2) {
  var c2 = {};
  c2[a2.toLowerCase()] = b2.toLowerCase();
  c2["Webkit" + a2] = "webkit" + b2;
  c2["Moz" + a2] = "moz" + b2;
  return c2;
}
var We$2 = { animationend: Ve$1("Animation", "AnimationEnd"), animationiteration: Ve$1("Animation", "AnimationIteration"), animationstart: Ve$1("Animation", "AnimationStart"), transitionend: Ve$1("Transition", "TransitionEnd") }, Xe$2 = {}, Ye$2 = {};
ia && (Ye$2 = document.createElement("div").style, "AnimationEvent" in window || (delete We$2.animationend.animation, delete We$2.animationiteration.animation, delete We$2.animationstart.animation), "TransitionEvent" in window || delete We$2.transitionend.transition);
function Ze$2(a2) {
  if (Xe$2[a2])
    return Xe$2[a2];
  if (!We$2[a2])
    return a2;
  var b2 = We$2[a2], c2;
  for (c2 in b2)
    if (b2.hasOwnProperty(c2) && c2 in Ye$2)
      return Xe$2[a2] = b2[c2];
  return a2;
}
var $e$2 = Ze$2("animationend"), af = Ze$2("animationiteration"), bf = Ze$2("animationstart"), cf = Ze$2("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a2, b2) {
  df.set(a2, b2);
  fa(b2, [a2]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e$2, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a2, b2, c2) {
  var d2 = a2.type || "unknown-event";
  a2.currentTarget = c2;
  Ub(d2, b2, void 0, a2);
  a2.currentTarget = null;
}
function se$1(a2, b2) {
  b2 = 0 !== (b2 & 4);
  for (var c2 = 0; c2 < a2.length; c2++) {
    var d2 = a2[c2], e2 = d2.event;
    d2 = d2.listeners;
    a: {
      var f2 = void 0;
      if (b2)
        for (var g2 = d2.length - 1; 0 <= g2; g2--) {
          var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k2 !== f2 && e2.isPropagationStopped())
            break a;
          nf(e2, h2, l2);
          f2 = k2;
        }
      else
        for (g2 = 0; g2 < d2.length; g2++) {
          h2 = d2[g2];
          k2 = h2.instance;
          l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k2 !== f2 && e2.isPropagationStopped())
            break a;
          nf(e2, h2, l2);
          f2 = k2;
        }
    }
  }
  if (Qb)
    throw a2 = Rb, Qb = false, Rb = null, a2;
}
function D$4(a2, b2) {
  var c2 = b2[of];
  void 0 === c2 && (c2 = b2[of] = /* @__PURE__ */ new Set());
  var d2 = a2 + "__bubble";
  c2.has(d2) || (pf(b2, a2, 2, false), c2.add(d2));
}
function qf(a2, b2, c2) {
  var d2 = 0;
  b2 && (d2 |= 4);
  pf(c2, a2, d2, b2);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a2) {
  if (!a2[rf]) {
    a2[rf] = true;
    da.forEach(function(b3) {
      "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a2), qf(b3, true, a2));
    });
    var b2 = 9 === a2.nodeType ? a2 : a2.ownerDocument;
    null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
  }
}
function pf(a2, b2, c2, d2) {
  switch (jd(b2)) {
    case 1:
      var e2 = ed;
      break;
    case 4:
      e2 = gd;
      break;
    default:
      e2 = fd;
  }
  c2 = e2.bind(null, b2, c2, a2);
  e2 = void 0;
  !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e2 = true);
  d2 ? void 0 !== e2 ? a2.addEventListener(b2, c2, { capture: true, passive: e2 }) : a2.addEventListener(b2, c2, true) : void 0 !== e2 ? a2.addEventListener(b2, c2, { passive: e2 }) : a2.addEventListener(b2, c2, false);
}
function hd(a2, b2, c2, d2, e2) {
  var f2 = d2;
  if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
    a:
      for (; ; ) {
        if (null === d2)
          return;
        var g2 = d2.tag;
        if (3 === g2 || 4 === g2) {
          var h2 = d2.stateNode.containerInfo;
          if (h2 === e2 || 8 === h2.nodeType && h2.parentNode === e2)
            break;
          if (4 === g2)
            for (g2 = d2.return; null !== g2; ) {
              var k2 = g2.tag;
              if (3 === k2 || 4 === k2) {
                if (k2 = g2.stateNode.containerInfo, k2 === e2 || 8 === k2.nodeType && k2.parentNode === e2)
                  return;
              }
              g2 = g2.return;
            }
          for (; null !== h2; ) {
            g2 = Wc(h2);
            if (null === g2)
              return;
            k2 = g2.tag;
            if (5 === k2 || 6 === k2) {
              d2 = f2 = g2;
              continue a;
            }
            h2 = h2.parentNode;
          }
        }
        d2 = d2.return;
      }
  Jb(function() {
    var d3 = f2, e3 = xb(c2), g3 = [];
    a: {
      var h3 = df.get(a2);
      if (void 0 !== h3) {
        var k3 = td, n9 = a2;
        switch (a2) {
          case "keypress":
            if (0 === od(c2))
              break a;
          case "keydown":
          case "keyup":
            k3 = Rd;
            break;
          case "focusin":
            n9 = "focus";
            k3 = Fd;
            break;
          case "focusout":
            n9 = "blur";
            k3 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k3 = Fd;
            break;
          case "click":
            if (2 === c2.button)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k3 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k3 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k3 = Vd;
            break;
          case $e$2:
          case af:
          case bf:
            k3 = Hd;
            break;
          case cf:
            k3 = Xd;
            break;
          case "scroll":
            k3 = vd;
            break;
          case "wheel":
            k3 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k3 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k3 = Td;
        }
        var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a2, x2 = t2 ? null !== h3 ? h3 + "Capture" : null : h3;
        t2 = [];
        for (var w2 = d3, u2; null !== w2; ) {
          u2 = w2;
          var F2 = u2.stateNode;
          5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
          if (J2)
            break;
          w2 = w2.return;
        }
        0 < t2.length && (h3 = new k3(h3, n9, null, c2, e3), g3.push({ event: h3, listeners: t2 }));
      }
    }
    if (0 === (b2 & 7)) {
      a: {
        h3 = "mouseover" === a2 || "pointerover" === a2;
        k3 = "mouseout" === a2 || "pointerout" === a2;
        if (h3 && c2 !== wb && (n9 = c2.relatedTarget || c2.fromElement) && (Wc(n9) || n9[uf]))
          break a;
        if (k3 || h3) {
          h3 = e3.window === e3 ? e3 : (h3 = e3.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
          if (k3) {
            if (n9 = c2.relatedTarget || c2.toElement, k3 = d3, n9 = n9 ? Wc(n9) : null, null !== n9 && (J2 = Vb(n9), n9 !== J2 || 5 !== n9.tag && 6 !== n9.tag))
              n9 = null;
          } else
            k3 = null, n9 = d3;
          if (k3 !== n9) {
            t2 = Bd;
            F2 = "onMouseLeave";
            x2 = "onMouseEnter";
            w2 = "mouse";
            if ("pointerout" === a2 || "pointerover" === a2)
              t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
            J2 = null == k3 ? h3 : ue$2(k3);
            u2 = null == n9 ? h3 : ue$2(n9);
            h3 = new t2(F2, w2 + "leave", k3, c2, e3);
            h3.target = J2;
            h3.relatedTarget = u2;
            F2 = null;
            Wc(e3) === d3 && (t2 = new t2(x2, w2 + "enter", n9, c2, e3), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
            J2 = F2;
            if (k3 && n9)
              b: {
                t2 = k3;
                x2 = n9;
                w2 = 0;
                for (u2 = t2; u2; u2 = vf(u2))
                  w2++;
                u2 = 0;
                for (F2 = x2; F2; F2 = vf(F2))
                  u2++;
                for (; 0 < w2 - u2; )
                  t2 = vf(t2), w2--;
                for (; 0 < u2 - w2; )
                  x2 = vf(x2), u2--;
                for (; w2--; ) {
                  if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                    break b;
                  t2 = vf(t2);
                  x2 = vf(x2);
                }
                t2 = null;
              }
            else
              t2 = null;
            null !== k3 && wf(g3, h3, k3, t2, false);
            null !== n9 && null !== J2 && wf(g3, J2, n9, t2, true);
          }
        }
      }
      a: {
        h3 = d3 ? ue$2(d3) : window;
        k3 = h3.nodeName && h3.nodeName.toLowerCase();
        if ("select" === k3 || "input" === k3 && "file" === h3.type)
          var na = ve$2;
        else if (me$2(h3))
          if (we$2)
            na = Fe$2;
          else {
            na = De$2;
            var xa = Ce$2;
          }
        else
          (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (na = Ee$2);
        if (na && (na = na(a2, d3))) {
          ne$2(g3, na, c2, e3);
          break a;
        }
        xa && xa(a2, h3, d3);
        "focusout" === a2 && (xa = h3._wrapperState) && xa.controlled && "number" === h3.type && cb(h3, "number", h3.value);
      }
      xa = d3 ? ue$2(d3) : window;
      switch (a2) {
        case "focusin":
          if (me$2(xa) || "true" === xa.contentEditable)
            Qe$2 = xa, Re$2 = d3, Se$2 = null;
          break;
        case "focusout":
          Se$2 = Re$2 = Qe$2 = null;
          break;
        case "mousedown":
          Te$2 = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te$2 = false;
          Ue$2(g3, c2, e3);
          break;
        case "selectionchange":
          if (Pe$2)
            break;
        case "keydown":
        case "keyup":
          Ue$2(g3, c2, e3);
      }
      var $a;
      if (ae$2)
        b: {
          switch (a2) {
            case "compositionstart":
              var ba = "onCompositionStart";
              break b;
            case "compositionend":
              ba = "onCompositionEnd";
              break b;
            case "compositionupdate":
              ba = "onCompositionUpdate";
              break b;
          }
          ba = void 0;
        }
      else
        ie$2 ? ge$2(a2, c2) && (ba = "onCompositionEnd") : "keydown" === a2 && 229 === c2.keyCode && (ba = "onCompositionStart");
      ba && (de$1 && "ko" !== c2.locale && (ie$2 || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie$2 && ($a = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie$2 = true)), xa = oe$2(d3, ba), 0 < xa.length && (ba = new Ld(ba, a2, null, c2, e3), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he$2(c2), null !== $a && (ba.data = $a))));
      if ($a = ce$2 ? je$2(a2, c2) : ke$1(a2, c2))
        d3 = oe$2(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld("onBeforeInput", "beforeinput", null, c2, e3), g3.push({ event: e3, listeners: d3 }), e3.data = $a);
    }
    se$1(g3, b2);
  });
}
function tf(a2, b2, c2) {
  return { instance: a2, listener: b2, currentTarget: c2 };
}
function oe$2(a2, b2) {
  for (var c2 = b2 + "Capture", d2 = []; null !== a2; ) {
    var e2 = a2, f2 = e2.stateNode;
    5 === e2.tag && null !== f2 && (e2 = f2, f2 = Kb(a2, c2), null != f2 && d2.unshift(tf(a2, f2, e2)), f2 = Kb(a2, b2), null != f2 && d2.push(tf(a2, f2, e2)));
    a2 = a2.return;
  }
  return d2;
}
function vf(a2) {
  if (null === a2)
    return null;
  do
    a2 = a2.return;
  while (a2 && 5 !== a2.tag);
  return a2 ? a2 : null;
}
function wf(a2, b2, c2, d2, e2) {
  for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
    var h2 = c2, k2 = h2.alternate, l2 = h2.stateNode;
    if (null !== k2 && k2 === d2)
      break;
    5 === h2.tag && null !== l2 && (h2 = l2, e2 ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h2))) : e2 || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h2))));
    c2 = c2.return;
  }
  0 !== g2.length && a2.push({ event: b2, listeners: g2 });
}
var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
function zf(a2) {
  return ("string" === typeof a2 ? a2 : "" + a2).replace(xf, "\n").replace(yf, "");
}
function Af(a2, b2, c2) {
  b2 = zf(b2);
  if (zf(a2) !== b2 && c2)
    throw Error(p$4(425));
}
function Bf() {
}
var Cf = null, Df = null;
function Ef(a2, b2) {
  return "textarea" === a2 || "noscript" === a2 || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a2) {
  return Hf.resolve(null).then(a2).catch(If);
} : Ff;
function If(a2) {
  setTimeout(function() {
    throw a2;
  });
}
function Kf(a2, b2) {
  var c2 = b2, d2 = 0;
  do {
    var e2 = c2.nextSibling;
    a2.removeChild(c2);
    if (e2 && 8 === e2.nodeType)
      if (c2 = e2.data, "/$" === c2) {
        if (0 === d2) {
          a2.removeChild(e2);
          bd(b2);
          return;
        }
        d2--;
      } else
        "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
    c2 = e2;
  } while (c2);
  bd(b2);
}
function Lf(a2) {
  for (; null != a2; a2 = a2.nextSibling) {
    var b2 = a2.nodeType;
    if (1 === b2 || 3 === b2)
      break;
    if (8 === b2) {
      b2 = a2.data;
      if ("$" === b2 || "$!" === b2 || "$?" === b2)
        break;
      if ("/$" === b2)
        return null;
    }
  }
  return a2;
}
function Mf(a2) {
  a2 = a2.previousSibling;
  for (var b2 = 0; a2; ) {
    if (8 === a2.nodeType) {
      var c2 = a2.data;
      if ("$" === c2 || "$!" === c2 || "$?" === c2) {
        if (0 === b2)
          return a2;
        b2--;
      } else
        "/$" === c2 && b2++;
    }
    a2 = a2.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
function Wc(a2) {
  var b2 = a2[Of];
  if (b2)
    return b2;
  for (var c2 = a2.parentNode; c2; ) {
    if (b2 = c2[uf] || c2[Of]) {
      c2 = b2.alternate;
      if (null !== b2.child || null !== c2 && null !== c2.child)
        for (a2 = Mf(a2); null !== a2; ) {
          if (c2 = a2[Of])
            return c2;
          a2 = Mf(a2);
        }
      return b2;
    }
    a2 = c2;
    c2 = a2.parentNode;
  }
  return null;
}
function Cb(a2) {
  a2 = a2[Of] || a2[uf];
  return !a2 || 5 !== a2.tag && 6 !== a2.tag && 13 !== a2.tag && 3 !== a2.tag ? null : a2;
}
function ue$2(a2) {
  if (5 === a2.tag || 6 === a2.tag)
    return a2.stateNode;
  throw Error(p$4(33));
}
function Db(a2) {
  return a2[Pf] || null;
}
var Sf = [], Tf = -1;
function Uf(a2) {
  return { current: a2 };
}
function E$4(a2) {
  0 > Tf || (a2.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G$2(a2, b2) {
  Tf++;
  Sf[Tf] = a2.current;
  a2.current = b2;
}
var Vf = {}, H$3 = Uf(Vf), Wf = Uf(false), Xf = Vf;
function Yf(a2, b2) {
  var c2 = a2.type.contextTypes;
  if (!c2)
    return Vf;
  var d2 = a2.stateNode;
  if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
    return d2.__reactInternalMemoizedMaskedChildContext;
  var e2 = {}, f2;
  for (f2 in c2)
    e2[f2] = b2[f2];
  d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = b2, a2.__reactInternalMemoizedMaskedChildContext = e2);
  return e2;
}
function Zf(a2) {
  a2 = a2.childContextTypes;
  return null !== a2 && void 0 !== a2;
}
function $f() {
  E$4(Wf);
  E$4(H$3);
}
function ag(a2, b2, c2) {
  if (H$3.current !== Vf)
    throw Error(p$4(168));
  G$2(H$3, b2);
  G$2(Wf, c2);
}
function bg(a2, b2, c2) {
  var d2 = a2.stateNode;
  b2 = b2.childContextTypes;
  if ("function" !== typeof d2.getChildContext)
    return c2;
  d2 = d2.getChildContext();
  for (var e2 in d2)
    if (!(e2 in b2))
      throw Error(p$4(108, Ra(a2) || "Unknown", e2));
  return A$2({}, c2, d2);
}
function cg(a2) {
  a2 = (a2 = a2.stateNode) && a2.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H$3.current;
  G$2(H$3, a2);
  G$2(Wf, Wf.current);
  return true;
}
function dg(a2, b2, c2) {
  var d2 = a2.stateNode;
  if (!d2)
    throw Error(p$4(169));
  c2 ? (a2 = bg(a2, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a2, E$4(Wf), E$4(H$3), G$2(H$3, a2)) : E$4(Wf);
  G$2(Wf, c2);
}
var eg = null, fg = false, gg = false;
function hg(a2) {
  null === eg ? eg = [a2] : eg.push(a2);
}
function ig(a2) {
  fg = true;
  hg(a2);
}
function jg() {
  if (!gg && null !== eg) {
    gg = true;
    var a2 = 0, b2 = C$3;
    try {
      var c2 = eg;
      for (C$3 = 1; a2 < c2.length; a2++) {
        var d2 = c2[a2];
        do
          d2 = d2(true);
        while (null !== d2);
      }
      eg = null;
      fg = false;
    } catch (e2) {
      throw null !== eg && (eg = eg.slice(a2 + 1)), ac(fc, jg), e2;
    } finally {
      C$3 = b2, gg = false;
    }
  }
  return null;
}
var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
function tg(a2, b2) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a2;
  ng = b2;
}
function ug(a2, b2, c2) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a2;
  var d2 = rg;
  a2 = sg;
  var e2 = 32 - oc(d2) - 1;
  d2 &= ~(1 << e2);
  c2 += 1;
  var f2 = 32 - oc(b2) + e2;
  if (30 < f2) {
    var g2 = e2 - e2 % 5;
    f2 = (d2 & (1 << g2) - 1).toString(32);
    d2 >>= g2;
    e2 -= g2;
    rg = 1 << 32 - oc(b2) + e2 | c2 << e2 | d2;
    sg = f2 + a2;
  } else
    rg = 1 << f2 | c2 << e2 | d2, sg = a2;
}
function vg(a2) {
  null !== a2.return && (tg(a2, 1), ug(a2, 1, 0));
}
function wg(a2) {
  for (; a2 === mg; )
    mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a2 === qg; )
    qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null, yg = null, I$2 = false, zg = null;
function Ag(a2, b2) {
  var c2 = Bg(5, null, null, 0);
  c2.elementType = "DELETED";
  c2.stateNode = b2;
  c2.return = a2;
  b2 = a2.deletions;
  null === b2 ? (a2.deletions = [c2], a2.flags |= 16) : b2.push(c2);
}
function Cg(a2, b2) {
  switch (a2.tag) {
    case 5:
      var c2 = a2.type;
      b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
      return null !== b2 ? (a2.stateNode = b2, xg = a2, yg = Lf(b2.firstChild), true) : false;
    case 6:
      return b2 = "" === a2.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a2.stateNode = b2, xg = a2, yg = null, true) : false;
    case 13:
      return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a2.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a2, a2.child = c2, xg = a2, yg = null, true) : false;
    default:
      return false;
  }
}
function Dg(a2) {
  return 0 !== (a2.mode & 1) && 0 === (a2.flags & 128);
}
function Eg(a2) {
  if (I$2) {
    var b2 = yg;
    if (b2) {
      var c2 = b2;
      if (!Cg(a2, b2)) {
        if (Dg(a2))
          throw Error(p$4(418));
        b2 = Lf(c2.nextSibling);
        var d2 = xg;
        b2 && Cg(a2, b2) ? Ag(d2, c2) : (a2.flags = a2.flags & -4097 | 2, I$2 = false, xg = a2);
      }
    } else {
      if (Dg(a2))
        throw Error(p$4(418));
      a2.flags = a2.flags & -4097 | 2;
      I$2 = false;
      xg = a2;
    }
  }
}
function Fg(a2) {
  for (a2 = a2.return; null !== a2 && 5 !== a2.tag && 3 !== a2.tag && 13 !== a2.tag; )
    a2 = a2.return;
  xg = a2;
}
function Gg(a2) {
  if (a2 !== xg)
    return false;
  if (!I$2)
    return Fg(a2), I$2 = true, false;
  var b2;
  (b2 = 3 !== a2.tag) && !(b2 = 5 !== a2.tag) && (b2 = a2.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a2.type, a2.memoizedProps));
  if (b2 && (b2 = yg)) {
    if (Dg(a2))
      throw Hg(), Error(p$4(418));
    for (; b2; )
      Ag(a2, b2), b2 = Lf(b2.nextSibling);
  }
  Fg(a2);
  if (13 === a2.tag) {
    a2 = a2.memoizedState;
    a2 = null !== a2 ? a2.dehydrated : null;
    if (!a2)
      throw Error(p$4(317));
    a: {
      a2 = a2.nextSibling;
      for (b2 = 0; a2; ) {
        if (8 === a2.nodeType) {
          var c2 = a2.data;
          if ("/$" === c2) {
            if (0 === b2) {
              yg = Lf(a2.nextSibling);
              break a;
            }
            b2--;
          } else
            "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
        }
        a2 = a2.nextSibling;
      }
      yg = null;
    }
  } else
    yg = xg ? Lf(a2.stateNode.nextSibling) : null;
  return true;
}
function Hg() {
  for (var a2 = yg; a2; )
    a2 = Lf(a2.nextSibling);
}
function Ig() {
  yg = xg = null;
  I$2 = false;
}
function Jg(a2) {
  null === zg ? zg = [a2] : zg.push(a2);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a2, b2) {
  if (a2 && a2.defaultProps) {
    b2 = A$2({}, b2);
    a2 = a2.defaultProps;
    for (var c2 in a2)
      void 0 === b2[c2] && (b2[c2] = a2[c2]);
    return b2;
  }
  return b2;
}
var Mg = Uf(null), Ng = null, Og = null, Pg = null;
function Qg() {
  Pg = Og = Ng = null;
}
function Rg(a2) {
  var b2 = Mg.current;
  E$4(Mg);
  a2._currentValue = b2;
}
function Sg(a2, b2, c2) {
  for (; null !== a2; ) {
    var d2 = a2.alternate;
    (a2.childLanes & b2) !== b2 ? (a2.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
    if (a2 === c2)
      break;
    a2 = a2.return;
  }
}
function Tg(a2, b2) {
  Ng = a2;
  Pg = Og = null;
  a2 = a2.dependencies;
  null !== a2 && null !== a2.firstContext && (0 !== (a2.lanes & b2) && (Ug = true), a2.firstContext = null);
}
function Vg(a2) {
  var b2 = a2._currentValue;
  if (Pg !== a2)
    if (a2 = { context: a2, memoizedValue: b2, next: null }, null === Og) {
      if (null === Ng)
        throw Error(p$4(308));
      Og = a2;
      Ng.dependencies = { lanes: 0, firstContext: a2 };
    } else
      Og = Og.next = a2;
  return b2;
}
var Wg = null;
function Xg(a2) {
  null === Wg ? Wg = [a2] : Wg.push(a2);
}
function Yg(a2, b2, c2, d2) {
  var e2 = b2.interleaved;
  null === e2 ? (c2.next = c2, Xg(b2)) : (c2.next = e2.next, e2.next = c2);
  b2.interleaved = c2;
  return Zg(a2, d2);
}
function Zg(a2, b2) {
  a2.lanes |= b2;
  var c2 = a2.alternate;
  null !== c2 && (c2.lanes |= b2);
  c2 = a2;
  for (a2 = a2.return; null !== a2; )
    a2.childLanes |= b2, c2 = a2.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a2, a2 = a2.return;
  return 3 === c2.tag ? c2.stateNode : null;
}
var $g = false;
function ah(a2) {
  a2.updateQueue = { baseState: a2.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function bh(a2, b2) {
  a2 = a2.updateQueue;
  b2.updateQueue === a2 && (b2.updateQueue = { baseState: a2.baseState, firstBaseUpdate: a2.firstBaseUpdate, lastBaseUpdate: a2.lastBaseUpdate, shared: a2.shared, effects: a2.effects });
}
function ch(a2, b2) {
  return { eventTime: a2, lane: b2, tag: 0, payload: null, callback: null, next: null };
}
function dh(a2, b2, c2) {
  var d2 = a2.updateQueue;
  if (null === d2)
    return null;
  d2 = d2.shared;
  if (0 !== (K$3 & 2)) {
    var e2 = d2.pending;
    null === e2 ? b2.next = b2 : (b2.next = e2.next, e2.next = b2);
    d2.pending = b2;
    return Zg(a2, c2);
  }
  e2 = d2.interleaved;
  null === e2 ? (b2.next = b2, Xg(d2)) : (b2.next = e2.next, e2.next = b2);
  d2.interleaved = b2;
  return Zg(a2, c2);
}
function eh(a2, b2, c2) {
  b2 = b2.updateQueue;
  if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
    var d2 = b2.lanes;
    d2 &= a2.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a2, c2);
  }
}
function fh(a2, b2) {
  var c2 = a2.updateQueue, d2 = a2.alternate;
  if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
    var e2 = null, f2 = null;
    c2 = c2.firstBaseUpdate;
    if (null !== c2) {
      do {
        var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
        null === f2 ? e2 = f2 = g2 : f2 = f2.next = g2;
        c2 = c2.next;
      } while (null !== c2);
      null === f2 ? e2 = f2 = b2 : f2 = f2.next = b2;
    } else
      e2 = f2 = b2;
    c2 = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
    a2.updateQueue = c2;
    return;
  }
  a2 = c2.lastBaseUpdate;
  null === a2 ? c2.firstBaseUpdate = b2 : a2.next = b2;
  c2.lastBaseUpdate = b2;
}
function gh(a2, b2, c2, d2) {
  var e2 = a2.updateQueue;
  $g = false;
  var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h2 = e2.shared.pending;
  if (null !== h2) {
    e2.shared.pending = null;
    var k2 = h2, l2 = k2.next;
    k2.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k2;
    var m2 = a2.alternate;
    null !== m2 && (m2 = m2.updateQueue, h2 = m2.lastBaseUpdate, h2 !== g2 && (null === h2 ? m2.firstBaseUpdate = l2 : h2.next = l2, m2.lastBaseUpdate = k2));
  }
  if (null !== f2) {
    var q2 = e2.baseState;
    g2 = 0;
    m2 = l2 = k2 = null;
    h2 = f2;
    do {
      var r2 = h2.lane, y2 = h2.eventTime;
      if ((d2 & r2) === r2) {
        null !== m2 && (m2 = m2.next = {
          eventTime: y2,
          lane: 0,
          tag: h2.tag,
          payload: h2.payload,
          callback: h2.callback,
          next: null
        });
        a: {
          var n9 = a2, t2 = h2;
          r2 = b2;
          y2 = c2;
          switch (t2.tag) {
            case 1:
              n9 = t2.payload;
              if ("function" === typeof n9) {
                q2 = n9.call(y2, q2, r2);
                break a;
              }
              q2 = n9;
              break a;
            case 3:
              n9.flags = n9.flags & -65537 | 128;
            case 0:
              n9 = t2.payload;
              r2 = "function" === typeof n9 ? n9.call(y2, q2, r2) : n9;
              if (null === r2 || void 0 === r2)
                break a;
              q2 = A$2({}, q2, r2);
              break a;
            case 2:
              $g = true;
          }
        }
        null !== h2.callback && 0 !== h2.lane && (a2.flags |= 64, r2 = e2.effects, null === r2 ? e2.effects = [h2] : r2.push(h2));
      } else
        y2 = { eventTime: y2, lane: r2, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
      h2 = h2.next;
      if (null === h2)
        if (h2 = e2.shared.pending, null === h2)
          break;
        else
          r2 = h2, h2 = r2.next, r2.next = null, e2.lastBaseUpdate = r2, e2.shared.pending = null;
    } while (1);
    null === m2 && (k2 = q2);
    e2.baseState = k2;
    e2.firstBaseUpdate = l2;
    e2.lastBaseUpdate = m2;
    b2 = e2.shared.interleaved;
    if (null !== b2) {
      e2 = b2;
      do
        g2 |= e2.lane, e2 = e2.next;
      while (e2 !== b2);
    } else
      null === f2 && (e2.shared.lanes = 0);
    hh |= g2;
    a2.lanes = g2;
    a2.memoizedState = q2;
  }
}
function ih(a2, b2, c2) {
  a2 = b2.effects;
  b2.effects = null;
  if (null !== a2)
    for (b2 = 0; b2 < a2.length; b2++) {
      var d2 = a2[b2], e2 = d2.callback;
      if (null !== e2) {
        d2.callback = null;
        d2 = c2;
        if ("function" !== typeof e2)
          throw Error(p$4(191, e2));
        e2.call(d2);
      }
    }
}
var jh = new aa.Component().refs;
function kh(a2, b2, c2, d2) {
  b2 = a2.memoizedState;
  c2 = c2(d2, b2);
  c2 = null === c2 || void 0 === c2 ? b2 : A$2({}, b2, c2);
  a2.memoizedState = c2;
  0 === a2.lanes && (a2.updateQueue.baseState = c2);
}
var nh = { isMounted: function(a2) {
  return (a2 = a2._reactInternals) ? Vb(a2) === a2 : false;
}, enqueueSetState: function(a2, b2, c2) {
  a2 = a2._reactInternals;
  var d2 = L$3(), e2 = lh(a2), f2 = ch(d2, e2);
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = dh(a2, f2, e2);
  null !== b2 && (mh(b2, a2, e2, d2), eh(b2, a2, e2));
}, enqueueReplaceState: function(a2, b2, c2) {
  a2 = a2._reactInternals;
  var d2 = L$3(), e2 = lh(a2), f2 = ch(d2, e2);
  f2.tag = 1;
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = dh(a2, f2, e2);
  null !== b2 && (mh(b2, a2, e2, d2), eh(b2, a2, e2));
}, enqueueForceUpdate: function(a2, b2) {
  a2 = a2._reactInternals;
  var c2 = L$3(), d2 = lh(a2), e2 = ch(c2, d2);
  e2.tag = 2;
  void 0 !== b2 && null !== b2 && (e2.callback = b2);
  b2 = dh(a2, e2, d2);
  null !== b2 && (mh(b2, a2, d2, c2), eh(b2, a2, d2));
} };
function oh(a2, b2, c2, d2, e2, f2, g2) {
  a2 = a2.stateNode;
  return "function" === typeof a2.shouldComponentUpdate ? a2.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie$2(c2, d2) || !Ie$2(e2, f2) : true;
}
function ph(a2, b2, c2) {
  var d2 = false, e2 = Vf;
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e2 = Zf(b2) ? Xf : H$3.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a2, e2) : Vf);
  b2 = new b2(c2, f2);
  a2.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
  b2.updater = nh;
  a2.stateNode = b2;
  b2._reactInternals = a2;
  d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = e2, a2.__reactInternalMemoizedMaskedChildContext = f2);
  return b2;
}
function qh(a2, b2, c2, d2) {
  a2 = b2.state;
  "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
  "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
  b2.state !== a2 && nh.enqueueReplaceState(b2, b2.state, null);
}
function rh(a2, b2, c2, d2) {
  var e2 = a2.stateNode;
  e2.props = c2;
  e2.state = a2.memoizedState;
  e2.refs = jh;
  ah(a2);
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? e2.context = Vg(f2) : (f2 = Zf(b2) ? Xf : H$3.current, e2.context = Yf(a2, f2));
  e2.state = a2.memoizedState;
  f2 = b2.getDerivedStateFromProps;
  "function" === typeof f2 && (kh(a2, b2, f2, c2), e2.state = a2.memoizedState);
  "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b2 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b2 !== e2.state && nh.enqueueReplaceState(e2, e2.state, null), gh(a2, c2, e2, d2), e2.state = a2.memoizedState);
  "function" === typeof e2.componentDidMount && (a2.flags |= 4194308);
}
function sh(a2, b2, c2) {
  a2 = c2.ref;
  if (null !== a2 && "function" !== typeof a2 && "object" !== typeof a2) {
    if (c2._owner) {
      c2 = c2._owner;
      if (c2) {
        if (1 !== c2.tag)
          throw Error(p$4(309));
        var d2 = c2.stateNode;
      }
      if (!d2)
        throw Error(p$4(147, a2));
      var e2 = d2, f2 = "" + a2;
      if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
        return b2.ref;
      b2 = function(a3) {
        var b3 = e2.refs;
        b3 === jh && (b3 = e2.refs = {});
        null === a3 ? delete b3[f2] : b3[f2] = a3;
      };
      b2._stringRef = f2;
      return b2;
    }
    if ("string" !== typeof a2)
      throw Error(p$4(284));
    if (!c2._owner)
      throw Error(p$4(290, a2));
  }
  return a2;
}
function th(a2, b2) {
  a2 = Object.prototype.toString.call(b2);
  throw Error(p$4(31, "[object Object]" === a2 ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a2));
}
function uh(a2) {
  var b2 = a2._init;
  return b2(a2._payload);
}
function vh(a2) {
  function b2(b3, c3) {
    if (a2) {
      var d3 = b3.deletions;
      null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
    }
  }
  function c2(c3, d3) {
    if (!a2)
      return null;
    for (; null !== d3; )
      b2(c3, d3), d3 = d3.sibling;
    return null;
  }
  function d2(a3, b3) {
    for (a3 = /* @__PURE__ */ new Map(); null !== b3; )
      null !== b3.key ? a3.set(b3.key, b3) : a3.set(b3.index, b3), b3 = b3.sibling;
    return a3;
  }
  function e2(a3, b3) {
    a3 = wh(a3, b3);
    a3.index = 0;
    a3.sibling = null;
    return a3;
  }
  function f2(b3, c3, d3) {
    b3.index = d3;
    if (!a2)
      return b3.flags |= 1048576, c3;
    d3 = b3.alternate;
    if (null !== d3)
      return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
    b3.flags |= 2;
    return c3;
  }
  function g2(b3) {
    a2 && null === b3.alternate && (b3.flags |= 2);
    return b3;
  }
  function h2(a3, b3, c3, d3) {
    if (null === b3 || 6 !== b3.tag)
      return b3 = xh(c3, a3.mode, d3), b3.return = a3, b3;
    b3 = e2(b3, c3);
    b3.return = a3;
    return b3;
  }
  function k2(a3, b3, c3, d3) {
    var f3 = c3.type;
    if (f3 === ya)
      return m2(a3, b3, c3.props.children, d3, c3.key);
    if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b3.type))
      return d3 = e2(b3, c3.props), d3.ref = sh(a3, b3, c3), d3.return = a3, d3;
    d3 = yh(c3.type, c3.key, c3.props, null, a3.mode, d3);
    d3.ref = sh(a3, b3, c3);
    d3.return = a3;
    return d3;
  }
  function l2(a3, b3, c3, d3) {
    if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
      return b3 = zh(c3, a3.mode, d3), b3.return = a3, b3;
    b3 = e2(b3, c3.children || []);
    b3.return = a3;
    return b3;
  }
  function m2(a3, b3, c3, d3, f3) {
    if (null === b3 || 7 !== b3.tag)
      return b3 = Ah(c3, a3.mode, d3, f3), b3.return = a3, b3;
    b3 = e2(b3, c3);
    b3.return = a3;
    return b3;
  }
  function q2(a3, b3, c3) {
    if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
      return b3 = xh("" + b3, a3.mode, c3), b3.return = a3, b3;
    if ("object" === typeof b3 && null !== b3) {
      switch (b3.$$typeof) {
        case va:
          return c3 = yh(b3.type, b3.key, b3.props, null, a3.mode, c3), c3.ref = sh(a3, null, b3), c3.return = a3, c3;
        case wa:
          return b3 = zh(b3, a3.mode, c3), b3.return = a3, b3;
        case Ha:
          var d3 = b3._init;
          return q2(a3, d3(b3._payload), c3);
      }
      if (eb(b3) || Ka(b3))
        return b3 = Ah(b3, a3.mode, c3, null), b3.return = a3, b3;
      th(a3, b3);
    }
    return null;
  }
  function r2(a3, b3, c3, d3) {
    var e3 = null !== b3 ? b3.key : null;
    if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3)
      return null !== e3 ? null : h2(a3, b3, "" + c3, d3);
    if ("object" === typeof c3 && null !== c3) {
      switch (c3.$$typeof) {
        case va:
          return c3.key === e3 ? k2(a3, b3, c3, d3) : null;
        case wa:
          return c3.key === e3 ? l2(a3, b3, c3, d3) : null;
        case Ha:
          return e3 = c3._init, r2(
            a3,
            b3,
            e3(c3._payload),
            d3
          );
      }
      if (eb(c3) || Ka(c3))
        return null !== e3 ? null : m2(a3, b3, c3, d3, null);
      th(a3, c3);
    }
    return null;
  }
  function y2(a3, b3, c3, d3, e3) {
    if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
      return a3 = a3.get(c3) || null, h2(b3, a3, "" + d3, e3);
    if ("object" === typeof d3 && null !== d3) {
      switch (d3.$$typeof) {
        case va:
          return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a3, d3, e3);
        case wa:
          return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a3, d3, e3);
        case Ha:
          var f3 = d3._init;
          return y2(a3, b3, c3, f3(d3._payload), e3);
      }
      if (eb(d3) || Ka(d3))
        return a3 = a3.get(c3) || null, m2(b3, a3, d3, e3, null);
      th(b3, d3);
    }
    return null;
  }
  function n9(e3, g3, h3, k3) {
    for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h3.length; w2++) {
      u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
      var n10 = r2(e3, u2, h3[w2], k3);
      if (null === n10) {
        null === u2 && (u2 = x2);
        break;
      }
      a2 && u2 && null === n10.alternate && b2(e3, u2);
      g3 = f2(n10, g3, w2);
      null === m3 ? l3 = n10 : m3.sibling = n10;
      m3 = n10;
      u2 = x2;
    }
    if (w2 === h3.length)
      return c2(e3, u2), I$2 && tg(e3, w2), l3;
    if (null === u2) {
      for (; w2 < h3.length; w2++)
        u2 = q2(e3, h3[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
      I$2 && tg(e3, w2);
      return l3;
    }
    for (u2 = d2(e3, u2); w2 < h3.length; w2++)
      x2 = y2(u2, e3, w2, h3[w2], k3), null !== x2 && (a2 && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
    a2 && u2.forEach(function(a3) {
      return b2(e3, a3);
    });
    I$2 && tg(e3, w2);
    return l3;
  }
  function t2(e3, g3, h3, k3) {
    var l3 = Ka(h3);
    if ("function" !== typeof l3)
      throw Error(p$4(150));
    h3 = l3.call(h3);
    if (null == h3)
      throw Error(p$4(151));
    for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n10 = h3.next(); null !== m3 && !n10.done; w2++, n10 = h3.next()) {
      m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
      var t3 = r2(e3, m3, n10.value, k3);
      if (null === t3) {
        null === m3 && (m3 = x2);
        break;
      }
      a2 && m3 && null === t3.alternate && b2(e3, m3);
      g3 = f2(t3, g3, w2);
      null === u2 ? l3 = t3 : u2.sibling = t3;
      u2 = t3;
      m3 = x2;
    }
    if (n10.done)
      return c2(
        e3,
        m3
      ), I$2 && tg(e3, w2), l3;
    if (null === m3) {
      for (; !n10.done; w2++, n10 = h3.next())
        n10 = q2(e3, n10.value, k3), null !== n10 && (g3 = f2(n10, g3, w2), null === u2 ? l3 = n10 : u2.sibling = n10, u2 = n10);
      I$2 && tg(e3, w2);
      return l3;
    }
    for (m3 = d2(e3, m3); !n10.done; w2++, n10 = h3.next())
      n10 = y2(m3, e3, w2, n10.value, k3), null !== n10 && (a2 && null !== n10.alternate && m3.delete(null === n10.key ? w2 : n10.key), g3 = f2(n10, g3, w2), null === u2 ? l3 = n10 : u2.sibling = n10, u2 = n10);
    a2 && m3.forEach(function(a3) {
      return b2(e3, a3);
    });
    I$2 && tg(e3, w2);
    return l3;
  }
  function J2(a3, d3, f3, h3) {
    "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
    if ("object" === typeof f3 && null !== f3) {
      switch (f3.$$typeof) {
        case va:
          a: {
            for (var k3 = f3.key, l3 = d3; null !== l3; ) {
              if (l3.key === k3) {
                k3 = f3.type;
                if (k3 === ya) {
                  if (7 === l3.tag) {
                    c2(a3, l3.sibling);
                    d3 = e2(l3, f3.props.children);
                    d3.return = a3;
                    a3 = d3;
                    break a;
                  }
                } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                  c2(a3, l3.sibling);
                  d3 = e2(l3, f3.props);
                  d3.ref = sh(a3, l3, f3);
                  d3.return = a3;
                  a3 = d3;
                  break a;
                }
                c2(a3, l3);
                break;
              } else
                b2(a3, l3);
              l3 = l3.sibling;
            }
            f3.type === ya ? (d3 = Ah(f3.props.children, a3.mode, h3, f3.key), d3.return = a3, a3 = d3) : (h3 = yh(f3.type, f3.key, f3.props, null, a3.mode, h3), h3.ref = sh(a3, d3, f3), h3.return = a3, a3 = h3);
          }
          return g2(a3);
        case wa:
          a: {
            for (l3 = f3.key; null !== d3; ) {
              if (d3.key === l3)
                if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                  c2(a3, d3.sibling);
                  d3 = e2(d3, f3.children || []);
                  d3.return = a3;
                  a3 = d3;
                  break a;
                } else {
                  c2(a3, d3);
                  break;
                }
              else
                b2(a3, d3);
              d3 = d3.sibling;
            }
            d3 = zh(f3, a3.mode, h3);
            d3.return = a3;
            a3 = d3;
          }
          return g2(a3);
        case Ha:
          return l3 = f3._init, J2(a3, d3, l3(f3._payload), h3);
      }
      if (eb(f3))
        return n9(a3, d3, f3, h3);
      if (Ka(f3))
        return t2(a3, d3, f3, h3);
      th(a3, f3);
    }
    return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a3, d3.sibling), d3 = e2(d3, f3), d3.return = a3, a3 = d3) : (c2(a3, d3), d3 = xh(f3, a3.mode, h3), d3.return = a3, a3 = d3), g2(a3)) : c2(a3, d3);
  }
  return J2;
}
var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
function Hh(a2) {
  if (a2 === Dh)
    throw Error(p$4(174));
  return a2;
}
function Ih(a2, b2) {
  G$2(Gh, b2);
  G$2(Fh, a2);
  G$2(Eh, Dh);
  a2 = b2.nodeType;
  switch (a2) {
    case 9:
    case 11:
      b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
      break;
    default:
      a2 = 8 === a2 ? b2.parentNode : b2, b2 = a2.namespaceURI || null, a2 = a2.tagName, b2 = lb(b2, a2);
  }
  E$4(Eh);
  G$2(Eh, b2);
}
function Jh() {
  E$4(Eh);
  E$4(Fh);
  E$4(Gh);
}
function Kh(a2) {
  Hh(Gh.current);
  var b2 = Hh(Eh.current);
  var c2 = lb(b2, a2.type);
  b2 !== c2 && (G$2(Fh, a2), G$2(Eh, c2));
}
function Lh(a2) {
  Fh.current === a2 && (E$4(Eh), E$4(Fh));
}
var M$2 = Uf(0);
function Mh(a2) {
  for (var b2 = a2; null !== b2; ) {
    if (13 === b2.tag) {
      var c2 = b2.memoizedState;
      if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
        return b2;
    } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
      if (0 !== (b2.flags & 128))
        return b2;
    } else if (null !== b2.child) {
      b2.child.return = b2;
      b2 = b2.child;
      continue;
    }
    if (b2 === a2)
      break;
    for (; null === b2.sibling; ) {
      if (null === b2.return || b2.return === a2)
        return null;
      b2 = b2.return;
    }
    b2.sibling.return = b2.return;
    b2 = b2.sibling;
  }
  return null;
}
var Nh = [];
function Oh() {
  for (var a2 = 0; a2 < Nh.length; a2++)
    Nh[a2]._workInProgressVersionPrimary = null;
  Nh.length = 0;
}
var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N$4 = null, O$3 = null, P$3 = null, Sh = false, Th = false, Uh = 0, Vh = 0;
function Q$3() {
  throw Error(p$4(321));
}
function Wh(a2, b2) {
  if (null === b2)
    return false;
  for (var c2 = 0; c2 < b2.length && c2 < a2.length; c2++)
    if (!He$2(a2[c2], b2[c2]))
      return false;
  return true;
}
function Xh(a2, b2, c2, d2, e2, f2) {
  Rh = f2;
  N$4 = b2;
  b2.memoizedState = null;
  b2.updateQueue = null;
  b2.lanes = 0;
  Ph.current = null === a2 || null === a2.memoizedState ? Yh : Zh;
  a2 = c2(d2, e2);
  if (Th) {
    f2 = 0;
    do {
      Th = false;
      Uh = 0;
      if (25 <= f2)
        throw Error(p$4(301));
      f2 += 1;
      P$3 = O$3 = null;
      b2.updateQueue = null;
      Ph.current = $h;
      a2 = c2(d2, e2);
    } while (Th);
  }
  Ph.current = ai$1;
  b2 = null !== O$3 && null !== O$3.next;
  Rh = 0;
  P$3 = O$3 = N$4 = null;
  Sh = false;
  if (b2)
    throw Error(p$4(300));
  return a2;
}
function bi$1() {
  var a2 = 0 !== Uh;
  Uh = 0;
  return a2;
}
function ci$1() {
  var a2 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === P$3 ? N$4.memoizedState = P$3 = a2 : P$3 = P$3.next = a2;
  return P$3;
}
function di$1() {
  if (null === O$3) {
    var a2 = N$4.alternate;
    a2 = null !== a2 ? a2.memoizedState : null;
  } else
    a2 = O$3.next;
  var b2 = null === P$3 ? N$4.memoizedState : P$3.next;
  if (null !== b2)
    P$3 = b2, O$3 = a2;
  else {
    if (null === a2)
      throw Error(p$4(310));
    O$3 = a2;
    a2 = { memoizedState: O$3.memoizedState, baseState: O$3.baseState, baseQueue: O$3.baseQueue, queue: O$3.queue, next: null };
    null === P$3 ? N$4.memoizedState = P$3 = a2 : P$3 = P$3.next = a2;
  }
  return P$3;
}
function ei$1(a2, b2) {
  return "function" === typeof b2 ? b2(a2) : b2;
}
function fi$1(a2) {
  var b2 = di$1(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$4(311));
  c2.lastRenderedReducer = a2;
  var d2 = O$3, e2 = d2.baseQueue, f2 = c2.pending;
  if (null !== f2) {
    if (null !== e2) {
      var g2 = e2.next;
      e2.next = f2.next;
      f2.next = g2;
    }
    d2.baseQueue = e2 = f2;
    c2.pending = null;
  }
  if (null !== e2) {
    f2 = e2.next;
    d2 = d2.baseState;
    var h2 = g2 = null, k2 = null, l2 = f2;
    do {
      var m2 = l2.lane;
      if ((Rh & m2) === m2)
        null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a2(d2, l2.action);
      else {
        var q2 = {
          lane: m2,
          action: l2.action,
          hasEagerState: l2.hasEagerState,
          eagerState: l2.eagerState,
          next: null
        };
        null === k2 ? (h2 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
        N$4.lanes |= m2;
        hh |= m2;
      }
      l2 = l2.next;
    } while (null !== l2 && l2 !== f2);
    null === k2 ? g2 = d2 : k2.next = h2;
    He$2(d2, b2.memoizedState) || (Ug = true);
    b2.memoizedState = d2;
    b2.baseState = g2;
    b2.baseQueue = k2;
    c2.lastRenderedState = d2;
  }
  a2 = c2.interleaved;
  if (null !== a2) {
    e2 = a2;
    do
      f2 = e2.lane, N$4.lanes |= f2, hh |= f2, e2 = e2.next;
    while (e2 !== a2);
  } else
    null === e2 && (c2.lanes = 0);
  return [b2.memoizedState, c2.dispatch];
}
function gi(a2) {
  var b2 = di$1(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$4(311));
  c2.lastRenderedReducer = a2;
  var d2 = c2.dispatch, e2 = c2.pending, f2 = b2.memoizedState;
  if (null !== e2) {
    c2.pending = null;
    var g2 = e2 = e2.next;
    do
      f2 = a2(f2, g2.action), g2 = g2.next;
    while (g2 !== e2);
    He$2(f2, b2.memoizedState) || (Ug = true);
    b2.memoizedState = f2;
    null === b2.baseQueue && (b2.baseState = f2);
    c2.lastRenderedState = f2;
  }
  return [f2, d2];
}
function hi() {
}
function ii$1(a2, b2) {
  var c2 = N$4, d2 = di$1(), e2 = b2(), f2 = !He$2(d2.memoizedState, e2);
  f2 && (d2.memoizedState = e2, Ug = true);
  d2 = d2.queue;
  ji$1(ki$1.bind(null, c2, d2, a2), [a2]);
  if (d2.getSnapshot !== b2 || f2 || null !== P$3 && P$3.memoizedState.tag & 1) {
    c2.flags |= 2048;
    li$1(9, mi$1.bind(null, c2, d2, e2, b2), void 0, null);
    if (null === R$3)
      throw Error(p$4(349));
    0 !== (Rh & 30) || ni$1(c2, b2, e2);
  }
  return e2;
}
function ni$1(a2, b2, c2) {
  a2.flags |= 16384;
  a2 = { getSnapshot: b2, value: c2 };
  b2 = N$4.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, N$4.updateQueue = b2, b2.stores = [a2]) : (c2 = b2.stores, null === c2 ? b2.stores = [a2] : c2.push(a2));
}
function mi$1(a2, b2, c2, d2) {
  b2.value = c2;
  b2.getSnapshot = d2;
  oi$1(b2) && pi(a2);
}
function ki$1(a2, b2, c2) {
  return c2(function() {
    oi$1(b2) && pi(a2);
  });
}
function oi$1(a2) {
  var b2 = a2.getSnapshot;
  a2 = a2.value;
  try {
    var c2 = b2();
    return !He$2(a2, c2);
  } catch (d2) {
    return true;
  }
}
function pi(a2) {
  var b2 = Zg(a2, 1);
  null !== b2 && mh(b2, a2, 1, -1);
}
function qi$1(a2) {
  var b2 = ci$1();
  "function" === typeof a2 && (a2 = a2());
  b2.memoizedState = b2.baseState = a2;
  a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei$1, lastRenderedState: a2 };
  b2.queue = a2;
  a2 = a2.dispatch = ri$1.bind(null, N$4, a2);
  return [b2.memoizedState, a2];
}
function li$1(a2, b2, c2, d2) {
  a2 = { tag: a2, create: b2, destroy: c2, deps: d2, next: null };
  b2 = N$4.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, N$4.updateQueue = b2, b2.lastEffect = a2.next = a2) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a2.next = a2 : (d2 = c2.next, c2.next = a2, a2.next = d2, b2.lastEffect = a2));
  return a2;
}
function si$1() {
  return di$1().memoizedState;
}
function ti$1(a2, b2, c2, d2) {
  var e2 = ci$1();
  N$4.flags |= a2;
  e2.memoizedState = li$1(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
}
function ui$1(a2, b2, c2, d2) {
  var e2 = di$1();
  d2 = void 0 === d2 ? null : d2;
  var f2 = void 0;
  if (null !== O$3) {
    var g2 = O$3.memoizedState;
    f2 = g2.destroy;
    if (null !== d2 && Wh(d2, g2.deps)) {
      e2.memoizedState = li$1(b2, c2, f2, d2);
      return;
    }
  }
  N$4.flags |= a2;
  e2.memoizedState = li$1(1 | b2, c2, f2, d2);
}
function vi(a2, b2) {
  return ti$1(8390656, 8, a2, b2);
}
function ji$1(a2, b2) {
  return ui$1(2048, 8, a2, b2);
}
function wi(a2, b2) {
  return ui$1(4, 2, a2, b2);
}
function xi$1(a2, b2) {
  return ui$1(4, 4, a2, b2);
}
function yi$1(a2, b2) {
  if ("function" === typeof b2)
    return a2 = a2(), b2(a2), function() {
      b2(null);
    };
  if (null !== b2 && void 0 !== b2)
    return a2 = a2(), b2.current = a2, function() {
      b2.current = null;
    };
}
function zi(a2, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
  return ui$1(4, 4, yi$1.bind(null, b2, a2), c2);
}
function Ai$1() {
}
function Bi$1(a2, b2) {
  var c2 = di$1();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
    return d2[0];
  c2.memoizedState = [a2, b2];
  return a2;
}
function Ci$1(a2, b2) {
  var c2 = di$1();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
    return d2[0];
  a2 = a2();
  c2.memoizedState = [a2, b2];
  return a2;
}
function Di$1(a2, b2, c2) {
  if (0 === (Rh & 21))
    return a2.baseState && (a2.baseState = false, Ug = true), a2.memoizedState = c2;
  He$2(c2, b2) || (c2 = yc(), N$4.lanes |= c2, hh |= c2, a2.baseState = true);
  return b2;
}
function Ei$1(a2, b2) {
  var c2 = C$3;
  C$3 = 0 !== c2 && 4 > c2 ? c2 : 4;
  a2(true);
  var d2 = Qh.transition;
  Qh.transition = {};
  try {
    a2(false), b2();
  } finally {
    C$3 = c2, Qh.transition = d2;
  }
}
function Fi$1() {
  return di$1().memoizedState;
}
function Gi$1(a2, b2, c2) {
  var d2 = lh(a2);
  c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (Hi$1(a2))
    Ii$1(b2, c2);
  else if (c2 = Yg(a2, b2, c2, d2), null !== c2) {
    var e2 = L$3();
    mh(c2, a2, d2, e2);
    Ji$1(c2, b2, d2);
  }
}
function ri$1(a2, b2, c2) {
  var d2 = lh(a2), e2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (Hi$1(a2))
    Ii$1(b2, e2);
  else {
    var f2 = a2.alternate;
    if (0 === a2.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
      try {
        var g2 = b2.lastRenderedState, h2 = f2(g2, c2);
        e2.hasEagerState = true;
        e2.eagerState = h2;
        if (He$2(h2, g2)) {
          var k2 = b2.interleaved;
          null === k2 ? (e2.next = e2, Xg(b2)) : (e2.next = k2.next, k2.next = e2);
          b2.interleaved = e2;
          return;
        }
      } catch (l2) {
      } finally {
      }
    c2 = Yg(a2, b2, e2, d2);
    null !== c2 && (e2 = L$3(), mh(c2, a2, d2, e2), Ji$1(c2, b2, d2));
  }
}
function Hi$1(a2) {
  var b2 = a2.alternate;
  return a2 === N$4 || null !== b2 && b2 === N$4;
}
function Ii$1(a2, b2) {
  Th = Sh = true;
  var c2 = a2.pending;
  null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
  a2.pending = b2;
}
function Ji$1(a2, b2, c2) {
  if (0 !== (c2 & 4194240)) {
    var d2 = b2.lanes;
    d2 &= a2.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a2, c2);
  }
}
var ai$1 = { readContext: Vg, useCallback: Q$3, useContext: Q$3, useEffect: Q$3, useImperativeHandle: Q$3, useInsertionEffect: Q$3, useLayoutEffect: Q$3, useMemo: Q$3, useReducer: Q$3, useRef: Q$3, useState: Q$3, useDebugValue: Q$3, useDeferredValue: Q$3, useTransition: Q$3, useMutableSource: Q$3, useSyncExternalStore: Q$3, useId: Q$3, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a2, b2) {
  ci$1().memoizedState = [a2, void 0 === b2 ? null : b2];
  return a2;
}, useContext: Vg, useEffect: vi, useImperativeHandle: function(a2, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
  return ti$1(
    4194308,
    4,
    yi$1.bind(null, b2, a2),
    c2
  );
}, useLayoutEffect: function(a2, b2) {
  return ti$1(4194308, 4, a2, b2);
}, useInsertionEffect: function(a2, b2) {
  return ti$1(4, 2, a2, b2);
}, useMemo: function(a2, b2) {
  var c2 = ci$1();
  b2 = void 0 === b2 ? null : b2;
  a2 = a2();
  c2.memoizedState = [a2, b2];
  return a2;
}, useReducer: function(a2, b2, c2) {
  var d2 = ci$1();
  b2 = void 0 !== c2 ? c2(b2) : b2;
  d2.memoizedState = d2.baseState = b2;
  a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b2 };
  d2.queue = a2;
  a2 = a2.dispatch = Gi$1.bind(null, N$4, a2);
  return [d2.memoizedState, a2];
}, useRef: function(a2) {
  var b2 = ci$1();
  a2 = { current: a2 };
  return b2.memoizedState = a2;
}, useState: qi$1, useDebugValue: Ai$1, useDeferredValue: function(a2) {
  return ci$1().memoizedState = a2;
}, useTransition: function() {
  var a2 = qi$1(false), b2 = a2[0];
  a2 = Ei$1.bind(null, a2[1]);
  ci$1().memoizedState = a2;
  return [b2, a2];
}, useMutableSource: function() {
}, useSyncExternalStore: function(a2, b2, c2) {
  var d2 = N$4, e2 = ci$1();
  if (I$2) {
    if (void 0 === c2)
      throw Error(p$4(407));
    c2 = c2();
  } else {
    c2 = b2();
    if (null === R$3)
      throw Error(p$4(349));
    0 !== (Rh & 30) || ni$1(d2, b2, c2);
  }
  e2.memoizedState = c2;
  var f2 = { value: c2, getSnapshot: b2 };
  e2.queue = f2;
  vi(ki$1.bind(
    null,
    d2,
    f2,
    a2
  ), [a2]);
  d2.flags |= 2048;
  li$1(9, mi$1.bind(null, d2, f2, c2, b2), void 0, null);
  return c2;
}, useId: function() {
  var a2 = ci$1(), b2 = R$3.identifierPrefix;
  if (I$2) {
    var c2 = sg;
    var d2 = rg;
    c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
    b2 = ":" + b2 + "R" + c2;
    c2 = Uh++;
    0 < c2 && (b2 += "H" + c2.toString(32));
    b2 += ":";
  } else
    c2 = Vh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
  return a2.memoizedState = b2;
}, unstable_isNewReconciler: false }, Zh = {
  readContext: Vg,
  useCallback: Bi$1,
  useContext: Vg,
  useEffect: ji$1,
  useImperativeHandle: zi,
  useInsertionEffect: wi,
  useLayoutEffect: xi$1,
  useMemo: Ci$1,
  useReducer: fi$1,
  useRef: si$1,
  useState: function() {
    return fi$1(ei$1);
  },
  useDebugValue: Ai$1,
  useDeferredValue: function(a2) {
    var b2 = di$1();
    return Di$1(b2, O$3.memoizedState, a2);
  },
  useTransition: function() {
    var a2 = fi$1(ei$1)[0], b2 = di$1().memoizedState;
    return [a2, b2];
  },
  useMutableSource: hi,
  useSyncExternalStore: ii$1,
  useId: Fi$1,
  unstable_isNewReconciler: false
}, $h = { readContext: Vg, useCallback: Bi$1, useContext: Vg, useEffect: ji$1, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi$1, useMemo: Ci$1, useReducer: gi, useRef: si$1, useState: function() {
  return gi(ei$1);
}, useDebugValue: Ai$1, useDeferredValue: function(a2) {
  var b2 = di$1();
  return null === O$3 ? b2.memoizedState = a2 : Di$1(b2, O$3.memoizedState, a2);
}, useTransition: function() {
  var a2 = gi(ei$1)[0], b2 = di$1().memoizedState;
  return [a2, b2];
}, useMutableSource: hi, useSyncExternalStore: ii$1, useId: Fi$1, unstable_isNewReconciler: false };
function Ki$1(a2, b2) {
  try {
    var c2 = "", d2 = b2;
    do
      c2 += Pa(d2), d2 = d2.return;
    while (d2);
    var e2 = c2;
  } catch (f2) {
    e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a2, source: b2, stack: e2, digest: null };
}
function Li(a2, b2, c2) {
  return { value: a2, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
}
function Mi$1(a2, b2) {
  try {
    console.error(b2.value);
  } catch (c2) {
    setTimeout(function() {
      throw c2;
    });
  }
}
var Ni$1 = "function" === typeof WeakMap ? WeakMap : Map;
function Oi$1(a2, b2, c2) {
  c2 = ch(-1, c2);
  c2.tag = 3;
  c2.payload = { element: null };
  var d2 = b2.value;
  c2.callback = function() {
    Pi$1 || (Pi$1 = true, Qi$1 = d2);
    Mi$1(a2, b2);
  };
  return c2;
}
function Ri(a2, b2, c2) {
  c2 = ch(-1, c2);
  c2.tag = 3;
  var d2 = a2.type.getDerivedStateFromError;
  if ("function" === typeof d2) {
    var e2 = b2.value;
    c2.payload = function() {
      return d2(e2);
    };
    c2.callback = function() {
      Mi$1(a2, b2);
    };
  }
  var f2 = a2.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
    Mi$1(a2, b2);
    "function" !== typeof d2 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
    var c3 = b2.stack;
    this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
  });
  return c2;
}
function Ti$1(a2, b2, c2) {
  var d2 = a2.pingCache;
  if (null === d2) {
    d2 = a2.pingCache = new Ni$1();
    var e2 = /* @__PURE__ */ new Set();
    d2.set(b2, e2);
  } else
    e2 = d2.get(b2), void 0 === e2 && (e2 = /* @__PURE__ */ new Set(), d2.set(b2, e2));
  e2.has(c2) || (e2.add(c2), a2 = Ui$1.bind(null, a2, b2, c2), b2.then(a2, a2));
}
function Vi$1(a2) {
  do {
    var b2;
    if (b2 = 13 === a2.tag)
      b2 = a2.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
    if (b2)
      return a2;
    a2 = a2.return;
  } while (null !== a2);
  return null;
}
function Wi$1(a2, b2, c2, d2, e2) {
  if (0 === (a2.mode & 1))
    return a2 === b2 ? a2.flags |= 65536 : (a2.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c2, b2, 1))), c2.lanes |= 1), a2;
  a2.flags |= 65536;
  a2.lanes = e2;
  return a2;
}
var Xi$1 = ua.ReactCurrentOwner, Ug = false;
function Yi(a2, b2, c2, d2) {
  b2.child = null === a2 ? Ch(b2, null, c2, d2) : Bh(b2, a2.child, c2, d2);
}
function Zi(a2, b2, c2, d2, e2) {
  c2 = c2.render;
  var f2 = b2.ref;
  Tg(b2, e2);
  d2 = Xh(a2, b2, c2, d2, f2, e2);
  c2 = bi$1();
  if (null !== a2 && !Ug)
    return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e2, $i$1(a2, b2, e2);
  I$2 && c2 && vg(b2);
  b2.flags |= 1;
  Yi(a2, b2, d2, e2);
  return b2.child;
}
function aj(a2, b2, c2, d2, e2) {
  if (null === a2) {
    var f2 = c2.type;
    if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
      return b2.tag = 15, b2.type = f2, cj(a2, b2, f2, d2, e2);
    a2 = yh(c2.type, null, d2, b2, b2.mode, e2);
    a2.ref = b2.ref;
    a2.return = b2;
    return b2.child = a2;
  }
  f2 = a2.child;
  if (0 === (a2.lanes & e2)) {
    var g2 = f2.memoizedProps;
    c2 = c2.compare;
    c2 = null !== c2 ? c2 : Ie$2;
    if (c2(g2, d2) && a2.ref === b2.ref)
      return $i$1(a2, b2, e2);
  }
  b2.flags |= 1;
  a2 = wh(f2, d2);
  a2.ref = b2.ref;
  a2.return = b2;
  return b2.child = a2;
}
function cj(a2, b2, c2, d2, e2) {
  if (null !== a2) {
    var f2 = a2.memoizedProps;
    if (Ie$2(f2, d2) && a2.ref === b2.ref)
      if (Ug = false, b2.pendingProps = d2 = f2, 0 !== (a2.lanes & e2))
        0 !== (a2.flags & 131072) && (Ug = true);
      else
        return b2.lanes = a2.lanes, $i$1(a2, b2, e2);
  }
  return dj(a2, b2, c2, d2, e2);
}
function ej(a2, b2, c2) {
  var d2 = b2.pendingProps, e2 = d2.children, f2 = null !== a2 ? a2.memoizedState : null;
  if ("hidden" === d2.mode)
    if (0 === (b2.mode & 1))
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G$2(fj, gj), gj |= c2;
    else {
      if (0 === (c2 & 1073741824))
        return a2 = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a2, cachePool: null, transitions: null }, b2.updateQueue = null, G$2(fj, gj), gj |= a2, null;
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
      d2 = null !== f2 ? f2.baseLanes : c2;
      G$2(fj, gj);
      gj |= d2;
    }
  else
    null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G$2(fj, gj), gj |= d2;
  Yi(a2, b2, e2, c2);
  return b2.child;
}
function hj(a2, b2) {
  var c2 = b2.ref;
  if (null === a2 && null !== c2 || null !== a2 && a2.ref !== c2)
    b2.flags |= 512, b2.flags |= 2097152;
}
function dj(a2, b2, c2, d2, e2) {
  var f2 = Zf(c2) ? Xf : H$3.current;
  f2 = Yf(b2, f2);
  Tg(b2, e2);
  c2 = Xh(a2, b2, c2, d2, f2, e2);
  d2 = bi$1();
  if (null !== a2 && !Ug)
    return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e2, $i$1(a2, b2, e2);
  I$2 && d2 && vg(b2);
  b2.flags |= 1;
  Yi(a2, b2, c2, e2);
  return b2.child;
}
function ij(a2, b2, c2, d2, e2) {
  if (Zf(c2)) {
    var f2 = true;
    cg(b2);
  } else
    f2 = false;
  Tg(b2, e2);
  if (null === b2.stateNode)
    jj(a2, b2), ph(b2, c2, d2), rh(b2, c2, d2, e2), d2 = true;
  else if (null === a2) {
    var g2 = b2.stateNode, h2 = b2.memoizedProps;
    g2.props = h2;
    var k2 = g2.context, l2 = c2.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c2) ? Xf : H$3.current, l2 = Yf(b2, l2));
    var m2 = c2.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
    q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && qh(b2, g2, d2, l2);
    $g = false;
    var r2 = b2.memoizedState;
    g2.state = r2;
    gh(b2, d2, g2, e2);
    k2 = b2.memoizedState;
    h2 !== d2 || r2 !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c2, m2, d2), k2 = b2.memoizedState), (h2 = $g || oh(b2, c2, h2, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
  } else {
    g2 = b2.stateNode;
    bh(a2, b2);
    h2 = b2.memoizedProps;
    l2 = b2.type === b2.elementType ? h2 : Lg(b2.type, h2);
    g2.props = l2;
    q2 = b2.pendingProps;
    r2 = g2.context;
    k2 = c2.contextType;
    "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c2) ? Xf : H$3.current, k2 = Yf(b2, k2));
    var y2 = c2.getDerivedStateFromProps;
    (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== q2 || r2 !== k2) && qh(b2, g2, d2, k2);
    $g = false;
    r2 = b2.memoizedState;
    g2.state = r2;
    gh(b2, d2, g2, e2);
    var n9 = b2.memoizedState;
    h2 !== q2 || r2 !== n9 || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c2, y2, d2), n9 = b2.memoizedState), (l2 = $g || oh(b2, c2, l2, d2, r2, n9, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n9, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n9, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n9), g2.props = d2, g2.state = n9, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), d2 = false);
  }
  return kj(a2, b2, c2, d2, f2, e2);
}
function kj(a2, b2, c2, d2, e2, f2) {
  hj(a2, b2);
  var g2 = 0 !== (b2.flags & 128);
  if (!d2 && !g2)
    return e2 && dg(b2, c2, false), $i$1(a2, b2, f2);
  d2 = b2.stateNode;
  Xi$1.current = b2;
  var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
  b2.flags |= 1;
  null !== a2 && g2 ? (b2.child = Bh(b2, a2.child, null, f2), b2.child = Bh(b2, null, h2, f2)) : Yi(a2, b2, h2, f2);
  b2.memoizedState = d2.state;
  e2 && dg(b2, c2, true);
  return b2.child;
}
function lj(a2) {
  var b2 = a2.stateNode;
  b2.pendingContext ? ag(a2, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a2, b2.context, false);
  Ih(a2, b2.containerInfo);
}
function mj(a2, b2, c2, d2, e2) {
  Ig();
  Jg(e2);
  b2.flags |= 256;
  Yi(a2, b2, c2, d2);
  return b2.child;
}
var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
function oj(a2) {
  return { baseLanes: a2, cachePool: null, transitions: null };
}
function pj(a2, b2, c2) {
  var d2 = b2.pendingProps, e2 = M$2.current, f2 = false, g2 = 0 !== (b2.flags & 128), h2;
  (h2 = g2) || (h2 = null !== a2 && null === a2.memoizedState ? false : 0 !== (e2 & 2));
  if (h2)
    f2 = true, b2.flags &= -129;
  else if (null === a2 || null !== a2.memoizedState)
    e2 |= 1;
  G$2(M$2, e2 & 1);
  if (null === a2) {
    Eg(b2);
    a2 = b2.memoizedState;
    if (null !== a2 && (a2 = a2.dehydrated, null !== a2))
      return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a2.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
    g2 = d2.children;
    a2 = d2.fallback;
    return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d2, 0, null), a2 = Ah(a2, d2, c2, null), f2.return = b2, a2.return = b2, f2.sibling = a2, b2.child = f2, b2.child.memoizedState = oj(c2), b2.memoizedState = nj, a2) : rj(b2, g2);
  }
  e2 = a2.memoizedState;
  if (null !== e2 && (h2 = e2.dehydrated, null !== h2))
    return sj(a2, b2, g2, d2, h2, e2, c2);
  if (f2) {
    f2 = d2.fallback;
    g2 = b2.mode;
    e2 = a2.child;
    h2 = e2.sibling;
    var k2 = { mode: "hidden", children: d2.children };
    0 === (g2 & 1) && b2.child !== e2 ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = wh(e2, k2), d2.subtreeFlags = e2.subtreeFlags & 14680064);
    null !== h2 ? f2 = wh(h2, f2) : (f2 = Ah(f2, g2, c2, null), f2.flags |= 2);
    f2.return = b2;
    d2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    d2 = f2;
    f2 = b2.child;
    g2 = a2.child.memoizedState;
    g2 = null === g2 ? oj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
    f2.memoizedState = g2;
    f2.childLanes = a2.childLanes & ~c2;
    b2.memoizedState = nj;
    return d2;
  }
  f2 = a2.child;
  a2 = f2.sibling;
  d2 = wh(f2, { mode: "visible", children: d2.children });
  0 === (b2.mode & 1) && (d2.lanes = c2);
  d2.return = b2;
  d2.sibling = null;
  null !== a2 && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a2], b2.flags |= 16) : c2.push(a2));
  b2.child = d2;
  b2.memoizedState = null;
  return d2;
}
function rj(a2, b2) {
  b2 = qj({ mode: "visible", children: b2 }, a2.mode, 0, null);
  b2.return = a2;
  return a2.child = b2;
}
function tj(a2, b2, c2, d2) {
  null !== d2 && Jg(d2);
  Bh(b2, a2.child, null, c2);
  a2 = rj(b2, b2.pendingProps.children);
  a2.flags |= 2;
  b2.memoizedState = null;
  return a2;
}
function sj(a2, b2, c2, d2, e2, f2, g2) {
  if (c2) {
    if (b2.flags & 256)
      return b2.flags &= -257, d2 = Li(Error(p$4(422))), tj(a2, b2, g2, d2);
    if (null !== b2.memoizedState)
      return b2.child = a2.child, b2.flags |= 128, null;
    f2 = d2.fallback;
    e2 = b2.mode;
    d2 = qj({ mode: "visible", children: d2.children }, e2, 0, null);
    f2 = Ah(f2, e2, g2, null);
    f2.flags |= 2;
    d2.return = b2;
    f2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    0 !== (b2.mode & 1) && Bh(b2, a2.child, null, g2);
    b2.child.memoizedState = oj(g2);
    b2.memoizedState = nj;
    return f2;
  }
  if (0 === (b2.mode & 1))
    return tj(a2, b2, g2, null);
  if ("$!" === e2.data) {
    d2 = e2.nextSibling && e2.nextSibling.dataset;
    if (d2)
      var h2 = d2.dgst;
    d2 = h2;
    f2 = Error(p$4(419));
    d2 = Li(f2, d2, void 0);
    return tj(a2, b2, g2, d2);
  }
  h2 = 0 !== (g2 & a2.childLanes);
  if (Ug || h2) {
    d2 = R$3;
    if (null !== d2) {
      switch (g2 & -g2) {
        case 4:
          e2 = 2;
          break;
        case 16:
          e2 = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e2 = 32;
          break;
        case 536870912:
          e2 = 268435456;
          break;
        default:
          e2 = 0;
      }
      e2 = 0 !== (e2 & (d2.suspendedLanes | g2)) ? 0 : e2;
      0 !== e2 && e2 !== f2.retryLane && (f2.retryLane = e2, Zg(a2, e2), mh(d2, a2, e2, -1));
    }
    uj();
    d2 = Li(Error(p$4(421)));
    return tj(a2, b2, g2, d2);
  }
  if ("$?" === e2.data)
    return b2.flags |= 128, b2.child = a2.child, b2 = vj.bind(null, a2), e2._reactRetry = b2, null;
  a2 = f2.treeContext;
  yg = Lf(e2.nextSibling);
  xg = b2;
  I$2 = true;
  zg = null;
  null !== a2 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a2.id, sg = a2.overflow, qg = b2);
  b2 = rj(b2, d2.children);
  b2.flags |= 4096;
  return b2;
}
function wj(a2, b2, c2) {
  a2.lanes |= b2;
  var d2 = a2.alternate;
  null !== d2 && (d2.lanes |= b2);
  Sg(a2.return, b2, c2);
}
function xj(a2, b2, c2, d2, e2) {
  var f2 = a2.memoizedState;
  null === f2 ? a2.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e2 } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e2);
}
function yj(a2, b2, c2) {
  var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
  Yi(a2, b2, d2.children, c2);
  d2 = M$2.current;
  if (0 !== (d2 & 2))
    d2 = d2 & 1 | 2, b2.flags |= 128;
  else {
    if (null !== a2 && 0 !== (a2.flags & 128))
      a:
        for (a2 = b2.child; null !== a2; ) {
          if (13 === a2.tag)
            null !== a2.memoizedState && wj(a2, c2, b2);
          else if (19 === a2.tag)
            wj(a2, c2, b2);
          else if (null !== a2.child) {
            a2.child.return = a2;
            a2 = a2.child;
            continue;
          }
          if (a2 === b2)
            break a;
          for (; null === a2.sibling; ) {
            if (null === a2.return || a2.return === b2)
              break a;
            a2 = a2.return;
          }
          a2.sibling.return = a2.return;
          a2 = a2.sibling;
        }
    d2 &= 1;
  }
  G$2(M$2, d2);
  if (0 === (b2.mode & 1))
    b2.memoizedState = null;
  else
    switch (e2) {
      case "forwards":
        c2 = b2.child;
        for (e2 = null; null !== c2; )
          a2 = c2.alternate, null !== a2 && null === Mh(a2) && (e2 = c2), c2 = c2.sibling;
        c2 = e2;
        null === c2 ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
        xj(b2, false, e2, c2, f2);
        break;
      case "backwards":
        c2 = null;
        e2 = b2.child;
        for (b2.child = null; null !== e2; ) {
          a2 = e2.alternate;
          if (null !== a2 && null === Mh(a2)) {
            b2.child = e2;
            break;
          }
          a2 = e2.sibling;
          e2.sibling = c2;
          c2 = e2;
          e2 = a2;
        }
        xj(b2, true, c2, null, f2);
        break;
      case "together":
        xj(b2, false, null, null, void 0);
        break;
      default:
        b2.memoizedState = null;
    }
  return b2.child;
}
function jj(a2, b2) {
  0 === (b2.mode & 1) && null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
}
function $i$1(a2, b2, c2) {
  null !== a2 && (b2.dependencies = a2.dependencies);
  hh |= b2.lanes;
  if (0 === (c2 & b2.childLanes))
    return null;
  if (null !== a2 && b2.child !== a2.child)
    throw Error(p$4(153));
  if (null !== b2.child) {
    a2 = b2.child;
    c2 = wh(a2, a2.pendingProps);
    b2.child = c2;
    for (c2.return = b2; null !== a2.sibling; )
      a2 = a2.sibling, c2 = c2.sibling = wh(a2, a2.pendingProps), c2.return = b2;
    c2.sibling = null;
  }
  return b2.child;
}
function zj(a2, b2, c2) {
  switch (b2.tag) {
    case 3:
      lj(b2);
      Ig();
      break;
    case 5:
      Kh(b2);
      break;
    case 1:
      Zf(b2.type) && cg(b2);
      break;
    case 4:
      Ih(b2, b2.stateNode.containerInfo);
      break;
    case 10:
      var d2 = b2.type._context, e2 = b2.memoizedProps.value;
      G$2(Mg, d2._currentValue);
      d2._currentValue = e2;
      break;
    case 13:
      d2 = b2.memoizedState;
      if (null !== d2) {
        if (null !== d2.dehydrated)
          return G$2(M$2, M$2.current & 1), b2.flags |= 128, null;
        if (0 !== (c2 & b2.child.childLanes))
          return pj(a2, b2, c2);
        G$2(M$2, M$2.current & 1);
        a2 = $i$1(a2, b2, c2);
        return null !== a2 ? a2.sibling : null;
      }
      G$2(M$2, M$2.current & 1);
      break;
    case 19:
      d2 = 0 !== (c2 & b2.childLanes);
      if (0 !== (a2.flags & 128)) {
        if (d2)
          return yj(a2, b2, c2);
        b2.flags |= 128;
      }
      e2 = b2.memoizedState;
      null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
      G$2(M$2, M$2.current);
      if (d2)
        break;
      else
        return null;
    case 22:
    case 23:
      return b2.lanes = 0, ej(a2, b2, c2);
  }
  return $i$1(a2, b2, c2);
}
var Aj, Bj, Cj, Dj;
Aj = function(a2, b2) {
  for (var c2 = b2.child; null !== c2; ) {
    if (5 === c2.tag || 6 === c2.tag)
      a2.appendChild(c2.stateNode);
    else if (4 !== c2.tag && null !== c2.child) {
      c2.child.return = c2;
      c2 = c2.child;
      continue;
    }
    if (c2 === b2)
      break;
    for (; null === c2.sibling; ) {
      if (null === c2.return || c2.return === b2)
        return;
      c2 = c2.return;
    }
    c2.sibling.return = c2.return;
    c2 = c2.sibling;
  }
};
Bj = function() {
};
Cj = function(a2, b2, c2, d2) {
  var e2 = a2.memoizedProps;
  if (e2 !== d2) {
    a2 = b2.stateNode;
    Hh(Eh.current);
    var f2 = null;
    switch (c2) {
      case "input":
        e2 = Ya(a2, e2);
        d2 = Ya(a2, d2);
        f2 = [];
        break;
      case "select":
        e2 = A$2({}, e2, { value: void 0 });
        d2 = A$2({}, d2, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e2 = gb(a2, e2);
        d2 = gb(a2, d2);
        f2 = [];
        break;
      default:
        "function" !== typeof e2.onClick && "function" === typeof d2.onClick && (a2.onclick = Bf);
    }
    ub(c2, d2);
    var g2;
    c2 = null;
    for (l2 in e2)
      if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && null != e2[l2])
        if ("style" === l2) {
          var h2 = e2[l2];
          for (g2 in h2)
            h2.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
        } else
          "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d2) {
      var k2 = d2[l2];
      h2 = null != e2 ? e2[l2] : void 0;
      if (d2.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
        if ("style" === l2)
          if (h2) {
            for (g2 in h2)
              !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
            for (g2 in k2)
              k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
          } else
            c2 || (f2 || (f2 = []), f2.push(
              l2,
              c2
            )), c2 = k2;
        else
          "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D$4("scroll", a2), f2 || h2 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
    }
    c2 && (f2 = f2 || []).push("style", c2);
    var l2 = f2;
    if (b2.updateQueue = l2)
      b2.flags |= 4;
  }
};
Dj = function(a2, b2, c2, d2) {
  c2 !== d2 && (b2.flags |= 4);
};
function Ej(a2, b2) {
  if (!I$2)
    switch (a2.tailMode) {
      case "hidden":
        b2 = a2.tail;
        for (var c2 = null; null !== b2; )
          null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
        null === c2 ? a2.tail = null : c2.sibling = null;
        break;
      case "collapsed":
        c2 = a2.tail;
        for (var d2 = null; null !== c2; )
          null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
        null === d2 ? b2 || null === a2.tail ? a2.tail = null : a2.tail.sibling = null : d2.sibling = null;
    }
}
function S$2(a2) {
  var b2 = null !== a2.alternate && a2.alternate.child === a2.child, c2 = 0, d2 = 0;
  if (b2)
    for (var e2 = a2.child; null !== e2; )
      c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags & 14680064, d2 |= e2.flags & 14680064, e2.return = a2, e2 = e2.sibling;
  else
    for (e2 = a2.child; null !== e2; )
      c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags, d2 |= e2.flags, e2.return = a2, e2 = e2.sibling;
  a2.subtreeFlags |= d2;
  a2.childLanes = c2;
  return b2;
}
function Fj(a2, b2, c2) {
  var d2 = b2.pendingProps;
  wg(b2);
  switch (b2.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S$2(b2), null;
    case 1:
      return Zf(b2.type) && $f(), S$2(b2), null;
    case 3:
      d2 = b2.stateNode;
      Jh();
      E$4(Wf);
      E$4(H$3);
      Oh();
      d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
      if (null === a2 || null === a2.child)
        Gg(b2) ? b2.flags |= 4 : null === a2 || a2.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
      Bj(a2, b2);
      S$2(b2);
      return null;
    case 5:
      Lh(b2);
      var e2 = Hh(Gh.current);
      c2 = b2.type;
      if (null !== a2 && null != b2.stateNode)
        Cj(a2, b2, c2, d2, e2), a2.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      else {
        if (!d2) {
          if (null === b2.stateNode)
            throw Error(p$4(166));
          S$2(b2);
          return null;
        }
        a2 = Hh(Eh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.type;
          var f2 = b2.memoizedProps;
          d2[Of] = b2;
          d2[Pf] = f2;
          a2 = 0 !== (b2.mode & 1);
          switch (c2) {
            case "dialog":
              D$4("cancel", d2);
              D$4("close", d2);
              break;
            case "iframe":
            case "object":
            case "embed":
              D$4("load", d2);
              break;
            case "video":
            case "audio":
              for (e2 = 0; e2 < lf.length; e2++)
                D$4(lf[e2], d2);
              break;
            case "source":
              D$4("error", d2);
              break;
            case "img":
            case "image":
            case "link":
              D$4(
                "error",
                d2
              );
              D$4("load", d2);
              break;
            case "details":
              D$4("toggle", d2);
              break;
            case "input":
              Za(d2, f2);
              D$4("invalid", d2);
              break;
            case "select":
              d2._wrapperState = { wasMultiple: !!f2.multiple };
              D$4("invalid", d2);
              break;
            case "textarea":
              hb(d2, f2), D$4("invalid", d2);
          }
          ub(c2, f2);
          e2 = null;
          for (var g2 in f2)
            if (f2.hasOwnProperty(g2)) {
              var h2 = f2[g2];
              "children" === g2 ? "string" === typeof h2 ? d2.textContent !== h2 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h2, a2), e2 = ["children", h2]) : "number" === typeof h2 && d2.textContent !== "" + h2 && (true !== f2.suppressHydrationWarning && Af(
                d2.textContent,
                h2,
                a2
              ), e2 = ["children", "" + h2]) : ea.hasOwnProperty(g2) && null != h2 && "onScroll" === g2 && D$4("scroll", d2);
            }
          switch (c2) {
            case "input":
              Va(d2);
              db(d2, f2, true);
              break;
            case "textarea":
              Va(d2);
              jb(d2);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d2.onclick = Bf);
          }
          d2 = e2;
          b2.updateQueue = d2;
          null !== d2 && (b2.flags |= 4);
        } else {
          g2 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a2 && (a2 = kb(c2));
          "http://www.w3.org/1999/xhtml" === a2 ? "script" === c2 ? (a2 = g2.createElement("div"), a2.innerHTML = "<script><\/script>", a2 = a2.removeChild(a2.firstChild)) : "string" === typeof d2.is ? a2 = g2.createElement(c2, { is: d2.is }) : (a2 = g2.createElement(c2), "select" === c2 && (g2 = a2, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a2 = g2.createElementNS(a2, c2);
          a2[Of] = b2;
          a2[Pf] = d2;
          Aj(a2, b2, false, false);
          b2.stateNode = a2;
          a: {
            g2 = vb(c2, d2);
            switch (c2) {
              case "dialog":
                D$4("cancel", a2);
                D$4("close", a2);
                e2 = d2;
                break;
              case "iframe":
              case "object":
              case "embed":
                D$4("load", a2);
                e2 = d2;
                break;
              case "video":
              case "audio":
                for (e2 = 0; e2 < lf.length; e2++)
                  D$4(lf[e2], a2);
                e2 = d2;
                break;
              case "source":
                D$4("error", a2);
                e2 = d2;
                break;
              case "img":
              case "image":
              case "link":
                D$4(
                  "error",
                  a2
                );
                D$4("load", a2);
                e2 = d2;
                break;
              case "details":
                D$4("toggle", a2);
                e2 = d2;
                break;
              case "input":
                Za(a2, d2);
                e2 = Ya(a2, d2);
                D$4("invalid", a2);
                break;
              case "option":
                e2 = d2;
                break;
              case "select":
                a2._wrapperState = { wasMultiple: !!d2.multiple };
                e2 = A$2({}, d2, { value: void 0 });
                D$4("invalid", a2);
                break;
              case "textarea":
                hb(a2, d2);
                e2 = gb(a2, d2);
                D$4("invalid", a2);
                break;
              default:
                e2 = d2;
            }
            ub(c2, e2);
            h2 = e2;
            for (f2 in h2)
              if (h2.hasOwnProperty(f2)) {
                var k2 = h2[f2];
                "style" === f2 ? sb(a2, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a2, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a2, k2) : "number" === typeof k2 && ob(a2, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D$4("scroll", a2) : null != k2 && ta(a2, f2, k2, g2));
              }
            switch (c2) {
              case "input":
                Va(a2);
                db(a2, d2, false);
                break;
              case "textarea":
                Va(a2);
                jb(a2);
                break;
              case "option":
                null != d2.value && a2.setAttribute("value", "" + Sa(d2.value));
                break;
              case "select":
                a2.multiple = !!d2.multiple;
                f2 = d2.value;
                null != f2 ? fb(a2, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                  a2,
                  !!d2.multiple,
                  d2.defaultValue,
                  true
                );
                break;
              default:
                "function" === typeof e2.onClick && (a2.onclick = Bf);
            }
            switch (c2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d2 = !!d2.autoFocus;
                break a;
              case "img":
                d2 = true;
                break a;
              default:
                d2 = false;
            }
          }
          d2 && (b2.flags |= 4);
        }
        null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      }
      S$2(b2);
      return null;
    case 6:
      if (a2 && null != b2.stateNode)
        Dj(a2, b2, a2.memoizedProps, d2);
      else {
        if ("string" !== typeof d2 && null === b2.stateNode)
          throw Error(p$4(166));
        c2 = Hh(Gh.current);
        Hh(Eh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.memoizedProps;
          d2[Of] = b2;
          if (f2 = d2.nodeValue !== c2) {
            if (a2 = xg, null !== a2)
              switch (a2.tag) {
                case 3:
                  Af(d2.nodeValue, c2, 0 !== (a2.mode & 1));
                  break;
                case 5:
                  true !== a2.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a2.mode & 1));
              }
          }
          f2 && (b2.flags |= 4);
        } else
          d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
      }
      S$2(b2);
      return null;
    case 13:
      E$4(M$2);
      d2 = b2.memoizedState;
      if (null === a2 || null !== a2.memoizedState && null !== a2.memoizedState.dehydrated) {
        if (I$2 && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
          Hg(), Ig(), b2.flags |= 98560, f2 = false;
        else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
          if (null === a2) {
            if (!f2)
              throw Error(p$4(318));
            f2 = b2.memoizedState;
            f2 = null !== f2 ? f2.dehydrated : null;
            if (!f2)
              throw Error(p$4(317));
            f2[Of] = b2;
          } else
            Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
          S$2(b2);
          f2 = false;
        } else
          null !== zg && (Gj(zg), zg = null), f2 = true;
        if (!f2)
          return b2.flags & 65536 ? b2 : null;
      }
      if (0 !== (b2.flags & 128))
        return b2.lanes = c2, b2;
      d2 = null !== d2;
      d2 !== (null !== a2 && null !== a2.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a2 || 0 !== (M$2.current & 1) ? 0 === T$1 && (T$1 = 3) : uj()));
      null !== b2.updateQueue && (b2.flags |= 4);
      S$2(b2);
      return null;
    case 4:
      return Jh(), Bj(a2, b2), null === a2 && sf(b2.stateNode.containerInfo), S$2(b2), null;
    case 10:
      return Rg(b2.type._context), S$2(b2), null;
    case 17:
      return Zf(b2.type) && $f(), S$2(b2), null;
    case 19:
      E$4(M$2);
      f2 = b2.memoizedState;
      if (null === f2)
        return S$2(b2), null;
      d2 = 0 !== (b2.flags & 128);
      g2 = f2.rendering;
      if (null === g2)
        if (d2)
          Ej(f2, false);
        else {
          if (0 !== T$1 || null !== a2 && 0 !== (a2.flags & 128))
            for (a2 = b2.child; null !== a2; ) {
              g2 = Mh(a2);
              if (null !== g2) {
                b2.flags |= 128;
                Ej(f2, false);
                d2 = g2.updateQueue;
                null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                b2.subtreeFlags = 0;
                d2 = c2;
                for (c2 = b2.child; null !== c2; )
                  f2 = c2, a2 = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a2, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a2 = g2.dependencies, f2.dependencies = null === a2 ? null : { lanes: a2.lanes, firstContext: a2.firstContext }), c2 = c2.sibling;
                G$2(M$2, M$2.current & 1 | 2);
                return b2.child;
              }
              a2 = a2.sibling;
            }
          null !== f2.tail && B$3() > Hj && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
        }
      else {
        if (!d2)
          if (a2 = Mh(g2), null !== a2) {
            if (b2.flags |= 128, d2 = true, c2 = a2.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I$2)
              return S$2(b2), null;
          } else
            2 * B$3() - f2.renderingStartTime > Hj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
        f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
      }
      if (null !== f2.tail)
        return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B$3(), b2.sibling = null, c2 = M$2.current, G$2(M$2, d2 ? c2 & 1 | 2 : c2 & 1), b2;
      S$2(b2);
      return null;
    case 22:
    case 23:
      return Ij(), d2 = null !== b2.memoizedState, null !== a2 && null !== a2.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S$2(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S$2(b2), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p$4(156, b2.tag));
}
function Jj(a2, b2) {
  wg(b2);
  switch (b2.tag) {
    case 1:
      return Zf(b2.type) && $f(), a2 = b2.flags, a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
    case 3:
      return Jh(), E$4(Wf), E$4(H$3), Oh(), a2 = b2.flags, 0 !== (a2 & 65536) && 0 === (a2 & 128) ? (b2.flags = a2 & -65537 | 128, b2) : null;
    case 5:
      return Lh(b2), null;
    case 13:
      E$4(M$2);
      a2 = b2.memoizedState;
      if (null !== a2 && null !== a2.dehydrated) {
        if (null === b2.alternate)
          throw Error(p$4(340));
        Ig();
      }
      a2 = b2.flags;
      return a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
    case 19:
      return E$4(M$2), null;
    case 4:
      return Jh(), null;
    case 10:
      return Rg(b2.type._context), null;
    case 22:
    case 23:
      return Ij(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Kj = false, U$2 = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V$2 = null;
function Mj(a2, b2) {
  var c2 = a2.ref;
  if (null !== c2)
    if ("function" === typeof c2)
      try {
        c2(null);
      } catch (d2) {
        W$4(a2, b2, d2);
      }
    else
      c2.current = null;
}
function Nj(a2, b2, c2) {
  try {
    c2();
  } catch (d2) {
    W$4(a2, b2, d2);
  }
}
var Oj = false;
function Pj(a2, b2) {
  Cf = dd;
  a2 = Me$2();
  if (Ne$2(a2)) {
    if ("selectionStart" in a2)
      var c2 = { start: a2.selectionStart, end: a2.selectionEnd };
    else
      a: {
        c2 = (c2 = a2.ownerDocument) && c2.defaultView || window;
        var d2 = c2.getSelection && c2.getSelection();
        if (d2 && 0 !== d2.rangeCount) {
          c2 = d2.anchorNode;
          var e2 = d2.anchorOffset, f2 = d2.focusNode;
          d2 = d2.focusOffset;
          try {
            c2.nodeType, f2.nodeType;
          } catch (F2) {
            c2 = null;
            break a;
          }
          var g2 = 0, h2 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a2, r2 = null;
          b:
            for (; ; ) {
              for (var y2; ; ) {
                q2 !== c2 || 0 !== e2 && 3 !== q2.nodeType || (h2 = g2 + e2);
                q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
                3 === q2.nodeType && (g2 += q2.nodeValue.length);
                if (null === (y2 = q2.firstChild))
                  break;
                r2 = q2;
                q2 = y2;
              }
              for (; ; ) {
                if (q2 === a2)
                  break b;
                r2 === c2 && ++l2 === e2 && (h2 = g2);
                r2 === f2 && ++m2 === d2 && (k2 = g2);
                if (null !== (y2 = q2.nextSibling))
                  break;
                q2 = r2;
                r2 = q2.parentNode;
              }
              q2 = y2;
            }
          c2 = -1 === h2 || -1 === k2 ? null : { start: h2, end: k2 };
        } else
          c2 = null;
      }
    c2 = c2 || { start: 0, end: 0 };
  } else
    c2 = null;
  Df = { focusedElem: a2, selectionRange: c2 };
  dd = false;
  for (V$2 = b2; null !== V$2; )
    if (b2 = V$2, a2 = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a2)
      a2.return = b2, V$2 = a2;
    else
      for (; null !== V$2; ) {
        b2 = V$2;
        try {
          var n9 = b2.alternate;
          if (0 !== (b2.flags & 1024))
            switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (null !== n9) {
                  var t2 = n9.memoizedProps, J2 = n9.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Lg(b2.type, t2), J2);
                  x2.__reactInternalSnapshotBeforeUpdate = w2;
                }
                break;
              case 3:
                var u2 = b2.stateNode.containerInfo;
                1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(p$4(163));
            }
        } catch (F2) {
          W$4(b2, b2.return, F2);
        }
        a2 = b2.sibling;
        if (null !== a2) {
          a2.return = b2.return;
          V$2 = a2;
          break;
        }
        V$2 = b2.return;
      }
  n9 = Oj;
  Oj = false;
  return n9;
}
function Qj(a2, b2, c2) {
  var d2 = b2.updateQueue;
  d2 = null !== d2 ? d2.lastEffect : null;
  if (null !== d2) {
    var e2 = d2 = d2.next;
    do {
      if ((e2.tag & a2) === a2) {
        var f2 = e2.destroy;
        e2.destroy = void 0;
        void 0 !== f2 && Nj(b2, c2, f2);
      }
      e2 = e2.next;
    } while (e2 !== d2);
  }
}
function Rj(a2, b2) {
  b2 = b2.updateQueue;
  b2 = null !== b2 ? b2.lastEffect : null;
  if (null !== b2) {
    var c2 = b2 = b2.next;
    do {
      if ((c2.tag & a2) === a2) {
        var d2 = c2.create;
        c2.destroy = d2();
      }
      c2 = c2.next;
    } while (c2 !== b2);
  }
}
function Sj(a2) {
  var b2 = a2.ref;
  if (null !== b2) {
    var c2 = a2.stateNode;
    switch (a2.tag) {
      case 5:
        a2 = c2;
        break;
      default:
        a2 = c2;
    }
    "function" === typeof b2 ? b2(a2) : b2.current = a2;
  }
}
function Tj(a2) {
  var b2 = a2.alternate;
  null !== b2 && (a2.alternate = null, Tj(b2));
  a2.child = null;
  a2.deletions = null;
  a2.sibling = null;
  5 === a2.tag && (b2 = a2.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
  a2.stateNode = null;
  a2.return = null;
  a2.dependencies = null;
  a2.memoizedProps = null;
  a2.memoizedState = null;
  a2.pendingProps = null;
  a2.stateNode = null;
  a2.updateQueue = null;
}
function Uj(a2) {
  return 5 === a2.tag || 3 === a2.tag || 4 === a2.tag;
}
function Vj(a2) {
  a:
    for (; ; ) {
      for (; null === a2.sibling; ) {
        if (null === a2.return || Uj(a2.return))
          return null;
        a2 = a2.return;
      }
      a2.sibling.return = a2.return;
      for (a2 = a2.sibling; 5 !== a2.tag && 6 !== a2.tag && 18 !== a2.tag; ) {
        if (a2.flags & 2)
          continue a;
        if (null === a2.child || 4 === a2.tag)
          continue a;
        else
          a2.child.return = a2, a2 = a2.child;
      }
      if (!(a2.flags & 2))
        return a2.stateNode;
    }
}
function Wj(a2, b2, c2) {
  var d2 = a2.tag;
  if (5 === d2 || 6 === d2)
    a2 = a2.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a2, b2) : c2.insertBefore(a2, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a2, c2)) : (b2 = c2, b2.appendChild(a2)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
  else if (4 !== d2 && (a2 = a2.child, null !== a2))
    for (Wj(a2, b2, c2), a2 = a2.sibling; null !== a2; )
      Wj(a2, b2, c2), a2 = a2.sibling;
}
function Xj(a2, b2, c2) {
  var d2 = a2.tag;
  if (5 === d2 || 6 === d2)
    a2 = a2.stateNode, b2 ? c2.insertBefore(a2, b2) : c2.appendChild(a2);
  else if (4 !== d2 && (a2 = a2.child, null !== a2))
    for (Xj(a2, b2, c2), a2 = a2.sibling; null !== a2; )
      Xj(a2, b2, c2), a2 = a2.sibling;
}
var X$3 = null, Yj = false;
function Zj(a2, b2, c2) {
  for (c2 = c2.child; null !== c2; )
    ak(a2, b2, c2), c2 = c2.sibling;
}
function ak(a2, b2, c2) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount)
    try {
      lc.onCommitFiberUnmount(kc, c2);
    } catch (h2) {
    }
  switch (c2.tag) {
    case 5:
      U$2 || Mj(c2, b2);
    case 6:
      var d2 = X$3, e2 = Yj;
      X$3 = null;
      Zj(a2, b2, c2);
      X$3 = d2;
      Yj = e2;
      null !== X$3 && (Yj ? (a2 = X$3, c2 = c2.stateNode, 8 === a2.nodeType ? a2.parentNode.removeChild(c2) : a2.removeChild(c2)) : X$3.removeChild(c2.stateNode));
      break;
    case 18:
      null !== X$3 && (Yj ? (a2 = X$3, c2 = c2.stateNode, 8 === a2.nodeType ? Kf(a2.parentNode, c2) : 1 === a2.nodeType && Kf(a2, c2), bd(a2)) : Kf(X$3, c2.stateNode));
      break;
    case 4:
      d2 = X$3;
      e2 = Yj;
      X$3 = c2.stateNode.containerInfo;
      Yj = true;
      Zj(a2, b2, c2);
      X$3 = d2;
      Yj = e2;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U$2 && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
        e2 = d2 = d2.next;
        do {
          var f2 = e2, g2 = f2.destroy;
          f2 = f2.tag;
          void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c2, b2, g2) : 0 !== (f2 & 4) && Nj(c2, b2, g2));
          e2 = e2.next;
        } while (e2 !== d2);
      }
      Zj(a2, b2, c2);
      break;
    case 1:
      if (!U$2 && (Mj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount))
        try {
          d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
        } catch (h2) {
          W$4(c2, b2, h2);
        }
      Zj(a2, b2, c2);
      break;
    case 21:
      Zj(a2, b2, c2);
      break;
    case 22:
      c2.mode & 1 ? (U$2 = (d2 = U$2) || null !== c2.memoizedState, Zj(a2, b2, c2), U$2 = d2) : Zj(a2, b2, c2);
      break;
    default:
      Zj(a2, b2, c2);
  }
}
function bk(a2) {
  var b2 = a2.updateQueue;
  if (null !== b2) {
    a2.updateQueue = null;
    var c2 = a2.stateNode;
    null === c2 && (c2 = a2.stateNode = new Lj());
    b2.forEach(function(b3) {
      var d2 = ck.bind(null, a2, b3);
      c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
    });
  }
}
function dk(a2, b2) {
  var c2 = b2.deletions;
  if (null !== c2)
    for (var d2 = 0; d2 < c2.length; d2++) {
      var e2 = c2[d2];
      try {
        var f2 = a2, g2 = b2, h2 = g2;
        a:
          for (; null !== h2; ) {
            switch (h2.tag) {
              case 5:
                X$3 = h2.stateNode;
                Yj = false;
                break a;
              case 3:
                X$3 = h2.stateNode.containerInfo;
                Yj = true;
                break a;
              case 4:
                X$3 = h2.stateNode.containerInfo;
                Yj = true;
                break a;
            }
            h2 = h2.return;
          }
        if (null === X$3)
          throw Error(p$4(160));
        ak(f2, g2, e2);
        X$3 = null;
        Yj = false;
        var k2 = e2.alternate;
        null !== k2 && (k2.return = null);
        e2.return = null;
      } catch (l2) {
        W$4(e2, b2, l2);
      }
    }
  if (b2.subtreeFlags & 12854)
    for (b2 = b2.child; null !== b2; )
      ek(b2, a2), b2 = b2.sibling;
}
function ek(a2, b2) {
  var c2 = a2.alternate, d2 = a2.flags;
  switch (a2.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      dk(b2, a2);
      fk(a2);
      if (d2 & 4) {
        try {
          Qj(3, a2, a2.return), Rj(3, a2);
        } catch (t2) {
          W$4(a2, a2.return, t2);
        }
        try {
          Qj(5, a2, a2.return);
        } catch (t2) {
          W$4(a2, a2.return, t2);
        }
      }
      break;
    case 1:
      dk(b2, a2);
      fk(a2);
      d2 & 512 && null !== c2 && Mj(c2, c2.return);
      break;
    case 5:
      dk(b2, a2);
      fk(a2);
      d2 & 512 && null !== c2 && Mj(c2, c2.return);
      if (a2.flags & 32) {
        var e2 = a2.stateNode;
        try {
          ob(e2, "");
        } catch (t2) {
          W$4(a2, a2.return, t2);
        }
      }
      if (d2 & 4 && (e2 = a2.stateNode, null != e2)) {
        var f2 = a2.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h2 = a2.type, k2 = a2.updateQueue;
        a2.updateQueue = null;
        if (null !== k2)
          try {
            "input" === h2 && "radio" === f2.type && null != f2.name && ab(e2, f2);
            vb(h2, g2);
            var l2 = vb(h2, f2);
            for (g2 = 0; g2 < k2.length; g2 += 2) {
              var m2 = k2[g2], q2 = k2[g2 + 1];
              "style" === m2 ? sb(e2, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e2, q2) : "children" === m2 ? ob(e2, q2) : ta(e2, m2, q2, l2);
            }
            switch (h2) {
              case "input":
                bb(e2, f2);
                break;
              case "textarea":
                ib(e2, f2);
                break;
              case "select":
                var r2 = e2._wrapperState.wasMultiple;
                e2._wrapperState.wasMultiple = !!f2.multiple;
                var y2 = f2.value;
                null != y2 ? fb(e2, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                  e2,
                  !!f2.multiple,
                  f2.defaultValue,
                  true
                ) : fb(e2, !!f2.multiple, f2.multiple ? [] : "", false));
            }
            e2[Pf] = f2;
          } catch (t2) {
            W$4(a2, a2.return, t2);
          }
      }
      break;
    case 6:
      dk(b2, a2);
      fk(a2);
      if (d2 & 4) {
        if (null === a2.stateNode)
          throw Error(p$4(162));
        e2 = a2.stateNode;
        f2 = a2.memoizedProps;
        try {
          e2.nodeValue = f2;
        } catch (t2) {
          W$4(a2, a2.return, t2);
        }
      }
      break;
    case 3:
      dk(b2, a2);
      fk(a2);
      if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated)
        try {
          bd(b2.containerInfo);
        } catch (t2) {
          W$4(a2, a2.return, t2);
        }
      break;
    case 4:
      dk(b2, a2);
      fk(a2);
      break;
    case 13:
      dk(b2, a2);
      fk(a2);
      e2 = a2.child;
      e2.flags & 8192 && (f2 = null !== e2.memoizedState, e2.stateNode.isHidden = f2, !f2 || null !== e2.alternate && null !== e2.alternate.memoizedState || (gk = B$3()));
      d2 & 4 && bk(a2);
      break;
    case 22:
      m2 = null !== c2 && null !== c2.memoizedState;
      a2.mode & 1 ? (U$2 = (l2 = U$2) || m2, dk(b2, a2), U$2 = l2) : dk(b2, a2);
      fk(a2);
      if (d2 & 8192) {
        l2 = null !== a2.memoizedState;
        if ((a2.stateNode.isHidden = l2) && !m2 && 0 !== (a2.mode & 1))
          for (V$2 = a2, m2 = a2.child; null !== m2; ) {
            for (q2 = V$2 = m2; null !== V$2; ) {
              r2 = V$2;
              y2 = r2.child;
              switch (r2.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Qj(4, r2, r2.return);
                  break;
                case 1:
                  Mj(r2, r2.return);
                  var n9 = r2.stateNode;
                  if ("function" === typeof n9.componentWillUnmount) {
                    d2 = r2;
                    c2 = r2.return;
                    try {
                      b2 = d2, n9.props = b2.memoizedProps, n9.state = b2.memoizedState, n9.componentWillUnmount();
                    } catch (t2) {
                      W$4(d2, c2, t2);
                    }
                  }
                  break;
                case 5:
                  Mj(r2, r2.return);
                  break;
                case 22:
                  if (null !== r2.memoizedState) {
                    hk(q2);
                    continue;
                  }
              }
              null !== y2 ? (y2.return = r2, V$2 = y2) : hk(q2);
            }
            m2 = m2.sibling;
          }
        a:
          for (m2 = null, q2 = a2; ; ) {
            if (5 === q2.tag) {
              if (null === m2) {
                m2 = q2;
                try {
                  e2 = q2.stateNode, l2 ? (f2 = e2.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h2 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h2.style.display = rb("display", g2));
                } catch (t2) {
                  W$4(a2, a2.return, t2);
                }
              }
            } else if (6 === q2.tag) {
              if (null === m2)
                try {
                  q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                } catch (t2) {
                  W$4(a2, a2.return, t2);
                }
            } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a2) && null !== q2.child) {
              q2.child.return = q2;
              q2 = q2.child;
              continue;
            }
            if (q2 === a2)
              break a;
            for (; null === q2.sibling; ) {
              if (null === q2.return || q2.return === a2)
                break a;
              m2 === q2 && (m2 = null);
              q2 = q2.return;
            }
            m2 === q2 && (m2 = null);
            q2.sibling.return = q2.return;
            q2 = q2.sibling;
          }
      }
      break;
    case 19:
      dk(b2, a2);
      fk(a2);
      d2 & 4 && bk(a2);
      break;
    case 21:
      break;
    default:
      dk(
        b2,
        a2
      ), fk(a2);
  }
}
function fk(a2) {
  var b2 = a2.flags;
  if (b2 & 2) {
    try {
      a: {
        for (var c2 = a2.return; null !== c2; ) {
          if (Uj(c2)) {
            var d2 = c2;
            break a;
          }
          c2 = c2.return;
        }
        throw Error(p$4(160));
      }
      switch (d2.tag) {
        case 5:
          var e2 = d2.stateNode;
          d2.flags & 32 && (ob(e2, ""), d2.flags &= -33);
          var f2 = Vj(a2);
          Xj(a2, f2, e2);
          break;
        case 3:
        case 4:
          var g2 = d2.stateNode.containerInfo, h2 = Vj(a2);
          Wj(a2, h2, g2);
          break;
        default:
          throw Error(p$4(161));
      }
    } catch (k2) {
      W$4(a2, a2.return, k2);
    }
    a2.flags &= -3;
  }
  b2 & 4096 && (a2.flags &= -4097);
}
function ik(a2, b2, c2) {
  V$2 = a2;
  jk(a2);
}
function jk(a2, b2, c2) {
  for (var d2 = 0 !== (a2.mode & 1); null !== V$2; ) {
    var e2 = V$2, f2 = e2.child;
    if (22 === e2.tag && d2) {
      var g2 = null !== e2.memoizedState || Kj;
      if (!g2) {
        var h2 = e2.alternate, k2 = null !== h2 && null !== h2.memoizedState || U$2;
        h2 = Kj;
        var l2 = U$2;
        Kj = g2;
        if ((U$2 = k2) && !l2)
          for (V$2 = e2; null !== V$2; )
            g2 = V$2, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e2) : null !== k2 ? (k2.return = g2, V$2 = k2) : kk(e2);
        for (; null !== f2; )
          V$2 = f2, jk(f2), f2 = f2.sibling;
        V$2 = e2;
        Kj = h2;
        U$2 = l2;
      }
      lk(a2);
    } else
      0 !== (e2.subtreeFlags & 8772) && null !== f2 ? (f2.return = e2, V$2 = f2) : lk(a2);
  }
}
function lk(a2) {
  for (; null !== V$2; ) {
    var b2 = V$2;
    if (0 !== (b2.flags & 8772)) {
      var c2 = b2.alternate;
      try {
        if (0 !== (b2.flags & 8772))
          switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              U$2 || Rj(5, b2);
              break;
            case 1:
              var d2 = b2.stateNode;
              if (b2.flags & 4 && !U$2)
                if (null === c2)
                  d2.componentDidMount();
                else {
                  var e2 = b2.elementType === b2.type ? c2.memoizedProps : Lg(b2.type, c2.memoizedProps);
                  d2.componentDidUpdate(e2, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                }
              var f2 = b2.updateQueue;
              null !== f2 && ih(b2, f2, d2);
              break;
            case 3:
              var g2 = b2.updateQueue;
              if (null !== g2) {
                c2 = null;
                if (null !== b2.child)
                  switch (b2.child.tag) {
                    case 5:
                      c2 = b2.child.stateNode;
                      break;
                    case 1:
                      c2 = b2.child.stateNode;
                  }
                ih(b2, g2, c2);
              }
              break;
            case 5:
              var h2 = b2.stateNode;
              if (null === c2 && b2.flags & 4) {
                c2 = h2;
                var k2 = b2.memoizedProps;
                switch (b2.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    k2.autoFocus && c2.focus();
                    break;
                  case "img":
                    k2.src && (c2.src = k2.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (null === b2.memoizedState) {
                var l2 = b2.alternate;
                if (null !== l2) {
                  var m2 = l2.memoizedState;
                  if (null !== m2) {
                    var q2 = m2.dehydrated;
                    null !== q2 && bd(q2);
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(p$4(163));
          }
        U$2 || b2.flags & 512 && Sj(b2);
      } catch (r2) {
        W$4(b2, b2.return, r2);
      }
    }
    if (b2 === a2) {
      V$2 = null;
      break;
    }
    c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V$2 = c2;
      break;
    }
    V$2 = b2.return;
  }
}
function hk(a2) {
  for (; null !== V$2; ) {
    var b2 = V$2;
    if (b2 === a2) {
      V$2 = null;
      break;
    }
    var c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V$2 = c2;
      break;
    }
    V$2 = b2.return;
  }
}
function kk(a2) {
  for (; null !== V$2; ) {
    var b2 = V$2;
    try {
      switch (b2.tag) {
        case 0:
        case 11:
        case 15:
          var c2 = b2.return;
          try {
            Rj(4, b2);
          } catch (k2) {
            W$4(b2, c2, k2);
          }
          break;
        case 1:
          var d2 = b2.stateNode;
          if ("function" === typeof d2.componentDidMount) {
            var e2 = b2.return;
            try {
              d2.componentDidMount();
            } catch (k2) {
              W$4(b2, e2, k2);
            }
          }
          var f2 = b2.return;
          try {
            Sj(b2);
          } catch (k2) {
            W$4(b2, f2, k2);
          }
          break;
        case 5:
          var g2 = b2.return;
          try {
            Sj(b2);
          } catch (k2) {
            W$4(b2, g2, k2);
          }
      }
    } catch (k2) {
      W$4(b2, b2.return, k2);
    }
    if (b2 === a2) {
      V$2 = null;
      break;
    }
    var h2 = b2.sibling;
    if (null !== h2) {
      h2.return = b2.return;
      V$2 = h2;
      break;
    }
    V$2 = b2.return;
  }
}
var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K$3 = 0, R$3 = null, Y$2 = null, Z$3 = 0, gj = 0, fj = Uf(0), T$1 = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi$1 = false, Qi$1 = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
function L$3() {
  return 0 !== (K$3 & 6) ? B$3() : -1 !== Bk ? Bk : Bk = B$3();
}
function lh(a2) {
  if (0 === (a2.mode & 1))
    return 1;
  if (0 !== (K$3 & 2) && 0 !== Z$3)
    return Z$3 & -Z$3;
  if (null !== Kg.transition)
    return 0 === Ck && (Ck = yc()), Ck;
  a2 = C$3;
  if (0 !== a2)
    return a2;
  a2 = window.event;
  a2 = void 0 === a2 ? 16 : jd(a2.type);
  return a2;
}
function mh(a2, b2, c2, d2) {
  if (50 < zk)
    throw zk = 0, Ak = null, Error(p$4(185));
  Ac(a2, c2, d2);
  if (0 === (K$3 & 2) || a2 !== R$3)
    a2 === R$3 && (0 === (K$3 & 2) && (rk |= c2), 4 === T$1 && Dk(a2, Z$3)), Ek(a2, d2), 1 === c2 && 0 === K$3 && 0 === (b2.mode & 1) && (Hj = B$3() + 500, fg && jg());
}
function Ek(a2, b2) {
  var c2 = a2.callbackNode;
  wc(a2, b2);
  var d2 = uc(a2, a2 === R$3 ? Z$3 : 0);
  if (0 === d2)
    null !== c2 && bc(c2), a2.callbackNode = null, a2.callbackPriority = 0;
  else if (b2 = d2 & -d2, a2.callbackPriority !== b2) {
    null != c2 && bc(c2);
    if (1 === b2)
      0 === a2.tag ? ig(Fk.bind(null, a2)) : hg(Fk.bind(null, a2)), Jf(function() {
        0 === (K$3 & 6) && jg();
      }), c2 = null;
    else {
      switch (Dc(d2)) {
        case 1:
          c2 = fc;
          break;
        case 4:
          c2 = gc;
          break;
        case 16:
          c2 = hc;
          break;
        case 536870912:
          c2 = jc;
          break;
        default:
          c2 = hc;
      }
      c2 = Gk(c2, Hk.bind(null, a2));
    }
    a2.callbackPriority = b2;
    a2.callbackNode = c2;
  }
}
function Hk(a2, b2) {
  Bk = -1;
  Ck = 0;
  if (0 !== (K$3 & 6))
    throw Error(p$4(327));
  var c2 = a2.callbackNode;
  if (Ik() && a2.callbackNode !== c2)
    return null;
  var d2 = uc(a2, a2 === R$3 ? Z$3 : 0);
  if (0 === d2)
    return null;
  if (0 !== (d2 & 30) || 0 !== (d2 & a2.expiredLanes) || b2)
    b2 = Jk(a2, d2);
  else {
    b2 = d2;
    var e2 = K$3;
    K$3 |= 2;
    var f2 = Kk();
    if (R$3 !== a2 || Z$3 !== b2)
      vk = null, Hj = B$3() + 500, Lk(a2, b2);
    do
      try {
        Mk();
        break;
      } catch (h2) {
        Nk(a2, h2);
      }
    while (1);
    Qg();
    nk.current = f2;
    K$3 = e2;
    null !== Y$2 ? b2 = 0 : (R$3 = null, Z$3 = 0, b2 = T$1);
  }
  if (0 !== b2) {
    2 === b2 && (e2 = xc(a2), 0 !== e2 && (d2 = e2, b2 = Ok(a2, e2)));
    if (1 === b2)
      throw c2 = qk, Lk(a2, 0), Dk(a2, d2), Ek(a2, B$3()), c2;
    if (6 === b2)
      Dk(a2, d2);
    else {
      e2 = a2.current.alternate;
      if (0 === (d2 & 30) && !Pk(e2) && (b2 = Jk(a2, d2), 2 === b2 && (f2 = xc(a2), 0 !== f2 && (d2 = f2, b2 = Ok(a2, f2))), 1 === b2))
        throw c2 = qk, Lk(a2, 0), Dk(a2, d2), Ek(a2, B$3()), c2;
      a2.finishedWork = e2;
      a2.finishedLanes = d2;
      switch (b2) {
        case 0:
        case 1:
          throw Error(p$4(345));
        case 2:
          Qk(a2, uk, vk);
          break;
        case 3:
          Dk(a2, d2);
          if ((d2 & 130023424) === d2 && (b2 = gk + 500 - B$3(), 10 < b2)) {
            if (0 !== uc(a2, 0))
              break;
            e2 = a2.suspendedLanes;
            if ((e2 & d2) !== d2) {
              L$3();
              a2.pingedLanes |= a2.suspendedLanes & e2;
              break;
            }
            a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), b2);
            break;
          }
          Qk(a2, uk, vk);
          break;
        case 4:
          Dk(a2, d2);
          if ((d2 & 4194240) === d2)
            break;
          b2 = a2.eventTimes;
          for (e2 = -1; 0 < d2; ) {
            var g2 = 31 - oc(d2);
            f2 = 1 << g2;
            g2 = b2[g2];
            g2 > e2 && (e2 = g2);
            d2 &= ~f2;
          }
          d2 = e2;
          d2 = B$3() - d2;
          d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * mk(d2 / 1960)) - d2;
          if (10 < d2) {
            a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), d2);
            break;
          }
          Qk(a2, uk, vk);
          break;
        case 5:
          Qk(a2, uk, vk);
          break;
        default:
          throw Error(p$4(329));
      }
    }
  }
  Ek(a2, B$3());
  return a2.callbackNode === c2 ? Hk.bind(null, a2) : null;
}
function Ok(a2, b2) {
  var c2 = tk;
  a2.current.memoizedState.isDehydrated && (Lk(a2, b2).flags |= 256);
  a2 = Jk(a2, b2);
  2 !== a2 && (b2 = uk, uk = c2, null !== b2 && Gj(b2));
  return a2;
}
function Gj(a2) {
  null === uk ? uk = a2 : uk.push.apply(uk, a2);
}
function Pk(a2) {
  for (var b2 = a2; ; ) {
    if (b2.flags & 16384) {
      var c2 = b2.updateQueue;
      if (null !== c2 && (c2 = c2.stores, null !== c2))
        for (var d2 = 0; d2 < c2.length; d2++) {
          var e2 = c2[d2], f2 = e2.getSnapshot;
          e2 = e2.value;
          try {
            if (!He$2(f2(), e2))
              return false;
          } catch (g2) {
            return false;
          }
        }
    }
    c2 = b2.child;
    if (b2.subtreeFlags & 16384 && null !== c2)
      c2.return = b2, b2 = c2;
    else {
      if (b2 === a2)
        break;
      for (; null === b2.sibling; ) {
        if (null === b2.return || b2.return === a2)
          return true;
        b2 = b2.return;
      }
      b2.sibling.return = b2.return;
      b2 = b2.sibling;
    }
  }
  return true;
}
function Dk(a2, b2) {
  b2 &= ~sk;
  b2 &= ~rk;
  a2.suspendedLanes |= b2;
  a2.pingedLanes &= ~b2;
  for (a2 = a2.expirationTimes; 0 < b2; ) {
    var c2 = 31 - oc(b2), d2 = 1 << c2;
    a2[c2] = -1;
    b2 &= ~d2;
  }
}
function Fk(a2) {
  if (0 !== (K$3 & 6))
    throw Error(p$4(327));
  Ik();
  var b2 = uc(a2, 0);
  if (0 === (b2 & 1))
    return Ek(a2, B$3()), null;
  var c2 = Jk(a2, b2);
  if (0 !== a2.tag && 2 === c2) {
    var d2 = xc(a2);
    0 !== d2 && (b2 = d2, c2 = Ok(a2, d2));
  }
  if (1 === c2)
    throw c2 = qk, Lk(a2, 0), Dk(a2, b2), Ek(a2, B$3()), c2;
  if (6 === c2)
    throw Error(p$4(345));
  a2.finishedWork = a2.current.alternate;
  a2.finishedLanes = b2;
  Qk(a2, uk, vk);
  Ek(a2, B$3());
  return null;
}
function Rk(a2, b2) {
  var c2 = K$3;
  K$3 |= 1;
  try {
    return a2(b2);
  } finally {
    K$3 = c2, 0 === K$3 && (Hj = B$3() + 500, fg && jg());
  }
}
function Sk(a2) {
  null !== xk && 0 === xk.tag && 0 === (K$3 & 6) && Ik();
  var b2 = K$3;
  K$3 |= 1;
  var c2 = pk.transition, d2 = C$3;
  try {
    if (pk.transition = null, C$3 = 1, a2)
      return a2();
  } finally {
    C$3 = d2, pk.transition = c2, K$3 = b2, 0 === (K$3 & 6) && jg();
  }
}
function Ij() {
  gj = fj.current;
  E$4(fj);
}
function Lk(a2, b2) {
  a2.finishedWork = null;
  a2.finishedLanes = 0;
  var c2 = a2.timeoutHandle;
  -1 !== c2 && (a2.timeoutHandle = -1, Gf(c2));
  if (null !== Y$2)
    for (c2 = Y$2.return; null !== c2; ) {
      var d2 = c2;
      wg(d2);
      switch (d2.tag) {
        case 1:
          d2 = d2.type.childContextTypes;
          null !== d2 && void 0 !== d2 && $f();
          break;
        case 3:
          Jh();
          E$4(Wf);
          E$4(H$3);
          Oh();
          break;
        case 5:
          Lh(d2);
          break;
        case 4:
          Jh();
          break;
        case 13:
          E$4(M$2);
          break;
        case 19:
          E$4(M$2);
          break;
        case 10:
          Rg(d2.type._context);
          break;
        case 22:
        case 23:
          Ij();
      }
      c2 = c2.return;
    }
  R$3 = a2;
  Y$2 = a2 = wh(a2.current, null);
  Z$3 = gj = b2;
  T$1 = 0;
  qk = null;
  sk = rk = hh = 0;
  uk = tk = null;
  if (null !== Wg) {
    for (b2 = 0; b2 < Wg.length; b2++)
      if (c2 = Wg[b2], d2 = c2.interleaved, null !== d2) {
        c2.interleaved = null;
        var e2 = d2.next, f2 = c2.pending;
        if (null !== f2) {
          var g2 = f2.next;
          f2.next = e2;
          d2.next = g2;
        }
        c2.pending = d2;
      }
    Wg = null;
  }
  return a2;
}
function Nk(a2, b2) {
  do {
    var c2 = Y$2;
    try {
      Qg();
      Ph.current = ai$1;
      if (Sh) {
        for (var d2 = N$4.memoizedState; null !== d2; ) {
          var e2 = d2.queue;
          null !== e2 && (e2.pending = null);
          d2 = d2.next;
        }
        Sh = false;
      }
      Rh = 0;
      P$3 = O$3 = N$4 = null;
      Th = false;
      Uh = 0;
      ok.current = null;
      if (null === c2 || null === c2.return) {
        T$1 = 1;
        qk = b2;
        Y$2 = null;
        break;
      }
      a: {
        var f2 = a2, g2 = c2.return, h2 = c2, k2 = b2;
        b2 = Z$3;
        h2.flags |= 32768;
        if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
          var l2 = k2, m2 = h2, q2 = m2.tag;
          if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
            var r2 = m2.alternate;
            r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
          }
          var y2 = Vi$1(g2);
          if (null !== y2) {
            y2.flags &= -257;
            Wi$1(y2, g2, h2, f2, b2);
            y2.mode & 1 && Ti$1(f2, l2, b2);
            b2 = y2;
            k2 = l2;
            var n9 = b2.updateQueue;
            if (null === n9) {
              var t2 = /* @__PURE__ */ new Set();
              t2.add(k2);
              b2.updateQueue = t2;
            } else
              n9.add(k2);
            break a;
          } else {
            if (0 === (b2 & 1)) {
              Ti$1(f2, l2, b2);
              uj();
              break a;
            }
            k2 = Error(p$4(426));
          }
        } else if (I$2 && h2.mode & 1) {
          var J2 = Vi$1(g2);
          if (null !== J2) {
            0 === (J2.flags & 65536) && (J2.flags |= 256);
            Wi$1(J2, g2, h2, f2, b2);
            Jg(Ki$1(k2, h2));
            break a;
          }
        }
        f2 = k2 = Ki$1(k2, h2);
        4 !== T$1 && (T$1 = 2);
        null === tk ? tk = [f2] : tk.push(f2);
        f2 = g2;
        do {
          switch (f2.tag) {
            case 3:
              f2.flags |= 65536;
              b2 &= -b2;
              f2.lanes |= b2;
              var x2 = Oi$1(f2, k2, b2);
              fh(f2, x2);
              break a;
            case 1:
              h2 = k2;
              var w2 = f2.type, u2 = f2.stateNode;
              if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Si || !Si.has(u2)))) {
                f2.flags |= 65536;
                b2 &= -b2;
                f2.lanes |= b2;
                var F2 = Ri(f2, h2, b2);
                fh(f2, F2);
                break a;
              }
          }
          f2 = f2.return;
        } while (null !== f2);
      }
      Tk(c2);
    } catch (na) {
      b2 = na;
      Y$2 === c2 && null !== c2 && (Y$2 = c2 = c2.return);
      continue;
    }
    break;
  } while (1);
}
function Kk() {
  var a2 = nk.current;
  nk.current = ai$1;
  return null === a2 ? ai$1 : a2;
}
function uj() {
  if (0 === T$1 || 3 === T$1 || 2 === T$1)
    T$1 = 4;
  null === R$3 || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R$3, Z$3);
}
function Jk(a2, b2) {
  var c2 = K$3;
  K$3 |= 2;
  var d2 = Kk();
  if (R$3 !== a2 || Z$3 !== b2)
    vk = null, Lk(a2, b2);
  do
    try {
      Uk();
      break;
    } catch (e2) {
      Nk(a2, e2);
    }
  while (1);
  Qg();
  K$3 = c2;
  nk.current = d2;
  if (null !== Y$2)
    throw Error(p$4(261));
  R$3 = null;
  Z$3 = 0;
  return T$1;
}
function Uk() {
  for (; null !== Y$2; )
    Vk(Y$2);
}
function Mk() {
  for (; null !== Y$2 && !cc(); )
    Vk(Y$2);
}
function Vk(a2) {
  var b2 = Wk(a2.alternate, a2, gj);
  a2.memoizedProps = a2.pendingProps;
  null === b2 ? Tk(a2) : Y$2 = b2;
  ok.current = null;
}
function Tk(a2) {
  var b2 = a2;
  do {
    var c2 = b2.alternate;
    a2 = b2.return;
    if (0 === (b2.flags & 32768)) {
      if (c2 = Fj(c2, b2, gj), null !== c2) {
        Y$2 = c2;
        return;
      }
    } else {
      c2 = Jj(c2, b2);
      if (null !== c2) {
        c2.flags &= 32767;
        Y$2 = c2;
        return;
      }
      if (null !== a2)
        a2.flags |= 32768, a2.subtreeFlags = 0, a2.deletions = null;
      else {
        T$1 = 6;
        Y$2 = null;
        return;
      }
    }
    b2 = b2.sibling;
    if (null !== b2) {
      Y$2 = b2;
      return;
    }
    Y$2 = b2 = a2;
  } while (null !== b2);
  0 === T$1 && (T$1 = 5);
}
function Qk(a2, b2, c2) {
  var d2 = C$3, e2 = pk.transition;
  try {
    pk.transition = null, C$3 = 1, Xk(a2, b2, c2, d2);
  } finally {
    pk.transition = e2, C$3 = d2;
  }
  return null;
}
function Xk(a2, b2, c2, d2) {
  do
    Ik();
  while (null !== xk);
  if (0 !== (K$3 & 6))
    throw Error(p$4(327));
  c2 = a2.finishedWork;
  var e2 = a2.finishedLanes;
  if (null === c2)
    return null;
  a2.finishedWork = null;
  a2.finishedLanes = 0;
  if (c2 === a2.current)
    throw Error(p$4(177));
  a2.callbackNode = null;
  a2.callbackPriority = 0;
  var f2 = c2.lanes | c2.childLanes;
  Bc(a2, f2);
  a2 === R$3 && (Y$2 = R$3 = null, Z$3 = 0);
  0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || wk || (wk = true, Gk(hc, function() {
    Ik();
    return null;
  }));
  f2 = 0 !== (c2.flags & 15990);
  if (0 !== (c2.subtreeFlags & 15990) || f2) {
    f2 = pk.transition;
    pk.transition = null;
    var g2 = C$3;
    C$3 = 1;
    var h2 = K$3;
    K$3 |= 4;
    ok.current = null;
    Pj(a2, c2);
    ek(c2, a2);
    Oe$2(Df);
    dd = !!Cf;
    Df = Cf = null;
    a2.current = c2;
    ik(c2);
    dc();
    K$3 = h2;
    C$3 = g2;
    pk.transition = f2;
  } else
    a2.current = c2;
  wk && (wk = false, xk = a2, yk = e2);
  f2 = a2.pendingLanes;
  0 === f2 && (Si = null);
  mc(c2.stateNode);
  Ek(a2, B$3());
  if (null !== b2)
    for (d2 = a2.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
      e2 = b2[c2], d2(e2.value, { componentStack: e2.stack, digest: e2.digest });
  if (Pi$1)
    throw Pi$1 = false, a2 = Qi$1, Qi$1 = null, a2;
  0 !== (yk & 1) && 0 !== a2.tag && Ik();
  f2 = a2.pendingLanes;
  0 !== (f2 & 1) ? a2 === Ak ? zk++ : (zk = 0, Ak = a2) : zk = 0;
  jg();
  return null;
}
function Ik() {
  if (null !== xk) {
    var a2 = Dc(yk), b2 = pk.transition, c2 = C$3;
    try {
      pk.transition = null;
      C$3 = 16 > a2 ? 16 : a2;
      if (null === xk)
        var d2 = false;
      else {
        a2 = xk;
        xk = null;
        yk = 0;
        if (0 !== (K$3 & 6))
          throw Error(p$4(331));
        var e2 = K$3;
        K$3 |= 4;
        for (V$2 = a2.current; null !== V$2; ) {
          var f2 = V$2, g2 = f2.child;
          if (0 !== (V$2.flags & 16)) {
            var h2 = f2.deletions;
            if (null !== h2) {
              for (var k2 = 0; k2 < h2.length; k2++) {
                var l2 = h2[k2];
                for (V$2 = l2; null !== V$2; ) {
                  var m2 = V$2;
                  switch (m2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(8, m2, f2);
                  }
                  var q2 = m2.child;
                  if (null !== q2)
                    q2.return = m2, V$2 = q2;
                  else
                    for (; null !== V$2; ) {
                      m2 = V$2;
                      var r2 = m2.sibling, y2 = m2.return;
                      Tj(m2);
                      if (m2 === l2) {
                        V$2 = null;
                        break;
                      }
                      if (null !== r2) {
                        r2.return = y2;
                        V$2 = r2;
                        break;
                      }
                      V$2 = y2;
                    }
                }
              }
              var n9 = f2.alternate;
              if (null !== n9) {
                var t2 = n9.child;
                if (null !== t2) {
                  n9.child = null;
                  do {
                    var J2 = t2.sibling;
                    t2.sibling = null;
                    t2 = J2;
                  } while (null !== t2);
                }
              }
              V$2 = f2;
            }
          }
          if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
            g2.return = f2, V$2 = g2;
          else
            b:
              for (; null !== V$2; ) {
                f2 = V$2;
                if (0 !== (f2.flags & 2048))
                  switch (f2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, f2, f2.return);
                  }
                var x2 = f2.sibling;
                if (null !== x2) {
                  x2.return = f2.return;
                  V$2 = x2;
                  break b;
                }
                V$2 = f2.return;
              }
        }
        var w2 = a2.current;
        for (V$2 = w2; null !== V$2; ) {
          g2 = V$2;
          var u2 = g2.child;
          if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
            u2.return = g2, V$2 = u2;
          else
            b:
              for (g2 = w2; null !== V$2; ) {
                h2 = V$2;
                if (0 !== (h2.flags & 2048))
                  try {
                    switch (h2.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Rj(9, h2);
                    }
                  } catch (na) {
                    W$4(h2, h2.return, na);
                  }
                if (h2 === g2) {
                  V$2 = null;
                  break b;
                }
                var F2 = h2.sibling;
                if (null !== F2) {
                  F2.return = h2.return;
                  V$2 = F2;
                  break b;
                }
                V$2 = h2.return;
              }
        }
        K$3 = e2;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot)
          try {
            lc.onPostCommitFiberRoot(kc, a2);
          } catch (na) {
          }
        d2 = true;
      }
      return d2;
    } finally {
      C$3 = c2, pk.transition = b2;
    }
  }
  return false;
}
function Yk(a2, b2, c2) {
  b2 = Ki$1(c2, b2);
  b2 = Oi$1(a2, b2, 1);
  a2 = dh(a2, b2, 1);
  b2 = L$3();
  null !== a2 && (Ac(a2, 1, b2), Ek(a2, b2));
}
function W$4(a2, b2, c2) {
  if (3 === a2.tag)
    Yk(a2, a2, c2);
  else
    for (; null !== b2; ) {
      if (3 === b2.tag) {
        Yk(b2, a2, c2);
        break;
      } else if (1 === b2.tag) {
        var d2 = b2.stateNode;
        if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Si || !Si.has(d2))) {
          a2 = Ki$1(c2, a2);
          a2 = Ri(b2, a2, 1);
          b2 = dh(b2, a2, 1);
          a2 = L$3();
          null !== b2 && (Ac(b2, 1, a2), Ek(b2, a2));
          break;
        }
      }
      b2 = b2.return;
    }
}
function Ui$1(a2, b2, c2) {
  var d2 = a2.pingCache;
  null !== d2 && d2.delete(b2);
  b2 = L$3();
  a2.pingedLanes |= a2.suspendedLanes & c2;
  R$3 === a2 && (Z$3 & c2) === c2 && (4 === T$1 || 3 === T$1 && (Z$3 & 130023424) === Z$3 && 500 > B$3() - gk ? Lk(a2, 0) : sk |= c2);
  Ek(a2, b2);
}
function Zk(a2, b2) {
  0 === b2 && (0 === (a2.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c2 = L$3();
  a2 = Zg(a2, b2);
  null !== a2 && (Ac(a2, b2, c2), Ek(a2, c2));
}
function vj(a2) {
  var b2 = a2.memoizedState, c2 = 0;
  null !== b2 && (c2 = b2.retryLane);
  Zk(a2, c2);
}
function ck(a2, b2) {
  var c2 = 0;
  switch (a2.tag) {
    case 13:
      var d2 = a2.stateNode;
      var e2 = a2.memoizedState;
      null !== e2 && (c2 = e2.retryLane);
      break;
    case 19:
      d2 = a2.stateNode;
      break;
    default:
      throw Error(p$4(314));
  }
  null !== d2 && d2.delete(b2);
  Zk(a2, c2);
}
var Wk;
Wk = function(a2, b2, c2) {
  if (null !== a2)
    if (a2.memoizedProps !== b2.pendingProps || Wf.current)
      Ug = true;
    else {
      if (0 === (a2.lanes & c2) && 0 === (b2.flags & 128))
        return Ug = false, zj(a2, b2, c2);
      Ug = 0 !== (a2.flags & 131072) ? true : false;
    }
  else
    Ug = false, I$2 && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
  b2.lanes = 0;
  switch (b2.tag) {
    case 2:
      var d2 = b2.type;
      jj(a2, b2);
      a2 = b2.pendingProps;
      var e2 = Yf(b2, H$3.current);
      Tg(b2, c2);
      e2 = Xh(null, b2, d2, a2, e2, c2);
      var f2 = bi$1();
      b2.flags |= 1;
      "object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null, ah(b2), e2.updater = nh, b2.stateNode = e2, e2._reactInternals = b2, rh(b2, d2, a2, c2), b2 = kj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I$2 && f2 && vg(b2), Yi(null, b2, e2, c2), b2 = b2.child);
      return b2;
    case 16:
      d2 = b2.elementType;
      a: {
        jj(a2, b2);
        a2 = b2.pendingProps;
        e2 = d2._init;
        d2 = e2(d2._payload);
        b2.type = d2;
        e2 = b2.tag = $k(d2);
        a2 = Lg(d2, a2);
        switch (e2) {
          case 0:
            b2 = dj(null, b2, d2, a2, c2);
            break a;
          case 1:
            b2 = ij(null, b2, d2, a2, c2);
            break a;
          case 11:
            b2 = Zi(null, b2, d2, a2, c2);
            break a;
          case 14:
            b2 = aj(null, b2, d2, Lg(d2.type, a2), c2);
            break a;
        }
        throw Error(p$4(
          306,
          d2,
          ""
        ));
      }
      return b2;
    case 0:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), dj(a2, b2, d2, e2, c2);
    case 1:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), ij(a2, b2, d2, e2, c2);
    case 3:
      a: {
        lj(b2);
        if (null === a2)
          throw Error(p$4(387));
        d2 = b2.pendingProps;
        f2 = b2.memoizedState;
        e2 = f2.element;
        bh(a2, b2);
        gh(b2, d2, null, c2);
        var g2 = b2.memoizedState;
        d2 = g2.element;
        if (f2.isDehydrated)
          if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
            e2 = Ki$1(Error(p$4(423)), b2);
            b2 = mj(a2, b2, d2, c2, e2);
            break a;
          } else if (d2 !== e2) {
            e2 = Ki$1(Error(p$4(424)), b2);
            b2 = mj(a2, b2, d2, c2, e2);
            break a;
          } else
            for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I$2 = true, zg = null, c2 = Ch(b2, null, d2, c2), b2.child = c2; c2; )
              c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
        else {
          Ig();
          if (d2 === e2) {
            b2 = $i$1(a2, b2, c2);
            break a;
          }
          Yi(a2, b2, d2, c2);
        }
        b2 = b2.child;
      }
      return b2;
    case 5:
      return Kh(b2), null === a2 && Eg(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = null !== a2 ? a2.memoizedProps : null, g2 = e2.children, Ef(d2, e2) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), hj(a2, b2), Yi(a2, b2, g2, c2), b2.child;
    case 6:
      return null === a2 && Eg(b2), null;
    case 13:
      return pj(a2, b2, c2);
    case 4:
      return Ih(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a2 ? b2.child = Bh(b2, null, d2, c2) : Yi(a2, b2, d2, c2), b2.child;
    case 11:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), Zi(a2, b2, d2, e2, c2);
    case 7:
      return Yi(a2, b2, b2.pendingProps, c2), b2.child;
    case 8:
      return Yi(a2, b2, b2.pendingProps.children, c2), b2.child;
    case 12:
      return Yi(a2, b2, b2.pendingProps.children, c2), b2.child;
    case 10:
      a: {
        d2 = b2.type._context;
        e2 = b2.pendingProps;
        f2 = b2.memoizedProps;
        g2 = e2.value;
        G$2(Mg, d2._currentValue);
        d2._currentValue = g2;
        if (null !== f2)
          if (He$2(f2.value, g2)) {
            if (f2.children === e2.children && !Wf.current) {
              b2 = $i$1(a2, b2, c2);
              break a;
            }
          } else
            for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
              var h2 = f2.dependencies;
              if (null !== h2) {
                g2 = f2.child;
                for (var k2 = h2.firstContext; null !== k2; ) {
                  if (k2.context === d2) {
                    if (1 === f2.tag) {
                      k2 = ch(-1, c2 & -c2);
                      k2.tag = 2;
                      var l2 = f2.updateQueue;
                      if (null !== l2) {
                        l2 = l2.shared;
                        var m2 = l2.pending;
                        null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                        l2.pending = k2;
                      }
                    }
                    f2.lanes |= c2;
                    k2 = f2.alternate;
                    null !== k2 && (k2.lanes |= c2);
                    Sg(
                      f2.return,
                      c2,
                      b2
                    );
                    h2.lanes |= c2;
                    break;
                  }
                  k2 = k2.next;
                }
              } else if (10 === f2.tag)
                g2 = f2.type === b2.type ? null : f2.child;
              else if (18 === f2.tag) {
                g2 = f2.return;
                if (null === g2)
                  throw Error(p$4(341));
                g2.lanes |= c2;
                h2 = g2.alternate;
                null !== h2 && (h2.lanes |= c2);
                Sg(g2, c2, b2);
                g2 = f2.sibling;
              } else
                g2 = f2.child;
              if (null !== g2)
                g2.return = f2;
              else
                for (g2 = f2; null !== g2; ) {
                  if (g2 === b2) {
                    g2 = null;
                    break;
                  }
                  f2 = g2.sibling;
                  if (null !== f2) {
                    f2.return = g2.return;
                    g2 = f2;
                    break;
                  }
                  g2 = g2.return;
                }
              f2 = g2;
            }
        Yi(a2, b2, e2.children, c2);
        b2 = b2.child;
      }
      return b2;
    case 9:
      return e2 = b2.type, d2 = b2.pendingProps.children, Tg(b2, c2), e2 = Vg(e2), d2 = d2(e2), b2.flags |= 1, Yi(a2, b2, d2, c2), b2.child;
    case 14:
      return d2 = b2.type, e2 = Lg(d2, b2.pendingProps), e2 = Lg(d2.type, e2), aj(a2, b2, d2, e2, c2);
    case 15:
      return cj(a2, b2, b2.type, b2.pendingProps, c2);
    case 17:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), jj(a2, b2), b2.tag = 1, Zf(d2) ? (a2 = true, cg(b2)) : a2 = false, Tg(b2, c2), ph(b2, d2, e2), rh(b2, d2, e2, c2), kj(null, b2, d2, true, a2, c2);
    case 19:
      return yj(a2, b2, c2);
    case 22:
      return ej(a2, b2, c2);
  }
  throw Error(p$4(156, b2.tag));
};
function Gk(a2, b2) {
  return ac(a2, b2);
}
function al(a2, b2, c2, d2) {
  this.tag = a2;
  this.key = c2;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b2;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d2;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a2, b2, c2, d2) {
  return new al(a2, b2, c2, d2);
}
function bj(a2) {
  a2 = a2.prototype;
  return !(!a2 || !a2.isReactComponent);
}
function $k(a2) {
  if ("function" === typeof a2)
    return bj(a2) ? 1 : 0;
  if (void 0 !== a2 && null !== a2) {
    a2 = a2.$$typeof;
    if (a2 === Da)
      return 11;
    if (a2 === Ga)
      return 14;
  }
  return 2;
}
function wh(a2, b2) {
  var c2 = a2.alternate;
  null === c2 ? (c2 = Bg(a2.tag, b2, a2.key, a2.mode), c2.elementType = a2.elementType, c2.type = a2.type, c2.stateNode = a2.stateNode, c2.alternate = a2, a2.alternate = c2) : (c2.pendingProps = b2, c2.type = a2.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
  c2.flags = a2.flags & 14680064;
  c2.childLanes = a2.childLanes;
  c2.lanes = a2.lanes;
  c2.child = a2.child;
  c2.memoizedProps = a2.memoizedProps;
  c2.memoizedState = a2.memoizedState;
  c2.updateQueue = a2.updateQueue;
  b2 = a2.dependencies;
  c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
  c2.sibling = a2.sibling;
  c2.index = a2.index;
  c2.ref = a2.ref;
  return c2;
}
function yh(a2, b2, c2, d2, e2, f2) {
  var g2 = 2;
  d2 = a2;
  if ("function" === typeof a2)
    bj(a2) && (g2 = 1);
  else if ("string" === typeof a2)
    g2 = 5;
  else
    a:
      switch (a2) {
        case ya:
          return Ah(c2.children, e2, f2, b2);
        case za:
          g2 = 8;
          e2 |= 8;
          break;
        case Aa:
          return a2 = Bg(12, c2, b2, e2 | 2), a2.elementType = Aa, a2.lanes = f2, a2;
        case Ea:
          return a2 = Bg(13, c2, b2, e2), a2.elementType = Ea, a2.lanes = f2, a2;
        case Fa:
          return a2 = Bg(19, c2, b2, e2), a2.elementType = Fa, a2.lanes = f2, a2;
        case Ia:
          return qj(c2, e2, f2, b2);
        default:
          if ("object" === typeof a2 && null !== a2)
            switch (a2.$$typeof) {
              case Ba:
                g2 = 10;
                break a;
              case Ca:
                g2 = 9;
                break a;
              case Da:
                g2 = 11;
                break a;
              case Ga:
                g2 = 14;
                break a;
              case Ha:
                g2 = 16;
                d2 = null;
                break a;
            }
          throw Error(p$4(130, null == a2 ? a2 : typeof a2, ""));
      }
  b2 = Bg(g2, c2, b2, e2);
  b2.elementType = a2;
  b2.type = d2;
  b2.lanes = f2;
  return b2;
}
function Ah(a2, b2, c2, d2) {
  a2 = Bg(7, a2, d2, b2);
  a2.lanes = c2;
  return a2;
}
function qj(a2, b2, c2, d2) {
  a2 = Bg(22, a2, d2, b2);
  a2.elementType = Ia;
  a2.lanes = c2;
  a2.stateNode = { isHidden: false };
  return a2;
}
function xh(a2, b2, c2) {
  a2 = Bg(6, a2, null, b2);
  a2.lanes = c2;
  return a2;
}
function zh(a2, b2, c2) {
  b2 = Bg(4, null !== a2.children ? a2.children : [], a2.key, b2);
  b2.lanes = c2;
  b2.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation };
  return b2;
}
function bl(a2, b2, c2, d2, e2) {
  this.tag = b2;
  this.containerInfo = a2;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d2;
  this.onRecoverableError = e2;
  this.mutableSourceEagerHydrationData = null;
}
function cl(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  a2 = new bl(a2, b2, c2, h2, k2);
  1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
  f2 = Bg(3, null, null, b2);
  a2.current = f2;
  f2.stateNode = a2;
  f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
  ah(f2);
  return a2;
}
function dl(a2, b2, c2) {
  var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a2, containerInfo: b2, implementation: c2 };
}
function el(a2) {
  if (!a2)
    return Vf;
  a2 = a2._reactInternals;
  a: {
    if (Vb(a2) !== a2 || 1 !== a2.tag)
      throw Error(p$4(170));
    var b2 = a2;
    do {
      switch (b2.tag) {
        case 3:
          b2 = b2.stateNode.context;
          break a;
        case 1:
          if (Zf(b2.type)) {
            b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b2 = b2.return;
    } while (null !== b2);
    throw Error(p$4(171));
  }
  if (1 === a2.tag) {
    var c2 = a2.type;
    if (Zf(c2))
      return bg(a2, c2, b2);
  }
  return b2;
}
function fl(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  a2 = cl(c2, d2, true, a2, e2, f2, g2, h2, k2);
  a2.context = el(null);
  c2 = a2.current;
  d2 = L$3();
  e2 = lh(c2);
  f2 = ch(d2, e2);
  f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
  dh(c2, f2, e2);
  a2.current.lanes = e2;
  Ac(a2, e2, d2);
  Ek(a2, d2);
  return a2;
}
function gl(a2, b2, c2, d2) {
  var e2 = b2.current, f2 = L$3(), g2 = lh(e2);
  c2 = el(c2);
  null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
  b2 = ch(f2, g2);
  b2.payload = { element: a2 };
  d2 = void 0 === d2 ? null : d2;
  null !== d2 && (b2.callback = d2);
  a2 = dh(e2, b2, g2);
  null !== a2 && (mh(a2, e2, g2, f2), eh(a2, e2, g2));
  return g2;
}
function hl(a2) {
  a2 = a2.current;
  if (!a2.child)
    return null;
  switch (a2.child.tag) {
    case 5:
      return a2.child.stateNode;
    default:
      return a2.child.stateNode;
  }
}
function il(a2, b2) {
  a2 = a2.memoizedState;
  if (null !== a2 && null !== a2.dehydrated) {
    var c2 = a2.retryLane;
    a2.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
  }
}
function jl(a2, b2) {
  il(a2, b2);
  (a2 = a2.alternate) && il(a2, b2);
}
function kl() {
  return null;
}
var ll = "function" === typeof reportError ? reportError : function(a2) {
  console.error(a2);
};
function ml(a2) {
  this._internalRoot = a2;
}
nl.prototype.render = ml.prototype.render = function(a2) {
  var b2 = this._internalRoot;
  if (null === b2)
    throw Error(p$4(409));
  gl(a2, b2, null, null);
};
nl.prototype.unmount = ml.prototype.unmount = function() {
  var a2 = this._internalRoot;
  if (null !== a2) {
    this._internalRoot = null;
    var b2 = a2.containerInfo;
    Sk(function() {
      gl(null, a2, null, null);
    });
    b2[uf] = null;
  }
};
function nl(a2) {
  this._internalRoot = a2;
}
nl.prototype.unstable_scheduleHydration = function(a2) {
  if (a2) {
    var b2 = Hc();
    a2 = { blockedOn: null, target: a2, priority: b2 };
    for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++)
      ;
    Qc.splice(c2, 0, a2);
    0 === c2 && Vc(a2);
  }
};
function ol(a2) {
  return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType);
}
function pl(a2) {
  return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType && (8 !== a2.nodeType || " react-mount-point-unstable " !== a2.nodeValue));
}
function ql() {
}
function rl(a2, b2, c2, d2, e2) {
  if (e2) {
    if ("function" === typeof d2) {
      var f2 = d2;
      d2 = function() {
        var a3 = hl(g2);
        f2.call(a3);
      };
    }
    var g2 = fl(b2, d2, a2, 0, null, false, false, "", ql);
    a2._reactRootContainer = g2;
    a2[uf] = g2.current;
    sf(8 === a2.nodeType ? a2.parentNode : a2);
    Sk();
    return g2;
  }
  for (; e2 = a2.lastChild; )
    a2.removeChild(e2);
  if ("function" === typeof d2) {
    var h2 = d2;
    d2 = function() {
      var a3 = hl(k2);
      h2.call(a3);
    };
  }
  var k2 = cl(a2, 0, false, null, null, false, false, "", ql);
  a2._reactRootContainer = k2;
  a2[uf] = k2.current;
  sf(8 === a2.nodeType ? a2.parentNode : a2);
  Sk(function() {
    gl(b2, k2, c2, d2);
  });
  return k2;
}
function sl(a2, b2, c2, d2, e2) {
  var f2 = c2._reactRootContainer;
  if (f2) {
    var g2 = f2;
    if ("function" === typeof e2) {
      var h2 = e2;
      e2 = function() {
        var a3 = hl(g2);
        h2.call(a3);
      };
    }
    gl(b2, g2, a2, e2);
  } else
    g2 = rl(c2, b2, a2, e2, d2);
  return hl(g2);
}
Ec = function(a2) {
  switch (a2.tag) {
    case 3:
      var b2 = a2.stateNode;
      if (b2.current.memoizedState.isDehydrated) {
        var c2 = tc(b2.pendingLanes);
        0 !== c2 && (Cc(b2, c2 | 1), Ek(b2, B$3()), 0 === (K$3 & 6) && (Hj = B$3() + 500, jg()));
      }
      break;
    case 13:
      Sk(function() {
        var b3 = Zg(a2, 1);
        if (null !== b3) {
          var c3 = L$3();
          mh(b3, a2, 1, c3);
        }
      }), jl(a2, 1);
  }
};
Fc = function(a2) {
  if (13 === a2.tag) {
    var b2 = Zg(a2, 134217728);
    if (null !== b2) {
      var c2 = L$3();
      mh(b2, a2, 134217728, c2);
    }
    jl(a2, 134217728);
  }
};
Gc = function(a2) {
  if (13 === a2.tag) {
    var b2 = lh(a2), c2 = Zg(a2, b2);
    if (null !== c2) {
      var d2 = L$3();
      mh(c2, a2, b2, d2);
    }
    jl(a2, b2);
  }
};
Hc = function() {
  return C$3;
};
Ic = function(a2, b2) {
  var c2 = C$3;
  try {
    return C$3 = a2, b2();
  } finally {
    C$3 = c2;
  }
};
yb = function(a2, b2, c2) {
  switch (b2) {
    case "input":
      bb(a2, c2);
      b2 = c2.name;
      if ("radio" === c2.type && null != b2) {
        for (c2 = a2; c2.parentNode; )
          c2 = c2.parentNode;
        c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
        for (b2 = 0; b2 < c2.length; b2++) {
          var d2 = c2[b2];
          if (d2 !== a2 && d2.form === a2.form) {
            var e2 = Db(d2);
            if (!e2)
              throw Error(p$4(90));
            Wa(d2);
            bb(d2, e2);
          }
        }
      }
      break;
    case "textarea":
      ib(a2, c2);
      break;
    case "select":
      b2 = c2.value, null != b2 && fb(a2, !!c2.multiple, b2, false);
  }
};
Gb = Rk;
Hb = Sk;
var tl = { usingClientEntryPoint: false, Events: [Cb, ue$2, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
  a2 = Zb(a2);
  return null === a2 ? null : a2.stateNode;
}, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!wl.isDisabled && wl.supportsFiber)
    try {
      kc = wl.inject(vl), lc = wl;
    } catch (a2) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
reactDom_production_min.createPortal = function(a2, b2) {
  var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!ol(b2))
    throw Error(p$4(200));
  return dl(a2, b2, null, c2);
};
reactDom_production_min.createRoot = function(a2, b2) {
  if (!ol(a2))
    throw Error(p$4(299));
  var c2 = false, d2 = "", e2 = ll;
  null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e2 = b2.onRecoverableError));
  b2 = cl(a2, 1, false, null, null, c2, false, d2, e2);
  a2[uf] = b2.current;
  sf(8 === a2.nodeType ? a2.parentNode : a2);
  return new ml(b2);
};
reactDom_production_min.findDOMNode = function(a2) {
  if (null == a2)
    return null;
  if (1 === a2.nodeType)
    return a2;
  var b2 = a2._reactInternals;
  if (void 0 === b2) {
    if ("function" === typeof a2.render)
      throw Error(p$4(188));
    a2 = Object.keys(a2).join(",");
    throw Error(p$4(268, a2));
  }
  a2 = Zb(b2);
  a2 = null === a2 ? null : a2.stateNode;
  return a2;
};
reactDom_production_min.flushSync = function(a2) {
  return Sk(a2);
};
reactDom_production_min.hydrate = function(a2, b2, c2) {
  if (!pl(b2))
    throw Error(p$4(200));
  return sl(null, a2, b2, true, c2);
};
reactDom_production_min.hydrateRoot = function(a2, b2, c2) {
  if (!ol(a2))
    throw Error(p$4(405));
  var d2 = null != c2 && c2.hydratedSources || null, e2 = false, f2 = "", g2 = ll;
  null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e2 = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
  b2 = fl(b2, null, a2, 1, null != c2 ? c2 : null, e2, false, f2, g2);
  a2[uf] = b2.current;
  sf(a2);
  if (d2)
    for (a2 = 0; a2 < d2.length; a2++)
      c2 = d2[a2], e2 = c2._getVersion, e2 = e2(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e2] : b2.mutableSourceEagerHydrationData.push(
        c2,
        e2
      );
  return new nl(b2);
};
reactDom_production_min.render = function(a2, b2, c2) {
  if (!pl(b2))
    throw Error(p$4(200));
  return sl(null, a2, b2, false, c2);
};
reactDom_production_min.unmountComponentAtNode = function(a2) {
  if (!pl(a2))
    throw Error(p$4(40));
  return a2._reactRootContainer ? (Sk(function() {
    sl(null, null, a2, false, function() {
      a2._reactRootContainer = null;
      a2[uf] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Rk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a2, b2, c2, d2) {
  if (!pl(c2))
    throw Error(p$4(200));
  if (null == a2 || void 0 === a2._reactInternals)
    throw Error(p$4(38));
  return sl(a2, b2, c2, false, d2);
};
reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
function createStore(createState) {
  let state;
  const listeners2 = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace ? nextState : Object.assign({}, state, nextState);
      listeners2.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners2.add(listenerToAdd);
    return () => listeners2.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners2.add(listener);
    return () => listeners2.delete(listener);
  };
  const destroy = () => listeners2.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}
const isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
const useIsomorphicLayoutEffect = isSSR ? react.exports.useEffect : react.exports.useLayoutEffect;
function create$1(createState) {
  const api = typeof createState === "function" ? createStore(createState) : createState;
  const useStore = (selector = api.getState, equalityFn = Object.is) => {
    const [, forceUpdate] = react.exports.useReducer((c2) => c2 + 1, 0);
    const state = api.getState();
    const stateRef = react.exports.useRef(state);
    const selectorRef = react.exports.useRef(selector);
    const equalityFnRef = react.exports.useRef(equalityFn);
    const erroredRef = react.exports.useRef(false);
    const currentSliceRef = react.exports.useRef();
    if (currentSliceRef.current === void 0) {
      currentSliceRef.current = selector(state);
    }
    let newStateSlice;
    let hasNewStateSlice = false;
    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
      newStateSlice = selector(state);
      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
    }
    useIsomorphicLayoutEffect(() => {
      if (hasNewStateSlice) {
        currentSliceRef.current = newStateSlice;
      }
      stateRef.current = state;
      selectorRef.current = selector;
      equalityFnRef.current = equalityFn;
      erroredRef.current = false;
    });
    const stateBeforeSubscriptionRef = react.exports.useRef(state);
    useIsomorphicLayoutEffect(() => {
      const listener = () => {
        try {
          const nextState = api.getState();
          const nextStateSlice = selectorRef.current(nextState);
          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
            stateRef.current = nextState;
            currentSliceRef.current = nextStateSlice;
            forceUpdate();
          }
        } catch (error2) {
          erroredRef.current = true;
          forceUpdate();
        }
      };
      const unsubscribe = api.subscribe(listener);
      if (api.getState() !== stateBeforeSubscriptionRef.current) {
        listener();
      }
      return unsubscribe;
    }, []);
    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
    react.exports.useDebugValue(sliceToReturn);
    return sliceToReturn;
  };
  Object.assign(useStore, api);
  useStore[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const items = [useStore, api];
    return {
      next() {
        const done = items.length <= 0;
        return { value: items.shift(), done };
      }
    };
  };
  return useStore;
}
function defaultEqualityCheck(a2, b2) {
  return a2 === b2;
}
function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
  if (prev === null || next === null || prev.length !== next.length) {
    return false;
  }
  var length = prev.length;
  for (var i2 = 0; i2 < length; i2++) {
    if (!equalityCheck(prev[i2], next[i2])) {
      return false;
    }
  }
  return true;
}
function defaultMemoize(func) {
  var equalityCheck = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultEqualityCheck;
  var lastArgs = null;
  var lastResult = null;
  return function() {
    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
      lastResult = func.apply(null, arguments);
    }
    lastArgs = arguments;
    return lastResult;
  };
}
function getDependencies(funcs) {
  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
  if (!dependencies.every(function(dep) {
    return typeof dep === "function";
  })) {
    var dependencyTypes = dependencies.map(function(dep) {
      return typeof dep;
    }).join(", ");
    throw new Error("Selector creators expect all input-selectors to be functions, " + ("instead received the following types: [" + dependencyTypes + "]"));
  }
  return dependencies;
}
function createSelectorCreator(memoize) {
  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    memoizeOptions[_key - 1] = arguments[_key];
  }
  return function() {
    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }
    var recomputations = 0;
    var resultFunc = funcs.pop();
    var dependencies = getDependencies(funcs);
    var memoizedResultFunc = memoize.apply(void 0, [function() {
      recomputations++;
      return resultFunc.apply(null, arguments);
    }].concat(memoizeOptions));
    var selector = memoize(function() {
      var params = [];
      var length = dependencies.length;
      for (var i2 = 0; i2 < length; i2++) {
        params.push(dependencies[i2].apply(null, arguments));
      }
      return memoizedResultFunc.apply(null, params);
    });
    selector.resultFunc = resultFunc;
    selector.dependencies = dependencies;
    selector.recomputations = function() {
      return recomputations;
    };
    selector.resetRecomputations = function() {
      return recomputations = 0;
    };
    return selector;
  };
}
var createSelector = createSelectorCreator(defaultMemoize);
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate(uuid) {
  return typeof uuid === "string" && REGEX.test(uuid);
}
var byteToHex = [];
for (var i$2 = 0; i$2 < 256; ++i$2) {
  byteToHex.push((i$2 + 256).toString(16).substr(1));
}
function stringify$1(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i2 = 0; i2 < 16; ++i2) {
      buf[offset + i2] = rnds[i2];
    }
    return buf;
  }
  return stringify$1(rnds);
}
var uaParser = { exports: {} };
(function(module, exports) {
  (function(window2, undefined$1) {
    var LIBVERSION = "1.0.35", EMPTY2 = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 350;
    var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS";
    var extend = function(regexes2, extensions) {
      var mergedRegexes = {};
      for (var i2 in regexes2) {
        if (extensions[i2] && extensions[i2].length % 2 === 0) {
          mergedRegexes[i2] = extensions[i2].concat(regexes2[i2]);
        } else {
          mergedRegexes[i2] = regexes2[i2];
        }
      }
      return mergedRegexes;
    }, enumerize = function(arr) {
      var enums = {};
      for (var i2 = 0; i2 < arr.length; i2++) {
        enums[arr[i2].toUpperCase()] = arr[i2];
      }
      return enums;
    }, has = function(str1, str2) {
      return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
    }, lowerize = function(str) {
      return str.toLowerCase();
    }, majorize = function(version) {
      return typeof version === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY2).split(".")[0] : undefined$1;
    }, trim = function(str, len) {
      if (typeof str === STR_TYPE) {
        str = str.replace(/^\s\s*/, EMPTY2);
        return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
      }
    };
    var rgxMapper = function(ua2, arrays) {
      var i2 = 0, j2, k2, p2, q2, matches, match;
      while (i2 < arrays.length && !matches) {
        var regex = arrays[i2], props = arrays[i2 + 1];
        j2 = k2 = 0;
        while (j2 < regex.length && !matches) {
          if (!regex[j2]) {
            break;
          }
          matches = regex[j2++].exec(ua2);
          if (!!matches) {
            for (p2 = 0; p2 < props.length; p2++) {
              match = matches[++k2];
              q2 = props[p2];
              if (typeof q2 === OBJ_TYPE && q2.length > 0) {
                if (q2.length === 2) {
                  if (typeof q2[1] == FUNC_TYPE) {
                    this[q2[0]] = q2[1].call(this, match);
                  } else {
                    this[q2[0]] = q2[1];
                  }
                } else if (q2.length === 3) {
                  if (typeof q2[1] === FUNC_TYPE && !(q2[1].exec && q2[1].test)) {
                    this[q2[0]] = match ? q2[1].call(this, match, q2[2]) : undefined$1;
                  } else {
                    this[q2[0]] = match ? match.replace(q2[1], q2[2]) : undefined$1;
                  }
                } else if (q2.length === 4) {
                  this[q2[0]] = match ? q2[3].call(this, match.replace(q2[1], q2[2])) : undefined$1;
                }
              } else {
                this[q2] = match ? match : undefined$1;
              }
            }
          }
        }
        i2 += 2;
      }
    }, strMapper = function(str, map2) {
      for (var i2 in map2) {
        if (typeof map2[i2] === OBJ_TYPE && map2[i2].length > 0) {
          for (var j2 = 0; j2 < map2[i2].length; j2++) {
            if (has(map2[i2][j2], str)) {
              return i2 === UNKNOWN ? undefined$1 : i2;
            }
          }
        } else if (has(map2[i2], str)) {
          return i2 === UNKNOWN ? undefined$1 : i2;
        }
      }
      return str;
    };
    var oldSafariMap = {
      "1.0": "/8",
      "1.2": "/1",
      "1.3": "/3",
      "2.0": "/412",
      "2.0.2": "/416",
      "2.0.3": "/417",
      "2.0.4": "/419",
      "?": "/"
    }, windowsVersionMap = {
      "ME": "4.90",
      "NT 3.11": "NT3.51",
      "NT 4.0": "NT4.0",
      "2000": "NT 5.0",
      "XP": ["NT 5.1", "NT 5.2"],
      "Vista": "NT 6.0",
      "7": "NT 6.1",
      "8": "NT 6.2",
      "8.1": "NT 6.3",
      "10": ["NT 6.4", "NT 10.0"],
      "RT": "ARM"
    };
    var regexes = {
      browser: [
        [
          /\b(?:crmo|crios)\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "Chrome"]],
        [
          /edg(?:e|ios|a)?\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "Edge"]],
        [
          /(opera mini)\/([-\w\.]+)/i,
          /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
          /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
        ],
        [NAME, VERSION],
        [
          /opios[\/ ]+([\w\.]+)/i
        ],
        [VERSION, [NAME, OPERA + " Mini"]],
        [
          /\bopr\/([\w\.]+)/i
        ],
        [VERSION, [NAME, OPERA]],
        [
          /(kindle)\/([\w\.]+)/i,
          /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
          /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
          /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
          /(?:ms|\()(ie) ([\w\.]+)/i,
          /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
          /(heytap|ovi)browser\/([\d\.]+)/i,
          /(weibo)__([\d\.]+)/i
        ],
        [NAME, VERSION],
        [
          /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i
        ],
        [VERSION, [NAME, "UC" + BROWSER]],
        [
          /microm.+\bqbcore\/([\w\.]+)/i,
          /\bqbcore\/([\w\.]+).+microm/i
        ],
        [VERSION, [NAME, "WeChat(Win) Desktop"]],
        [
          /micromessenger\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "WeChat"]],
        [
          /konqueror\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "Konqueror"]],
        [
          /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i
        ],
        [VERSION, [NAME, "IE"]],
        [
          /ya(?:search)?browser\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "Yandex"]],
        [
          /(avast|avg)\/([\w\.]+)/i
        ],
        [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION],
        [
          /\bfocus\/([\w\.]+)/i
        ],
        [VERSION, [NAME, FIREFOX + " Focus"]],
        [
          /\bopt\/([\w\.]+)/i
        ],
        [VERSION, [NAME, OPERA + " Touch"]],
        [
          /coc_coc\w+\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "Coc Coc"]],
        [
          /dolfin\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "Dolphin"]],
        [
          /coast\/([\w\.]+)/i
        ],
        [VERSION, [NAME, OPERA + " Coast"]],
        [
          /miuibrowser\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "MIUI " + BROWSER]],
        [
          /fxios\/([-\w\.]+)/i
        ],
        [VERSION, [NAME, FIREFOX]],
        [
          /\bqihu|(qi?ho?o?|360)browser/i
        ],
        [[NAME, "360 " + BROWSER]],
        [
          /(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i
        ],
        [[NAME, /(.+)/, "$1 " + BROWSER], VERSION],
        [
          /(comodo_dragon)\/([\w\.]+)/i
        ],
        [[NAME, /_/g, " "], VERSION],
        [
          /(electron)\/([\w\.]+) safari/i,
          /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
          /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i
        ],
        [NAME, VERSION],
        [
          /(metasr)[\/ ]?([\w\.]+)/i,
          /(lbbrowser)/i,
          /\[(linkedin)app\]/i
        ],
        [NAME],
        [
          /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
        ],
        [[NAME, FACEBOOK], VERSION],
        [
          /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
          /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
          /safari (line)\/([\w\.]+)/i,
          /\b(line)\/([\w\.]+)\/iab/i,
          /(chromium|instagram)[\/ ]([-\w\.]+)/i
        ],
        [NAME, VERSION],
        [
          /\bgsa\/([\w\.]+) .*safari\//i
        ],
        [VERSION, [NAME, "GSA"]],
        [
          /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i
        ],
        [VERSION, [NAME, "TikTok"]],
        [
          /headlesschrome(?:\/([\w\.]+)| )/i
        ],
        [VERSION, [NAME, CHROME + " Headless"]],
        [
          / wv\).+(chrome)\/([\w\.]+)/i
        ],
        [[NAME, CHROME + " WebView"], VERSION],
        [
          /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i
        ],
        [VERSION, [NAME, "Android " + BROWSER]],
        [
          /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
        ],
        [NAME, VERSION],
        [
          /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i
        ],
        [VERSION, [NAME, "Mobile Safari"]],
        [
          /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i
        ],
        [VERSION, NAME],
        [
          /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i
        ],
        [NAME, [VERSION, strMapper, oldSafariMap]],
        [
          /(webkit|khtml)\/([\w\.]+)/i
        ],
        [NAME, VERSION],
        [
          /(navigator|netscape\d?)\/([-\w\.]+)/i
        ],
        [[NAME, "Netscape"], VERSION],
        [
          /mobile vr; rv:([\w\.]+)\).+firefox/i
        ],
        [VERSION, [NAME, FIREFOX + " Reality"]],
        [
          /ekiohf.+(flow)\/([\w\.]+)/i,
          /(swiftfox)/i,
          /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
          /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
          /(firefox)\/([\w\.]+)/i,
          /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
          /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
          /(links) \(([\w\.]+)/i,
          /panasonic;(viera)/i
        ],
        [NAME, VERSION],
        [
          /(cobalt)\/([\w\.]+)/i
        ],
        [NAME, [VERSION, /master.|lts./, ""]]
      ],
      cpu: [
        [
          /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i
        ],
        [[ARCHITECTURE, "amd64"]],
        [
          /(ia32(?=;))/i
        ],
        [[ARCHITECTURE, lowerize]],
        [
          /((?:i[346]|x)86)[;\)]/i
        ],
        [[ARCHITECTURE, "ia32"]],
        [
          /\b(aarch64|arm(v?8e?l?|_?64))\b/i
        ],
        [[ARCHITECTURE, "arm64"]],
        [
          /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i
        ],
        [[ARCHITECTURE, "armhf"]],
        [
          /windows (ce|mobile); ppc;/i
        ],
        [[ARCHITECTURE, "arm"]],
        [
          /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i
        ],
        [[ARCHITECTURE, /ower/, EMPTY2, lowerize]],
        [
          /(sun4\w)[;\)]/i
        ],
        [[ARCHITECTURE, "sparc"]],
        [
          /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
        ],
        [[ARCHITECTURE, lowerize]]
      ],
      device: [
        [
          /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
        ],
        [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
        [
          /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
          /samsung[- ]([-\w]+)/i,
          /sec-(sgh\w+)/i
        ],
        [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
        [
          /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i
        ],
        [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
        [
          /\((ipad);[-\w\),; ]+apple/i,
          /applecoremedia\/[\w\.]+ \((ipad)/i,
          /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
        ],
        [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
        [
          /(macintosh);/i
        ],
        [MODEL, [VENDOR, APPLE]],
        [
          /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
        ],
        [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
        [
          /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
        ],
        [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
        [
          /(?:huawei|honor)([-\w ]+)[;\)]/i,
          /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
        ],
        [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
        [
          /\b(poco[\w ]+)(?: bui|\))/i,
          /\b; (\w+) build\/hm\1/i,
          /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
          /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
          /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
        ],
        [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, MOBILE]],
        [
          /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
        ],
        [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, TABLET]],
        [
          /; (\w+) bui.+ oppo/i,
          /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
        ],
        [MODEL, [VENDOR, "OPPO"], [TYPE, MOBILE]],
        [
          /vivo (\w+)(?: bui|\))/i,
          /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
        ],
        [MODEL, [VENDOR, "Vivo"], [TYPE, MOBILE]],
        [
          /\b(rmx[12]\d{3})(?: bui|;|\))/i
        ],
        [MODEL, [VENDOR, "Realme"], [TYPE, MOBILE]],
        [
          /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
          /\bmot(?:orola)?[- ](\w*)/i,
          /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
        ],
        [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
        [
          /\b(mz60\d|xoom[2 ]{0,2}) build\//i
        ],
        [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
        [
          /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
        ],
        [MODEL, [VENDOR, LG], [TYPE, TABLET]],
        [
          /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
          /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
          /\blg-?([\d\w]+) bui/i
        ],
        [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
        [
          /(ideatab[-\w ]+)/i,
          /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
        ],
        [MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
        [
          /(?:maemo|nokia).*(n900|lumia \d+)/i,
          /nokia[-_ ]?([-\w\.]*)/i
        ],
        [[MODEL, /_/g, " "], [VENDOR, "Nokia"], [TYPE, MOBILE]],
        [
          /(pixel c)\b/i
        ],
        [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
        [
          /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i
        ],
        [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
        [
          /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
        ],
        [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
        [
          /sony tablet [ps]/i,
          /\b(?:sony)?sgp\w+(?: bui|\))/i
        ],
        [[MODEL, "Xperia Tablet"], [VENDOR, SONY], [TYPE, TABLET]],
        [
          / (kb2005|in20[12]5|be20[12][59])\b/i,
          /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
        ],
        [MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
        [
          /(alexa)webm/i,
          /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
          /(kf[a-z]+)( bui|\)).+silk\//i
        ],
        [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
        [
          /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i
        ],
        [[MODEL, /(.+)/g, "Fire Phone $1"], [VENDOR, AMAZON], [TYPE, MOBILE]],
        [
          /(playbook);[-\w\),; ]+(rim)/i
        ],
        [MODEL, VENDOR, [TYPE, TABLET]],
        [
          /\b((?:bb[a-f]|st[hv])100-\d)/i,
          /\(bb10; (\w+)/i
        ],
        [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
        [
          /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
        ],
        [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
        [
          / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
        ],
        [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
        [
          /(nexus 9)/i
        ],
        [MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
        [
          /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
          /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
          /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
        ],
        [VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
        [
          /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
        ],
        [MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
        [
          /droid.+; (m[1-5] note) bui/i,
          /\bmz-([-\w]{2,})/i
        ],
        [MODEL, [VENDOR, "Meizu"], [TYPE, MOBILE]],
        [
          /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
          /(hp) ([\w ]+\w)/i,
          /(asus)-?(\w+)/i,
          /(microsoft); (lumia[\w ]+)/i,
          /(lenovo)[-_ ]?([-\w]+)/i,
          /(jolla)/i,
          /(oppo) ?([\w ]+) bui/i
        ],
        [VENDOR, MODEL, [TYPE, MOBILE]],
        [
          /(kobo)\s(ereader|touch)/i,
          /(archos) (gamepad2?)/i,
          /(hp).+(touchpad(?!.+tablet)|tablet)/i,
          /(kindle)\/([\w\.]+)/i,
          /(nook)[\w ]+build\/(\w+)/i,
          /(dell) (strea[kpr\d ]*[\dko])/i,
          /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
          /(trinity)[- ]*(t\d{3}) bui/i,
          /(gigaset)[- ]+(q\w{1,9}) bui/i,
          /(vodafone) ([\w ]+)(?:\)| bui)/i
        ],
        [VENDOR, MODEL, [TYPE, TABLET]],
        [
          /(surface duo)/i
        ],
        [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
        [
          /droid [\d\.]+; (fp\du?)(?: b|\))/i
        ],
        [MODEL, [VENDOR, "Fairphone"], [TYPE, MOBILE]],
        [
          /(u304aa)/i
        ],
        [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
        [
          /\bsie-(\w*)/i
        ],
        [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
        [
          /\b(rct\w+) b/i
        ],
        [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
        [
          /\b(venue[\d ]{2,7}) b/i
        ],
        [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
        [
          /\b(q(?:mv|ta)\w+) b/i
        ],
        [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
        [
          /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
        ],
        [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
        [
          /\b(tm\d{3}\w+) b/i
        ],
        [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
        [
          /\b(k88) b/i
        ],
        [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
        [
          /\b(nx\d{3}j) b/i
        ],
        [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
        [
          /\b(gen\d{3}) b.+49h/i
        ],
        [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
        [
          /\b(zur\d{3}) b/i
        ],
        [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
        [
          /\b((zeki)?tb.*\b) b/i
        ],
        [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
        [
          /\b([yr]\d{2}) b/i,
          /\b(dragon[- ]+touch |dt)(\w{5}) b/i
        ],
        [[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
        [
          /\b(ns-?\w{0,9}) b/i
        ],
        [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
        [
          /\b((nxa|next)-?\w{0,9}) b/i
        ],
        [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
        [
          /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
        ],
        [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
        [
          /\b(lvtel\-)?(v1[12]) b/i
        ],
        [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
        [
          /\b(ph-1) /i
        ],
        [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
        [
          /\b(v(100md|700na|7011|917g).*\b) b/i
        ],
        [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
        [
          /\b(trio[-\w\. ]+) b/i
        ],
        [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
        [
          /\btu_(1491) b/i
        ],
        [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
        [
          /(shield[\w ]+) b/i
        ],
        [MODEL, [VENDOR, "Nvidia"], [TYPE, TABLET]],
        [
          /(sprint) (\w+)/i
        ],
        [VENDOR, MODEL, [TYPE, MOBILE]],
        [
          /(kin\.[onetw]{3})/i
        ],
        [[MODEL, /\./g, " "], [VENDOR, MICROSOFT], [TYPE, MOBILE]],
        [
          /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i
        ],
        [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
        [
          /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
        ],
        [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
        [
          /smart-tv.+(samsung)/i
        ],
        [VENDOR, [TYPE, SMARTTV]],
        [
          /hbbtv.+maple;(\d+)/i
        ],
        [[MODEL, /^/, "SmartTV"], [VENDOR, SAMSUNG], [TYPE, SMARTTV]],
        [
          /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
        ],
        [[VENDOR, LG], [TYPE, SMARTTV]],
        [
          /(apple) ?tv/i
        ],
        [VENDOR, [MODEL, APPLE + " TV"], [TYPE, SMARTTV]],
        [
          /crkey/i
        ],
        [[MODEL, CHROME + "cast"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],
        [
          /droid.+aft(\w)( bui|\))/i
        ],
        [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
        [
          /\(dtv[\);].+(aquos)/i,
          /(aquos-tv[\w ]+)\)/i
        ],
        [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
        [
          /(bravia[\w ]+)( bui|\))/i
        ],
        [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
        [
          /(mitv-\w{5}) bui/i
        ],
        [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
        [
          /Hbbtv.*(technisat) (.*);/i
        ],
        [VENDOR, MODEL, [TYPE, SMARTTV]],
        [
          /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
          /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
        ],
        [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]],
        [
          /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i
        ],
        [[TYPE, SMARTTV]],
        [
          /(ouya)/i,
          /(nintendo) ([wids3utch]+)/i
        ],
        [VENDOR, MODEL, [TYPE, CONSOLE]],
        [
          /droid.+; (shield) bui/i
        ],
        [MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
        [
          /(playstation [345portablevi]+)/i
        ],
        [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
        [
          /\b(xbox(?: one)?(?!; xbox))[\); ]/i
        ],
        [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
        [
          /((pebble))app/i
        ],
        [VENDOR, MODEL, [TYPE, WEARABLE]],
        [
          /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i
        ],
        [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
        [
          /droid.+; (glass) \d/i
        ],
        [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
        [
          /droid.+; (wt63?0{2,3})\)/i
        ],
        [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
        [
          /(quest( 2| pro)?)/i
        ],
        [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
        [
          /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i
        ],
        [VENDOR, [TYPE, EMBEDDED]],
        [
          /(aeobc)\b/i
        ],
        [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],
        [
          /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i
        ],
        [MODEL, [TYPE, MOBILE]],
        [
          /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
        ],
        [MODEL, [TYPE, TABLET]],
        [
          /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i
        ],
        [[TYPE, TABLET]],
        [
          /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
        ],
        [[TYPE, MOBILE]],
        [
          /(android[-\w\. ]{0,9});.+buil/i
        ],
        [MODEL, [VENDOR, "Generic"]]
      ],
      engine: [
        [
          /windows.+ edge\/([\w\.]+)/i
        ],
        [VERSION, [NAME, EDGE + "HTML"]],
        [
          /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i
        ],
        [VERSION, [NAME, "Blink"]],
        [
          /(presto)\/([\w\.]+)/i,
          /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
          /ekioh(flow)\/([\w\.]+)/i,
          /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
          /(icab)[\/ ]([23]\.[\d\.]+)/i,
          /\b(libweb)/i
        ],
        [NAME, VERSION],
        [
          /rv\:([\w\.]{1,9})\b.+(gecko)/i
        ],
        [VERSION, NAME]
      ],
      os: [
        [
          /microsoft (windows) (vista|xp)/i
        ],
        [NAME, VERSION],
        [
          /(windows) nt 6\.2; (arm)/i,
          /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
          /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
        ],
        [NAME, [VERSION, strMapper, windowsVersionMap]],
        [
          /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
        ],
        [[NAME, "Windows"], [VERSION, strMapper, windowsVersionMap]],
        [
          /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
          /ios;fbsv\/([\d\.]+)/i,
          /cfnetwork\/.+darwin/i
        ],
        [[VERSION, /_/g, "."], [NAME, "iOS"]],
        [
          /(mac os x) ?([\w\. ]*)/i,
          /(macintosh|mac_powerpc\b)(?!.+haiku)/i
        ],
        [[NAME, MAC_OS], [VERSION, /_/g, "."]],
        [
          /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i
        ],
        [VERSION, NAME],
        [
          /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
          /(blackberry)\w*\/([\w\.]*)/i,
          /(tizen|kaios)[\/ ]([\w\.]+)/i,
          /\((series40);/i
        ],
        [NAME, VERSION],
        [
          /\(bb(10);/i
        ],
        [VERSION, [NAME, BLACKBERRY]],
        [
          /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i
        ],
        [VERSION, [NAME, "Symbian"]],
        [
          /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
        ],
        [VERSION, [NAME, FIREFOX + " OS"]],
        [
          /web0s;.+rt(tv)/i,
          /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i
        ],
        [VERSION, [NAME, "webOS"]],
        [
          /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i
        ],
        [VERSION, [NAME, "watchOS"]],
        [
          /crkey\/([\d\.]+)/i
        ],
        [VERSION, [NAME, CHROME + "cast"]],
        [
          /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i
        ],
        [[NAME, CHROMIUM_OS], VERSION],
        [
          /panasonic;(viera)/i,
          /(netrange)mmh/i,
          /(nettv)\/(\d+\.[\w\.]+)/i,
          /(nintendo|playstation) ([wids345portablevuch]+)/i,
          /(xbox); +xbox ([^\);]+)/i,
          /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
          /(mint)[\/\(\) ]?(\w*)/i,
          /(mageia|vectorlinux)[; ]/i,
          /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
          /(hurd|linux) ?([\w\.]*)/i,
          /(gnu) ?([\w\.]*)/i,
          /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
          /(haiku) (\w+)/i
        ],
        [NAME, VERSION],
        [
          /(sunos) ?([\w\.\d]*)/i
        ],
        [[NAME, "Solaris"], VERSION],
        [
          /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
          /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
          /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
          /(unix) ?([\w\.]*)/i
        ],
        [NAME, VERSION]
      ]
    };
    var UAParser = function(ua2, extensions) {
      if (typeof ua2 === OBJ_TYPE) {
        extensions = ua2;
        ua2 = undefined$1;
      }
      if (!(this instanceof UAParser)) {
        return new UAParser(ua2, extensions).getResult();
      }
      var _navigator = typeof window2 !== UNDEF_TYPE && window2.navigator ? window2.navigator : undefined$1;
      var _ua = ua2 || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY2);
      var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined$1;
      var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
      var _isSelfNav = _navigator && _navigator.userAgent == _ua;
      this.getBrowser = function() {
        var _browser = {};
        _browser[NAME] = undefined$1;
        _browser[VERSION] = undefined$1;
        rgxMapper.call(_browser, _ua, _rgxmap.browser);
        _browser[MAJOR] = majorize(_browser[VERSION]);
        if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
          _browser[NAME] = "Brave";
        }
        return _browser;
      };
      this.getCPU = function() {
        var _cpu = {};
        _cpu[ARCHITECTURE] = undefined$1;
        rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
        return _cpu;
      };
      this.getDevice = function() {
        var _device = {};
        _device[VENDOR] = undefined$1;
        _device[MODEL] = undefined$1;
        _device[TYPE] = undefined$1;
        rgxMapper.call(_device, _ua, _rgxmap.device);
        if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
          _device[TYPE] = MOBILE;
        }
        if (_isSelfNav && _device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
          _device[MODEL] = "iPad";
          _device[TYPE] = TABLET;
        }
        return _device;
      };
      this.getEngine = function() {
        var _engine = {};
        _engine[NAME] = undefined$1;
        _engine[VERSION] = undefined$1;
        rgxMapper.call(_engine, _ua, _rgxmap.engine);
        return _engine;
      };
      this.getOS = function() {
        var _os = {};
        _os[NAME] = undefined$1;
        _os[VERSION] = undefined$1;
        rgxMapper.call(_os, _ua, _rgxmap.os);
        if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != "Unknown") {
          _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS);
        }
        return _os;
      };
      this.getResult = function() {
        return {
          ua: this.getUA(),
          browser: this.getBrowser(),
          engine: this.getEngine(),
          os: this.getOS(),
          device: this.getDevice(),
          cpu: this.getCPU()
        };
      };
      this.getUA = function() {
        return _ua;
      };
      this.setUA = function(ua3) {
        _ua = typeof ua3 === STR_TYPE && ua3.length > UA_MAX_LENGTH ? trim(ua3, UA_MAX_LENGTH) : ua3;
        return this;
      };
      this.setUA(_ua);
      return this;
    };
    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
    UAParser.CPU = enumerize([ARCHITECTURE]);
    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);
    {
      if (module.exports) {
        exports = module.exports = UAParser;
      }
      exports.UAParser = UAParser;
    }
    var $2 = typeof window2 !== UNDEF_TYPE && (window2.jQuery || window2.Zepto);
    if ($2 && !$2.ua) {
      var parser2 = new UAParser();
      $2.ua = parser2.getResult();
      $2.ua.get = function() {
        return parser2.getUA();
      };
      $2.ua.set = function(ua2) {
        parser2.setUA(ua2);
        var result = parser2.getResult();
        for (var prop in result) {
          $2.ua[prop] = result[prop];
        }
      };
    }
  })(typeof window === "object" ? window : commonjsGlobal);
})(uaParser, uaParser.exports);
let logDisabled_ = true;
let deprecationWarnings_ = true;
function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}
function wrapPeerConnectionEvent(window2, eventNameToWrap, wrapper) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  const proto = window2.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb2) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    const wrappedCallback = (e2) => {
      const modifiedEvent = wrapper(e2);
      if (modifiedEvent) {
        if (cb2.handleEvent) {
          cb2.handleEvent(modifiedEvent);
        } else {
          cb2(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = /* @__PURE__ */ new Map();
    }
    this._eventMap[eventNameToWrap].set(cb2, wrappedCallback);
    return nativeAddEventListener.apply(this, [
      nativeEventName,
      wrappedCallback
    ]);
  };
  const nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb2) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb2)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb2);
    this._eventMap[eventNameToWrap].delete(cb2);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [
      nativeEventName,
      unwrappedCb
    ]);
  };
  Object.defineProperty(proto, "on" + eventNameToWrap, {
    get() {
      return this["_on" + eventNameToWrap];
    },
    set(cb2) {
      if (this["_on" + eventNameToWrap]) {
        this.removeEventListener(
          eventNameToWrap,
          this["_on" + eventNameToWrap]
        );
        delete this["_on" + eventNameToWrap];
      }
      if (cb2) {
        this.addEventListener(
          eventNameToWrap,
          this["_on" + eventNameToWrap] = cb2
        );
      }
    },
    enumerable: true,
    configurable: true
  });
}
function disableLog(bool) {
  if (typeof bool !== "boolean") {
    return new Error("Argument type: " + typeof bool + ". Please use a boolean.");
  }
  logDisabled_ = bool;
  return bool ? "adapter.js logging disabled" : "adapter.js logging enabled";
}
function disableWarnings(bool) {
  if (typeof bool !== "boolean") {
    return new Error("Argument type: " + typeof bool + ". Please use a boolean.");
  }
  deprecationWarnings_ = !bool;
  return "adapter.js deprecation warnings " + (bool ? "disabled" : "enabled");
}
function log() {
  if (typeof window === "object") {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== "undefined" && typeof console.log === "function") {
      console.log.apply(console, arguments);
    }
  }
}
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + " is deprecated, please use " + newMethod + " instead.");
}
function detectBrowser(window2) {
  const result = { browser: null, version: null };
  if (typeof window2 === "undefined" || !window2.navigator || !window2.navigator.userAgent) {
    result.browser = "Not a browser.";
    return result;
  }
  const { navigator: navigator2 } = window2;
  if (navigator2.mozGetUserMedia) {
    result.browser = "firefox";
    result.version = extractVersion(
      navigator2.userAgent,
      /Firefox\/(\d+)\./,
      1
    );
  } else if (navigator2.webkitGetUserMedia || window2.isSecureContext === false && window2.webkitRTCPeerConnection) {
    result.browser = "chrome";
    result.version = extractVersion(
      navigator2.userAgent,
      /Chrom(e|ium)\/(\d+)\./,
      2
    );
  } else if (window2.RTCPeerConnection && navigator2.userAgent.match(/AppleWebKit\/(\d+)\./)) {
    result.browser = "safari";
    result.version = extractVersion(
      navigator2.userAgent,
      /AppleWebKit\/(\d+)\./,
      1
    );
    result.supportsUnifiedPlan = window2.RTCRtpTransceiver && "currentDirection" in window2.RTCRtpTransceiver.prototype;
  } else {
    result.browser = "Not a supported browser.";
    return result;
  }
  return result;
}
function isObject$1(val) {
  return Object.prototype.toString.call(val) === "[object Object]";
}
function compactObject(data) {
  if (!isObject$1(data)) {
    return data;
  }
  return Object.keys(data).reduce(function(accumulator, key) {
    const isObj = isObject$1(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;
    if (value === void 0 || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, { [key]: value });
  }, {});
}
function walkStats(stats, base2, resultSet) {
  if (!base2 || resultSet.has(base2.id)) {
    return;
  }
  resultSet.set(base2.id, base2);
  Object.keys(base2).forEach((name) => {
    if (name.endsWith("Id")) {
      walkStats(stats, stats.get(base2[name]), resultSet);
    } else if (name.endsWith("Ids")) {
      base2[name].forEach((id2) => {
        walkStats(stats, stats.get(id2), resultSet);
      });
    }
  });
}
function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? "outbound-rtp" : "inbound-rtp";
  const filteredResult = /* @__PURE__ */ new Map();
  if (track === null) {
    return filteredResult;
  }
  const trackStats = [];
  result.forEach((value) => {
    if (value.type === "track" && value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach((trackStat) => {
    result.forEach((stats) => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}
const logging = log;
function shimGetUserMedia$2(window2, browserDetails) {
  const navigator2 = window2 && window2.navigator;
  if (!navigator2.mediaDevices) {
    return;
  }
  const constraintsToChrome_ = function(c2) {
    if (typeof c2 !== "object" || c2.mandatory || c2.optional) {
      return c2;
    }
    const cc2 = {};
    Object.keys(c2).forEach((key) => {
      if (key === "require" || key === "advanced" || key === "mediaSource") {
        return;
      }
      const r2 = typeof c2[key] === "object" ? c2[key] : { ideal: c2[key] };
      if (r2.exact !== void 0 && typeof r2.exact === "number") {
        r2.min = r2.max = r2.exact;
      }
      const oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return name === "deviceId" ? "sourceId" : name;
      };
      if (r2.ideal !== void 0) {
        cc2.optional = cc2.optional || [];
        let oc2 = {};
        if (typeof r2.ideal === "number") {
          oc2[oldname_("min", key)] = r2.ideal;
          cc2.optional.push(oc2);
          oc2 = {};
          oc2[oldname_("max", key)] = r2.ideal;
          cc2.optional.push(oc2);
        } else {
          oc2[oldname_("", key)] = r2.ideal;
          cc2.optional.push(oc2);
        }
      }
      if (r2.exact !== void 0 && typeof r2.exact !== "number") {
        cc2.mandatory = cc2.mandatory || {};
        cc2.mandatory[oldname_("", key)] = r2.exact;
      } else {
        ["min", "max"].forEach((mix) => {
          if (r2[mix] !== void 0) {
            cc2.mandatory = cc2.mandatory || {};
            cc2.mandatory[oldname_(mix, key)] = r2[mix];
          }
        });
      }
    });
    if (c2.advanced) {
      cc2.optional = (cc2.optional || []).concat(c2.advanced);
    }
    return cc2;
  };
  const shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === "object") {
      const remap = function(obj, a2, b2) {
        if (a2 in obj && !(b2 in obj)) {
          obj[b2] = obj[a2];
          delete obj[a2];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, "autoGainControl", "googAutoGainControl");
      remap(constraints.audio, "noiseSuppression", "googNoiseSuppression");
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === "object") {
      let face = constraints.video.facingMode;
      face = face && (typeof face === "object" ? face : { ideal: face });
      const getSupportedFacingModeLies = browserDetails.version < 66;
      if (face && (face.exact === "user" || face.exact === "environment" || face.ideal === "user" || face.ideal === "environment") && !(navigator2.mediaDevices.getSupportedConstraints && navigator2.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;
        if (face.exact === "environment" || face.ideal === "environment") {
          matches = ["back", "rear"];
        } else if (face.exact === "user" || face.ideal === "user") {
          matches = ["front"];
        }
        if (matches) {
          return navigator2.mediaDevices.enumerateDevices().then((devices) => {
            devices = devices.filter((d2) => d2.kind === "videoinput");
            let dev = devices.find((d2) => matches.some((match) => d2.label.toLowerCase().includes(match)));
            if (!dev && devices.length && matches.includes("back")) {
              dev = devices[devices.length - 1];
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? { exact: dev.deviceId } : { ideal: dev.deviceId };
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging("chrome: " + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging("chrome: " + JSON.stringify(constraints));
    return func(constraints);
  };
  const shimError_ = function(e2) {
    if (browserDetails.version >= 64) {
      return e2;
    }
    return {
      name: {
        PermissionDeniedError: "NotAllowedError",
        PermissionDismissedError: "NotAllowedError",
        InvalidStateError: "NotAllowedError",
        DevicesNotFoundError: "NotFoundError",
        ConstraintNotSatisfiedError: "OverconstrainedError",
        TrackStartError: "NotReadableError",
        MediaDeviceFailedDueToShutdown: "NotAllowedError",
        MediaDeviceKillSwitchOn: "NotAllowedError",
        TabCaptureError: "AbortError",
        ScreenCaptureError: "AbortError",
        DeviceCaptureError: "AbortError"
      }[e2.name] || e2.name,
      message: e2.message,
      constraint: e2.constraint || e2.constraintName,
      toString() {
        return this.name + (this.message && ": ") + this.message;
      }
    };
  };
  const getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, (c2) => {
      navigator2.webkitGetUserMedia(c2, onSuccess, (e2) => {
        if (onError) {
          onError(shimError_(e2));
        }
      });
    });
  };
  navigator2.getUserMedia = getUserMedia_.bind(navigator2);
  if (navigator2.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator2.mediaDevices.getUserMedia.bind(navigator2.mediaDevices);
    navigator2.mediaDevices.getUserMedia = function(cs2) {
      return shimConstraints_(cs2, (c2) => origGetUserMedia(c2).then((stream) => {
        if (c2.audio && !stream.getAudioTracks().length || c2.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach((track) => {
            track.stop();
          });
          throw new DOMException("", "NotFoundError");
        }
        return stream;
      }, (e2) => Promise.reject(shimError_(e2))));
    };
  }
}
function shimGetDisplayMedia$1(window2, getSourceId) {
  if (window2.navigator.mediaDevices && "getDisplayMedia" in window2.navigator.mediaDevices) {
    return;
  }
  if (!window2.navigator.mediaDevices) {
    return;
  }
  if (typeof getSourceId !== "function") {
    console.error("shimGetDisplayMedia: getSourceId argument is not a function");
    return;
  }
  window2.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    return getSourceId(constraints).then((sourceId) => {
      const widthSpecified = constraints.video && constraints.video.width;
      const heightSpecified = constraints.video && constraints.video.height;
      const frameRateSpecified = constraints.video && constraints.video.frameRate;
      constraints.video = {
        mandatory: {
          chromeMediaSource: "desktop",
          chromeMediaSourceId: sourceId,
          maxFrameRate: frameRateSpecified || 3
        }
      };
      if (widthSpecified) {
        constraints.video.mandatory.maxWidth = widthSpecified;
      }
      if (heightSpecified) {
        constraints.video.mandatory.maxHeight = heightSpecified;
      }
      return window2.navigator.mediaDevices.getUserMedia(constraints);
    });
  };
}
function shimMediaStream(window2) {
  window2.MediaStream = window2.MediaStream || window2.webkitMediaStream;
}
function shimOnTrack$1(window2) {
  if (typeof window2 === "object" && window2.RTCPeerConnection && !("ontrack" in window2.RTCPeerConnection.prototype)) {
    Object.defineProperty(window2.RTCPeerConnection.prototype, "ontrack", {
      get() {
        return this._ontrack;
      },
      set(f2) {
        if (this._ontrack) {
          this.removeEventListener("track", this._ontrack);
        }
        this.addEventListener("track", this._ontrack = f2);
      },
      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription = window2.RTCPeerConnection.prototype.setRemoteDescription;
    window2.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      if (!this._ontrackpoly) {
        this._ontrackpoly = (e2) => {
          e2.stream.addEventListener("addtrack", (te2) => {
            let receiver;
            if (window2.RTCPeerConnection.prototype.getReceivers) {
              receiver = this.getReceivers().find((r2) => r2.track && r2.track.id === te2.track.id);
            } else {
              receiver = { track: te2.track };
            }
            const event = new Event("track");
            event.track = te2.track;
            event.receiver = receiver;
            event.transceiver = { receiver };
            event.streams = [e2.stream];
            this.dispatchEvent(event);
          });
          e2.stream.getTracks().forEach((track) => {
            let receiver;
            if (window2.RTCPeerConnection.prototype.getReceivers) {
              receiver = this.getReceivers().find((r2) => r2.track && r2.track.id === track.id);
            } else {
              receiver = { track };
            }
            const event = new Event("track");
            event.track = track;
            event.receiver = receiver;
            event.transceiver = { receiver };
            event.streams = [e2.stream];
            this.dispatchEvent(event);
          });
        };
        this.addEventListener("addstream", this._ontrackpoly);
      }
      return origSetRemoteDescription.apply(this, arguments);
    };
  } else {
    wrapPeerConnectionEvent(window2, "track", (e2) => {
      if (!e2.transceiver) {
        Object.defineProperty(
          e2,
          "transceiver",
          { value: { receiver: e2.receiver } }
        );
      }
      return e2;
    });
  }
}
function shimGetSendersWithDtmf(window2) {
  if (typeof window2 === "object" && window2.RTCPeerConnection && !("getSenders" in window2.RTCPeerConnection.prototype) && "createDTMFSender" in window2.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function(pc2, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === void 0) {
            if (track.kind === "audio") {
              this._dtmf = pc2.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc2
      };
    };
    if (!window2.RTCPeerConnection.prototype.getSenders) {
      window2.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice();
      };
      const origAddTrack = window2.RTCPeerConnection.prototype.addTrack;
      window2.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        let sender = origAddTrack.apply(this, arguments);
        if (!sender) {
          sender = shimSenderWithDtmf(this, track);
          this._senders.push(sender);
        }
        return sender;
      };
      const origRemoveTrack = window2.RTCPeerConnection.prototype.removeTrack;
      window2.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        origRemoveTrack.apply(this, arguments);
        const idx = this._senders.indexOf(sender);
        if (idx !== -1) {
          this._senders.splice(idx, 1);
        }
      };
    }
    const origAddStream = window2.RTCPeerConnection.prototype.addStream;
    window2.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach((track) => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };
    const origRemoveStream = window2.RTCPeerConnection.prototype.removeStream;
    window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      this._senders = this._senders || [];
      origRemoveStream.apply(this, [stream]);
      stream.getTracks().forEach((track) => {
        const sender = this._senders.find((s4) => s4.track === track);
        if (sender) {
          this._senders.splice(this._senders.indexOf(sender), 1);
        }
      });
    };
  } else if (typeof window2 === "object" && window2.RTCPeerConnection && "getSenders" in window2.RTCPeerConnection.prototype && "createDTMFSender" in window2.RTCPeerConnection.prototype && window2.RTCRtpSender && !("dtmf" in window2.RTCRtpSender.prototype)) {
    const origGetSenders = window2.RTCPeerConnection.prototype.getSenders;
    window2.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach((sender) => sender._pc = this);
      return senders;
    };
    Object.defineProperty(window2.RTCRtpSender.prototype, "dtmf", {
      get() {
        if (this._dtmf === void 0) {
          if (this.track.kind === "audio") {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}
function shimGetStats(window2) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  const origGetStats = window2.RTCPeerConnection.prototype.getStats;
  window2.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    if (arguments.length > 0 && typeof selector === "function") {
      return origGetStats.apply(this, arguments);
    }
    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== "function")) {
      return origGetStats.apply(this, []);
    }
    const fixChromeStats_ = function(response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach((report) => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: "local-candidate",
            remotecandidate: "remote-candidate"
          }[report.type] || report.type
        };
        report.names().forEach((name) => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });
      return standardReport;
    };
    const makeMapStats = function(stats) {
      return new Map(Object.keys(stats).map((key) => [key, stats[key]]));
    };
    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };
      return origGetStats.apply(this, [
        successCallbackWrapper_,
        selector
      ]);
    }
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [
        function(response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        },
        reject
      ]);
    }).then(onSucc, onErr);
  };
}
function shimSenderReceiverGetStats(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection && window2.RTCRtpSender && window2.RTCRtpReceiver)) {
    return;
  }
  if (!("getStats" in window2.RTCRtpSender.prototype)) {
    const origGetSenders = window2.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window2.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach((sender) => sender._pc = this);
        return senders;
      };
    }
    const origAddTrack = window2.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window2.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window2.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then((result) => filterStats(result, sender.track, true));
    };
  }
  if (!("getStats" in window2.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window2.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window2.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        const receivers = origGetReceivers.apply(this, []);
        receivers.forEach((receiver) => receiver._pc = this);
        return receivers;
      };
    }
    wrapPeerConnectionEvent(window2, "track", (e2) => {
      e2.receiver._pc = e2.srcElement;
      return e2;
    });
    window2.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then((result) => filterStats(result, receiver.track, false));
    };
  }
  if (!("getStats" in window2.RTCRtpSender.prototype && "getStats" in window2.RTCRtpReceiver.prototype)) {
    return;
  }
  const origGetStats = window2.RTCPeerConnection.prototype.getStats;
  window2.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 && arguments[0] instanceof window2.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach((s4) => {
        if (s4.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s4;
          }
        }
      });
      this.getReceivers().forEach((r2) => {
        if (r2.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r2;
          }
        }
        return r2.track === track;
      });
      if (err || sender && receiver) {
        return Promise.reject(new DOMException(
          "There are more than one sender or receiver for the track.",
          "InvalidAccessError"
        ));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException(
        "There is no sender or receiver for the track.",
        "InvalidAccessError"
      ));
    }
    return origGetStats.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrackWithNative(window2) {
  window2.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    return Object.keys(this._shimmedLocalStreams).map((streamId) => this._shimmedLocalStreams[streamId][0]);
  };
  const origAddTrack = window2.RTCPeerConnection.prototype.addTrack;
  window2.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (!stream) {
      return origAddTrack.apply(this, arguments);
    }
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    const sender = origAddTrack.apply(this, arguments);
    if (!this._shimmedLocalStreams[stream.id]) {
      this._shimmedLocalStreams[stream.id] = [stream, sender];
    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
      this._shimmedLocalStreams[stream.id].push(sender);
    }
    return sender;
  };
  const origAddStream = window2.RTCPeerConnection.prototype.addStream;
  window2.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    stream.getTracks().forEach((track) => {
      const alreadyExists = this.getSenders().find((s4) => s4.track === track);
      if (alreadyExists) {
        throw new DOMException(
          "Track already exists.",
          "InvalidAccessError"
        );
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders().filter((newSender) => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };
  const origRemoveStream = window2.RTCPeerConnection.prototype.removeStream;
  window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    delete this._shimmedLocalStreams[stream.id];
    return origRemoveStream.apply(this, arguments);
  };
  const origRemoveTrack = window2.RTCPeerConnection.prototype.removeTrack;
  window2.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    if (sender) {
      Object.keys(this._shimmedLocalStreams).forEach((streamId) => {
        const idx = this._shimmedLocalStreams[streamId].indexOf(sender);
        if (idx !== -1) {
          this._shimmedLocalStreams[streamId].splice(idx, 1);
        }
        if (this._shimmedLocalStreams[streamId].length === 1) {
          delete this._shimmedLocalStreams[streamId];
        }
      });
    }
    return origRemoveTrack.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrack(window2, browserDetails) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  if (window2.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window2);
  }
  const origGetLocalStreams = window2.RTCPeerConnection.prototype.getLocalStreams;
  window2.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    const nativeStreams = origGetLocalStreams.apply(this);
    this._reverseStreams = this._reverseStreams || {};
    return nativeStreams.map((stream) => this._reverseStreams[stream.id]);
  };
  const origAddStream = window2.RTCPeerConnection.prototype.addStream;
  window2.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    stream.getTracks().forEach((track) => {
      const alreadyExists = this.getSenders().find((s4) => s4.track === track);
      if (alreadyExists) {
        throw new DOMException(
          "Track already exists.",
          "InvalidAccessError"
        );
      }
    });
    if (!this._reverseStreams[stream.id]) {
      const newStream = new window2.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };
  const origRemoveStream = window2.RTCPeerConnection.prototype.removeStream;
  window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
    delete this._streams[stream.id];
  };
  window2.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (this.signalingState === "closed") {
      throw new DOMException(
        "The RTCPeerConnection's signalingState is 'closed'.",
        "InvalidStateError"
      );
    }
    const streams = [].slice.call(arguments, 1);
    if (streams.length !== 1 || !streams[0].getTracks().find((t2) => t2 === track)) {
      throw new DOMException(
        "The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.",
        "NotSupportedError"
      );
    }
    const alreadyExists = this.getSenders().find((s4) => s4.track === track);
    if (alreadyExists) {
      throw new DOMException(
        "Track already exists.",
        "InvalidAccessError"
      );
    }
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    const oldStream = this._streams[stream.id];
    if (oldStream) {
      oldStream.addTrack(track);
      Promise.resolve().then(() => {
        this.dispatchEvent(new Event("negotiationneeded"));
      });
    } else {
      const newStream = new window2.MediaStream([track]);
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      this.addStream(newStream);
    }
    return this.getSenders().find((s4) => s4.track === track);
  };
  function replaceInternalStreamId(pc2, description) {
    let sdp2 = description.sdp;
    Object.keys(pc2._reverseStreams || []).forEach((internalId) => {
      const externalStream = pc2._reverseStreams[internalId];
      const internalStream = pc2._streams[externalStream.id];
      sdp2 = sdp2.replace(
        new RegExp(internalStream.id, "g"),
        externalStream.id
      );
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp2
    });
  }
  function replaceExternalStreamId(pc2, description) {
    let sdp2 = description.sdp;
    Object.keys(pc2._reverseStreams || []).forEach((internalId) => {
      const externalStream = pc2._reverseStreams[internalId];
      const internalStream = pc2._streams[externalStream.id];
      sdp2 = sdp2.replace(
        new RegExp(externalStream.id, "g"),
        internalStream.id
      );
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp2
    });
  }
  ["createOffer", "createAnswer"].forEach(function(method) {
    const nativeMethod = window2.RTCPeerConnection.prototype[method];
    const methodObj = { [method]() {
      const args = arguments;
      const isLegacyCall = arguments.length && typeof arguments[0] === "function";
      if (isLegacyCall) {
        return nativeMethod.apply(this, [
          (description) => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          },
          (err) => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          },
          arguments[2]
        ]);
      }
      return nativeMethod.apply(this, arguments).then((description) => replaceInternalStreamId(this, description));
    } };
    window2.RTCPeerConnection.prototype[method] = methodObj[method];
  });
  const origSetLocalDescription = window2.RTCPeerConnection.prototype.setLocalDescription;
  window2.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    if (!arguments.length || !arguments[0].type) {
      return origSetLocalDescription.apply(this, arguments);
    }
    arguments[0] = replaceExternalStreamId(this, arguments[0]);
    return origSetLocalDescription.apply(this, arguments);
  };
  const origLocalDescription = Object.getOwnPropertyDescriptor(
    window2.RTCPeerConnection.prototype,
    "localDescription"
  );
  Object.defineProperty(
    window2.RTCPeerConnection.prototype,
    "localDescription",
    {
      get() {
        const description = origLocalDescription.get.apply(this);
        if (description.type === "") {
          return description;
        }
        return replaceInternalStreamId(this, description);
      }
    }
  );
  window2.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    if (this.signalingState === "closed") {
      throw new DOMException(
        "The RTCPeerConnection's signalingState is 'closed'.",
        "InvalidStateError"
      );
    }
    if (!sender._pc) {
      throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
    }
    const isLocal = sender._pc === this;
    if (!isLocal) {
      throw new DOMException(
        "Sender was not created by this connection.",
        "InvalidAccessError"
      );
    }
    this._streams = this._streams || {};
    let stream;
    Object.keys(this._streams).forEach((streamid) => {
      const hasTrack = this._streams[streamid].getTracks().find((track) => sender.track === track);
      if (hasTrack) {
        stream = this._streams[streamid];
      }
    });
    if (stream) {
      if (stream.getTracks().length === 1) {
        this.removeStream(this._reverseStreams[stream.id]);
      } else {
        stream.removeTrack(sender.track);
      }
      this.dispatchEvent(new Event("negotiationneeded"));
    }
  };
}
function shimPeerConnection$1(window2, browserDetails) {
  if (!window2.RTCPeerConnection && window2.webkitRTCPeerConnection) {
    window2.RTCPeerConnection = window2.webkitRTCPeerConnection;
  }
  if (!window2.RTCPeerConnection) {
    return;
  }
  if (browserDetails.version < 53) {
    ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(method) {
      const nativeMethod = window2.RTCPeerConnection.prototype[method];
      const methodObj = { [method]() {
        arguments[0] = new (method === "addIceCandidate" ? window2.RTCIceCandidate : window2.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      } };
      window2.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
}
function fixNegotiationNeeded(window2, browserDetails) {
  wrapPeerConnectionEvent(window2, "negotiationneeded", (e2) => {
    const pc2 = e2.target;
    if (browserDetails.version < 72 || pc2.getConfiguration && pc2.getConfiguration().sdpSemantics === "plan-b") {
      if (pc2.signalingState !== "stable") {
        return;
      }
    }
    return e2;
  });
}
var chromeShim = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  shimMediaStream,
  shimOnTrack: shimOnTrack$1,
  shimGetSendersWithDtmf,
  shimGetStats,
  shimSenderReceiverGetStats,
  shimAddTrackRemoveTrackWithNative,
  shimAddTrackRemoveTrack,
  shimPeerConnection: shimPeerConnection$1,
  fixNegotiationNeeded,
  shimGetUserMedia: shimGetUserMedia$2,
  shimGetDisplayMedia: shimGetDisplayMedia$1
}, Symbol.toStringTag, { value: "Module" }));
function shimGetUserMedia$1(window2, browserDetails) {
  const navigator2 = window2 && window2.navigator;
  const MediaStreamTrack = window2 && window2.MediaStreamTrack;
  navigator2.getUserMedia = function(constraints, onSuccess, onError) {
    deprecated(
      "navigator.getUserMedia",
      "navigator.mediaDevices.getUserMedia"
    );
    navigator2.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
  if (!(browserDetails.version > 55 && "autoGainControl" in navigator2.mediaDevices.getSupportedConstraints())) {
    const remap = function(obj, a2, b2) {
      if (a2 in obj && !(b2 in obj)) {
        obj[b2] = obj[a2];
        delete obj[a2];
      }
    };
    const nativeGetUserMedia = navigator2.mediaDevices.getUserMedia.bind(navigator2.mediaDevices);
    navigator2.mediaDevices.getUserMedia = function(c2) {
      if (typeof c2 === "object" && typeof c2.audio === "object") {
        c2 = JSON.parse(JSON.stringify(c2));
        remap(c2.audio, "autoGainControl", "mozAutoGainControl");
        remap(c2.audio, "noiseSuppression", "mozNoiseSuppression");
      }
      return nativeGetUserMedia(c2);
    };
    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, "mozAutoGainControl", "autoGainControl");
        remap(obj, "mozNoiseSuppression", "noiseSuppression");
        return obj;
      };
    }
    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c2) {
        if (this.kind === "audio" && typeof c2 === "object") {
          c2 = JSON.parse(JSON.stringify(c2));
          remap(c2, "autoGainControl", "mozAutoGainControl");
          remap(c2, "noiseSuppression", "mozNoiseSuppression");
        }
        return nativeApplyConstraints.apply(this, [c2]);
      };
    }
  }
}
function shimGetDisplayMedia(window2, preferredMediaSource) {
  if (window2.navigator.mediaDevices && "getDisplayMedia" in window2.navigator.mediaDevices) {
    return;
  }
  if (!window2.navigator.mediaDevices) {
    return;
  }
  window2.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    if (!(constraints && constraints.video)) {
      const err = new DOMException("getDisplayMedia without video constraints is undefined");
      err.name = "NotFoundError";
      err.code = 8;
      return Promise.reject(err);
    }
    if (constraints.video === true) {
      constraints.video = { mediaSource: preferredMediaSource };
    } else {
      constraints.video.mediaSource = preferredMediaSource;
    }
    return window2.navigator.mediaDevices.getUserMedia(constraints);
  };
}
function shimOnTrack(window2) {
  if (typeof window2 === "object" && window2.RTCTrackEvent && "receiver" in window2.RTCTrackEvent.prototype && !("transceiver" in window2.RTCTrackEvent.prototype)) {
    Object.defineProperty(window2.RTCTrackEvent.prototype, "transceiver", {
      get() {
        return { receiver: this.receiver };
      }
    });
  }
}
function shimPeerConnection(window2, browserDetails) {
  if (typeof window2 !== "object" || !(window2.RTCPeerConnection || window2.mozRTCPeerConnection)) {
    return;
  }
  if (!window2.RTCPeerConnection && window2.mozRTCPeerConnection) {
    window2.RTCPeerConnection = window2.mozRTCPeerConnection;
  }
  if (browserDetails.version < 53) {
    ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(method) {
      const nativeMethod = window2.RTCPeerConnection.prototype[method];
      const methodObj = { [method]() {
        arguments[0] = new (method === "addIceCandidate" ? window2.RTCIceCandidate : window2.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      } };
      window2.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
  const modernStatsTypes = {
    inboundrtp: "inbound-rtp",
    outboundrtp: "outbound-rtp",
    candidatepair: "candidate-pair",
    localcandidate: "local-candidate",
    remotecandidate: "remote-candidate"
  };
  const nativeGetStats = window2.RTCPeerConnection.prototype.getStats;
  window2.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null]).then((stats) => {
      if (browserDetails.version < 53 && !onSucc) {
        try {
          stats.forEach((stat) => {
            stat.type = modernStatsTypes[stat.type] || stat.type;
          });
        } catch (e2) {
          if (e2.name !== "TypeError") {
            throw e2;
          }
          stats.forEach((stat, i2) => {
            stats.set(i2, Object.assign({}, stat, {
              type: modernStatsTypes[stat.type] || stat.type
            }));
          });
        }
      }
      return stats;
    }).then(onSucc, onErr);
  };
}
function shimSenderGetStats(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection && window2.RTCRtpSender)) {
    return;
  }
  if (window2.RTCRtpSender && "getStats" in window2.RTCRtpSender.prototype) {
    return;
  }
  const origGetSenders = window2.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window2.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach((sender) => sender._pc = this);
      return senders;
    };
  }
  const origAddTrack = window2.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window2.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window2.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) : Promise.resolve(/* @__PURE__ */ new Map());
  };
}
function shimReceiverGetStats(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection && window2.RTCRtpSender)) {
    return;
  }
  if (window2.RTCRtpSender && "getStats" in window2.RTCRtpReceiver.prototype) {
    return;
  }
  const origGetReceivers = window2.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window2.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach((receiver) => receiver._pc = this);
      return receivers;
    };
  }
  wrapPeerConnectionEvent(window2, "track", (e2) => {
    e2.receiver._pc = e2.srcElement;
    return e2;
  });
  window2.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}
function shimRemoveStream(window2) {
  if (!window2.RTCPeerConnection || "removeStream" in window2.RTCPeerConnection.prototype) {
    return;
  }
  window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    deprecated("removeStream", "removeTrack");
    this.getSenders().forEach((sender) => {
      if (sender.track && stream.getTracks().includes(sender.track)) {
        this.removeTrack(sender);
      }
    });
  };
}
function shimRTCDataChannel(window2) {
  if (window2.DataChannel && !window2.RTCDataChannel) {
    window2.RTCDataChannel = window2.DataChannel;
  }
}
function shimAddTransceiver(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection)) {
    return;
  }
  const origAddTransceiver = window2.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window2.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
      this.setParametersPromises = [];
      let sendEncodings = arguments[1] && arguments[1].sendEncodings;
      if (sendEncodings === void 0) {
        sendEncodings = [];
      }
      sendEncodings = [...sendEncodings];
      const shouldPerformCheck = sendEncodings.length > 0;
      if (shouldPerformCheck) {
        sendEncodings.forEach((encodingParam) => {
          if ("rid" in encodingParam) {
            const ridRegex = /^[a-z0-9]{0,16}$/i;
            if (!ridRegex.test(encodingParam.rid)) {
              throw new TypeError("Invalid RID value provided.");
            }
          }
          if ("scaleResolutionDownBy" in encodingParam) {
            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1)) {
              throw new RangeError("scale_resolution_down_by must be >= 1.0");
            }
          }
          if ("maxFramerate" in encodingParam) {
            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
              throw new RangeError("max_framerate must be >= 0.0");
            }
          }
        });
      }
      const transceiver = origAddTransceiver.apply(this, arguments);
      if (shouldPerformCheck) {
        const { sender } = transceiver;
        const params = sender.getParameters();
        if (!("encodings" in params) || params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
          params.encodings = sendEncodings;
          sender.sendEncodings = sendEncodings;
          this.setParametersPromises.push(
            sender.setParameters(params).then(() => {
              delete sender.sendEncodings;
            }).catch(() => {
              delete sender.sendEncodings;
            })
          );
        }
      }
      return transceiver;
    };
  }
}
function shimGetParameters(window2) {
  if (!(typeof window2 === "object" && window2.RTCRtpSender)) {
    return;
  }
  const origGetParameters = window2.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window2.RTCRtpSender.prototype.getParameters = function getParameters() {
      const params = origGetParameters.apply(this, arguments);
      if (!("encodings" in params)) {
        params.encodings = [].concat(this.sendEncodings || [{}]);
      }
      return params;
    };
  }
}
function shimCreateOffer(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection)) {
    return;
  }
  const origCreateOffer = window2.RTCPeerConnection.prototype.createOffer;
  window2.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(() => {
        return origCreateOffer.apply(this, arguments);
      }).finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimCreateAnswer(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection)) {
    return;
  }
  const origCreateAnswer = window2.RTCPeerConnection.prototype.createAnswer;
  window2.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(() => {
        return origCreateAnswer.apply(this, arguments);
      }).finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}
var firefoxShim = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  shimOnTrack,
  shimPeerConnection,
  shimSenderGetStats,
  shimReceiverGetStats,
  shimRemoveStream,
  shimRTCDataChannel,
  shimAddTransceiver,
  shimGetParameters,
  shimCreateOffer,
  shimCreateAnswer,
  shimGetUserMedia: shimGetUserMedia$1,
  shimGetDisplayMedia
}, Symbol.toStringTag, { value: "Module" }));
function shimLocalStreamsAPI(window2) {
  if (typeof window2 !== "object" || !window2.RTCPeerConnection) {
    return;
  }
  if (!("getLocalStreams" in window2.RTCPeerConnection.prototype)) {
    window2.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      return this._localStreams;
    };
  }
  if (!("addStream" in window2.RTCPeerConnection.prototype)) {
    const _addTrack = window2.RTCPeerConnection.prototype.addTrack;
    window2.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      stream.getAudioTracks().forEach((track) => _addTrack.call(
        this,
        track,
        stream
      ));
      stream.getVideoTracks().forEach((track) => _addTrack.call(
        this,
        track,
        stream
      ));
    };
    window2.RTCPeerConnection.prototype.addTrack = function addTrack(track, ...streams) {
      if (streams) {
        streams.forEach((stream) => {
          if (!this._localStreams) {
            this._localStreams = [stream];
          } else if (!this._localStreams.includes(stream)) {
            this._localStreams.push(stream);
          }
        });
      }
      return _addTrack.apply(this, arguments);
    };
  }
  if (!("removeStream" in window2.RTCPeerConnection.prototype)) {
    window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      const index2 = this._localStreams.indexOf(stream);
      if (index2 === -1) {
        return;
      }
      this._localStreams.splice(index2, 1);
      const tracks = stream.getTracks();
      this.getSenders().forEach((sender) => {
        if (tracks.includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
  }
}
function shimRemoteStreamsAPI(window2) {
  if (typeof window2 !== "object" || !window2.RTCPeerConnection) {
    return;
  }
  if (!("getRemoteStreams" in window2.RTCPeerConnection.prototype)) {
    window2.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
      return this._remoteStreams ? this._remoteStreams : [];
    };
  }
  if (!("onaddstream" in window2.RTCPeerConnection.prototype)) {
    Object.defineProperty(window2.RTCPeerConnection.prototype, "onaddstream", {
      get() {
        return this._onaddstream;
      },
      set(f2) {
        if (this._onaddstream) {
          this.removeEventListener("addstream", this._onaddstream);
          this.removeEventListener("track", this._onaddstreampoly);
        }
        this.addEventListener("addstream", this._onaddstream = f2);
        this.addEventListener("track", this._onaddstreampoly = (e2) => {
          e2.streams.forEach((stream) => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            const event = new Event("addstream");
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    const origSetRemoteDescription = window2.RTCPeerConnection.prototype.setRemoteDescription;
    window2.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      const pc2 = this;
      if (!this._onaddstreampoly) {
        this.addEventListener("track", this._onaddstreampoly = function(e2) {
          e2.streams.forEach((stream) => {
            if (!pc2._remoteStreams) {
              pc2._remoteStreams = [];
            }
            if (pc2._remoteStreams.indexOf(stream) >= 0) {
              return;
            }
            pc2._remoteStreams.push(stream);
            const event = new Event("addstream");
            event.stream = stream;
            pc2.dispatchEvent(event);
          });
        });
      }
      return origSetRemoteDescription.apply(pc2, arguments);
    };
  }
}
function shimCallbacksAPI(window2) {
  if (typeof window2 !== "object" || !window2.RTCPeerConnection) {
    return;
  }
  const prototype = window2.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;
  prototype.createOffer = function createOffer(successCallback, failureCallback) {
    const options = arguments.length >= 2 ? arguments[2] : arguments[0];
    const promise = origCreateOffer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
    const options = arguments.length >= 2 ? arguments[2] : arguments[0];
    const promise = origCreateAnswer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  let withCallback = function(description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;
  withCallback = function(description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;
  withCallback = function(candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}
function shimGetUserMedia(window2) {
  const navigator2 = window2 && window2.navigator;
  if (navigator2.mediaDevices && navigator2.mediaDevices.getUserMedia) {
    const mediaDevices = navigator2.mediaDevices;
    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator2.mediaDevices.getUserMedia = (constraints) => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }
  if (!navigator2.getUserMedia && navigator2.mediaDevices && navigator2.mediaDevices.getUserMedia) {
    navigator2.getUserMedia = function getUserMedia(constraints, cb2, errcb) {
      navigator2.mediaDevices.getUserMedia(constraints).then(cb2, errcb);
    }.bind(navigator2);
  }
}
function shimConstraints(constraints) {
  if (constraints && constraints.video !== void 0) {
    return Object.assign(
      {},
      constraints,
      { video: compactObject(constraints.video) }
    );
  }
  return constraints;
}
function shimRTCIceServerUrls(window2) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  const OrigPeerConnection = window2.RTCPeerConnection;
  window2.RTCPeerConnection = function RTCPeerConnection2(pcConfig, pcConstraints) {
    if (pcConfig && pcConfig.iceServers) {
      const newIceServers = [];
      for (let i2 = 0; i2 < pcConfig.iceServers.length; i2++) {
        let server = pcConfig.iceServers[i2];
        if (server.urls === void 0 && server.url) {
          deprecated("RTCIceServer.url", "RTCIceServer.urls");
          server = JSON.parse(JSON.stringify(server));
          server.urls = server.url;
          delete server.url;
          newIceServers.push(server);
        } else {
          newIceServers.push(pcConfig.iceServers[i2]);
        }
      }
      pcConfig.iceServers = newIceServers;
    }
    return new OrigPeerConnection(pcConfig, pcConstraints);
  };
  window2.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  if ("generateCertificate" in OrigPeerConnection) {
    Object.defineProperty(window2.RTCPeerConnection, "generateCertificate", {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}
function shimTrackEventTransceiver(window2) {
  if (typeof window2 === "object" && window2.RTCTrackEvent && "receiver" in window2.RTCTrackEvent.prototype && !("transceiver" in window2.RTCTrackEvent.prototype)) {
    Object.defineProperty(window2.RTCTrackEvent.prototype, "transceiver", {
      get() {
        return { receiver: this.receiver };
      }
    });
  }
}
function shimCreateOfferLegacy(window2) {
  const origCreateOffer = window2.RTCPeerConnection.prototype.createOffer;
  window2.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
    if (offerOptions) {
      if (typeof offerOptions.offerToReceiveAudio !== "undefined") {
        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
      }
      const audioTransceiver = this.getTransceivers().find((transceiver) => transceiver.receiver.track.kind === "audio");
      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
        if (audioTransceiver.direction === "sendrecv") {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection("sendonly");
          } else {
            audioTransceiver.direction = "sendonly";
          }
        } else if (audioTransceiver.direction === "recvonly") {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection("inactive");
          } else {
            audioTransceiver.direction = "inactive";
          }
        }
      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
        this.addTransceiver("audio", { direction: "recvonly" });
      }
      if (typeof offerOptions.offerToReceiveVideo !== "undefined") {
        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
      }
      const videoTransceiver = this.getTransceivers().find((transceiver) => transceiver.receiver.track.kind === "video");
      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
        if (videoTransceiver.direction === "sendrecv") {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection("sendonly");
          } else {
            videoTransceiver.direction = "sendonly";
          }
        } else if (videoTransceiver.direction === "recvonly") {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection("inactive");
          } else {
            videoTransceiver.direction = "inactive";
          }
        }
      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
        this.addTransceiver("video", { direction: "recvonly" });
      }
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimAudioContext(window2) {
  if (typeof window2 !== "object" || window2.AudioContext) {
    return;
  }
  window2.AudioContext = window2.webkitAudioContext;
}
var safariShim = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  shimLocalStreamsAPI,
  shimRemoteStreamsAPI,
  shimCallbacksAPI,
  shimGetUserMedia,
  shimConstraints,
  shimRTCIceServerUrls,
  shimTrackEventTransceiver,
  shimCreateOfferLegacy,
  shimAudioContext
}, Symbol.toStringTag, { value: "Module" }));
var sdp$1 = { exports: {} };
(function(module) {
  const SDPUtils2 = {};
  SDPUtils2.generateIdentifier = function() {
    return Math.random().toString(36).substring(2, 12);
  };
  SDPUtils2.localCName = SDPUtils2.generateIdentifier();
  SDPUtils2.splitLines = function(blob) {
    return blob.trim().split("\n").map((line) => line.trim());
  };
  SDPUtils2.splitSections = function(blob) {
    const parts = blob.split("\nm=");
    return parts.map((part, index2) => (index2 > 0 ? "m=" + part : part).trim() + "\r\n");
  };
  SDPUtils2.getDescription = function(blob) {
    const sections = SDPUtils2.splitSections(blob);
    return sections && sections[0];
  };
  SDPUtils2.getMediaSections = function(blob) {
    const sections = SDPUtils2.splitSections(blob);
    sections.shift();
    return sections;
  };
  SDPUtils2.matchPrefix = function(blob, prefix) {
    return SDPUtils2.splitLines(blob).filter((line) => line.indexOf(prefix) === 0);
  };
  SDPUtils2.parseCandidate = function(line) {
    let parts;
    if (line.indexOf("a=candidate:") === 0) {
      parts = line.substring(12).split(" ");
    } else {
      parts = line.substring(10).split(" ");
    }
    const candidate = {
      foundation: parts[0],
      component: { 1: "rtp", 2: "rtcp" }[parts[1]] || parts[1],
      protocol: parts[2].toLowerCase(),
      priority: parseInt(parts[3], 10),
      ip: parts[4],
      address: parts[4],
      port: parseInt(parts[5], 10),
      type: parts[7]
    };
    for (let i2 = 8; i2 < parts.length; i2 += 2) {
      switch (parts[i2]) {
        case "raddr":
          candidate.relatedAddress = parts[i2 + 1];
          break;
        case "rport":
          candidate.relatedPort = parseInt(parts[i2 + 1], 10);
          break;
        case "tcptype":
          candidate.tcpType = parts[i2 + 1];
          break;
        case "ufrag":
          candidate.ufrag = parts[i2 + 1];
          candidate.usernameFragment = parts[i2 + 1];
          break;
        default:
          if (candidate[parts[i2]] === void 0) {
            candidate[parts[i2]] = parts[i2 + 1];
          }
          break;
      }
    }
    return candidate;
  };
  SDPUtils2.writeCandidate = function(candidate) {
    const sdp2 = [];
    sdp2.push(candidate.foundation);
    const component = candidate.component;
    if (component === "rtp") {
      sdp2.push(1);
    } else if (component === "rtcp") {
      sdp2.push(2);
    } else {
      sdp2.push(component);
    }
    sdp2.push(candidate.protocol.toUpperCase());
    sdp2.push(candidate.priority);
    sdp2.push(candidate.address || candidate.ip);
    sdp2.push(candidate.port);
    const type = candidate.type;
    sdp2.push("typ");
    sdp2.push(type);
    if (type !== "host" && candidate.relatedAddress && candidate.relatedPort) {
      sdp2.push("raddr");
      sdp2.push(candidate.relatedAddress);
      sdp2.push("rport");
      sdp2.push(candidate.relatedPort);
    }
    if (candidate.tcpType && candidate.protocol.toLowerCase() === "tcp") {
      sdp2.push("tcptype");
      sdp2.push(candidate.tcpType);
    }
    if (candidate.usernameFragment || candidate.ufrag) {
      sdp2.push("ufrag");
      sdp2.push(candidate.usernameFragment || candidate.ufrag);
    }
    return "candidate:" + sdp2.join(" ");
  };
  SDPUtils2.parseIceOptions = function(line) {
    return line.substring(14).split(" ");
  };
  SDPUtils2.parseRtpMap = function(line) {
    let parts = line.substring(9).split(" ");
    const parsed = {
      payloadType: parseInt(parts.shift(), 10)
    };
    parts = parts[0].split("/");
    parsed.name = parts[0];
    parsed.clockRate = parseInt(parts[1], 10);
    parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
    parsed.numChannels = parsed.channels;
    return parsed;
  };
  SDPUtils2.writeRtpMap = function(codec) {
    let pt2 = codec.payloadType;
    if (codec.preferredPayloadType !== void 0) {
      pt2 = codec.preferredPayloadType;
    }
    const channels = codec.channels || codec.numChannels || 1;
    return "a=rtpmap:" + pt2 + " " + codec.name + "/" + codec.clockRate + (channels !== 1 ? "/" + channels : "") + "\r\n";
  };
  SDPUtils2.parseExtmap = function(line) {
    const parts = line.substring(9).split(" ");
    return {
      id: parseInt(parts[0], 10),
      direction: parts[0].indexOf("/") > 0 ? parts[0].split("/")[1] : "sendrecv",
      uri: parts[1],
      attributes: parts.slice(2).join(" ")
    };
  };
  SDPUtils2.writeExtmap = function(headerExtension) {
    return "a=extmap:" + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== "sendrecv" ? "/" + headerExtension.direction : "") + " " + headerExtension.uri + (headerExtension.attributes ? " " + headerExtension.attributes : "") + "\r\n";
  };
  SDPUtils2.parseFmtp = function(line) {
    const parsed = {};
    let kv;
    const parts = line.substring(line.indexOf(" ") + 1).split(";");
    for (let j2 = 0; j2 < parts.length; j2++) {
      kv = parts[j2].trim().split("=");
      parsed[kv[0].trim()] = kv[1];
    }
    return parsed;
  };
  SDPUtils2.writeFmtp = function(codec) {
    let line = "";
    let pt2 = codec.payloadType;
    if (codec.preferredPayloadType !== void 0) {
      pt2 = codec.preferredPayloadType;
    }
    if (codec.parameters && Object.keys(codec.parameters).length) {
      const params = [];
      Object.keys(codec.parameters).forEach((param) => {
        if (codec.parameters[param] !== void 0) {
          params.push(param + "=" + codec.parameters[param]);
        } else {
          params.push(param);
        }
      });
      line += "a=fmtp:" + pt2 + " " + params.join(";") + "\r\n";
    }
    return line;
  };
  SDPUtils2.parseRtcpFb = function(line) {
    const parts = line.substring(line.indexOf(" ") + 1).split(" ");
    return {
      type: parts.shift(),
      parameter: parts.join(" ")
    };
  };
  SDPUtils2.writeRtcpFb = function(codec) {
    let lines = "";
    let pt2 = codec.payloadType;
    if (codec.preferredPayloadType !== void 0) {
      pt2 = codec.preferredPayloadType;
    }
    if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
      codec.rtcpFeedback.forEach((fb2) => {
        lines += "a=rtcp-fb:" + pt2 + " " + fb2.type + (fb2.parameter && fb2.parameter.length ? " " + fb2.parameter : "") + "\r\n";
      });
    }
    return lines;
  };
  SDPUtils2.parseSsrcMedia = function(line) {
    const sp = line.indexOf(" ");
    const parts = {
      ssrc: parseInt(line.substring(7, sp), 10)
    };
    const colon = line.indexOf(":", sp);
    if (colon > -1) {
      parts.attribute = line.substring(sp + 1, colon);
      parts.value = line.substring(colon + 1);
    } else {
      parts.attribute = line.substring(sp + 1);
    }
    return parts;
  };
  SDPUtils2.parseSsrcGroup = function(line) {
    const parts = line.substring(13).split(" ");
    return {
      semantics: parts.shift(),
      ssrcs: parts.map((ssrc) => parseInt(ssrc, 10))
    };
  };
  SDPUtils2.getMid = function(mediaSection) {
    const mid = SDPUtils2.matchPrefix(mediaSection, "a=mid:")[0];
    if (mid) {
      return mid.substring(6);
    }
  };
  SDPUtils2.parseFingerprint = function(line) {
    const parts = line.substring(14).split(" ");
    return {
      algorithm: parts[0].toLowerCase(),
      value: parts[1].toUpperCase()
    };
  };
  SDPUtils2.getDtlsParameters = function(mediaSection, sessionpart) {
    const lines = SDPUtils2.matchPrefix(
      mediaSection + sessionpart,
      "a=fingerprint:"
    );
    return {
      role: "auto",
      fingerprints: lines.map(SDPUtils2.parseFingerprint)
    };
  };
  SDPUtils2.writeDtlsParameters = function(params, setupType) {
    let sdp2 = "a=setup:" + setupType + "\r\n";
    params.fingerprints.forEach((fp) => {
      sdp2 += "a=fingerprint:" + fp.algorithm + " " + fp.value + "\r\n";
    });
    return sdp2;
  };
  SDPUtils2.parseCryptoLine = function(line) {
    const parts = line.substring(9).split(" ");
    return {
      tag: parseInt(parts[0], 10),
      cryptoSuite: parts[1],
      keyParams: parts[2],
      sessionParams: parts.slice(3)
    };
  };
  SDPUtils2.writeCryptoLine = function(parameters) {
    return "a=crypto:" + parameters.tag + " " + parameters.cryptoSuite + " " + (typeof parameters.keyParams === "object" ? SDPUtils2.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? " " + parameters.sessionParams.join(" ") : "") + "\r\n";
  };
  SDPUtils2.parseCryptoKeyParams = function(keyParams) {
    if (keyParams.indexOf("inline:") !== 0) {
      return null;
    }
    const parts = keyParams.substring(7).split("|");
    return {
      keyMethod: "inline",
      keySalt: parts[0],
      lifeTime: parts[1],
      mkiValue: parts[2] ? parts[2].split(":")[0] : void 0,
      mkiLength: parts[2] ? parts[2].split(":")[1] : void 0
    };
  };
  SDPUtils2.writeCryptoKeyParams = function(keyParams) {
    return keyParams.keyMethod + ":" + keyParams.keySalt + (keyParams.lifeTime ? "|" + keyParams.lifeTime : "") + (keyParams.mkiValue && keyParams.mkiLength ? "|" + keyParams.mkiValue + ":" + keyParams.mkiLength : "");
  };
  SDPUtils2.getCryptoParameters = function(mediaSection, sessionpart) {
    const lines = SDPUtils2.matchPrefix(
      mediaSection + sessionpart,
      "a=crypto:"
    );
    return lines.map(SDPUtils2.parseCryptoLine);
  };
  SDPUtils2.getIceParameters = function(mediaSection, sessionpart) {
    const ufrag = SDPUtils2.matchPrefix(
      mediaSection + sessionpart,
      "a=ice-ufrag:"
    )[0];
    const pwd = SDPUtils2.matchPrefix(
      mediaSection + sessionpart,
      "a=ice-pwd:"
    )[0];
    if (!(ufrag && pwd)) {
      return null;
    }
    return {
      usernameFragment: ufrag.substring(12),
      password: pwd.substring(10)
    };
  };
  SDPUtils2.writeIceParameters = function(params) {
    let sdp2 = "a=ice-ufrag:" + params.usernameFragment + "\r\na=ice-pwd:" + params.password + "\r\n";
    if (params.iceLite) {
      sdp2 += "a=ice-lite\r\n";
    }
    return sdp2;
  };
  SDPUtils2.parseRtpParameters = function(mediaSection) {
    const description = {
      codecs: [],
      headerExtensions: [],
      fecMechanisms: [],
      rtcp: []
    };
    const lines = SDPUtils2.splitLines(mediaSection);
    const mline = lines[0].split(" ");
    description.profile = mline[2];
    for (let i2 = 3; i2 < mline.length; i2++) {
      const pt2 = mline[i2];
      const rtpmapline = SDPUtils2.matchPrefix(
        mediaSection,
        "a=rtpmap:" + pt2 + " "
      )[0];
      if (rtpmapline) {
        const codec = SDPUtils2.parseRtpMap(rtpmapline);
        const fmtps = SDPUtils2.matchPrefix(
          mediaSection,
          "a=fmtp:" + pt2 + " "
        );
        codec.parameters = fmtps.length ? SDPUtils2.parseFmtp(fmtps[0]) : {};
        codec.rtcpFeedback = SDPUtils2.matchPrefix(
          mediaSection,
          "a=rtcp-fb:" + pt2 + " "
        ).map(SDPUtils2.parseRtcpFb);
        description.codecs.push(codec);
        switch (codec.name.toUpperCase()) {
          case "RED":
          case "ULPFEC":
            description.fecMechanisms.push(codec.name.toUpperCase());
            break;
        }
      }
    }
    SDPUtils2.matchPrefix(mediaSection, "a=extmap:").forEach((line) => {
      description.headerExtensions.push(SDPUtils2.parseExtmap(line));
    });
    const wildcardRtcpFb = SDPUtils2.matchPrefix(mediaSection, "a=rtcp-fb:* ").map(SDPUtils2.parseRtcpFb);
    description.codecs.forEach((codec) => {
      wildcardRtcpFb.forEach((fb2) => {
        const duplicate = codec.rtcpFeedback.find((existingFeedback) => {
          return existingFeedback.type === fb2.type && existingFeedback.parameter === fb2.parameter;
        });
        if (!duplicate) {
          codec.rtcpFeedback.push(fb2);
        }
      });
    });
    return description;
  };
  SDPUtils2.writeRtpDescription = function(kind, caps) {
    let sdp2 = "";
    sdp2 += "m=" + kind + " ";
    sdp2 += caps.codecs.length > 0 ? "9" : "0";
    sdp2 += " " + (caps.profile || "UDP/TLS/RTP/SAVPF") + " ";
    sdp2 += caps.codecs.map((codec) => {
      if (codec.preferredPayloadType !== void 0) {
        return codec.preferredPayloadType;
      }
      return codec.payloadType;
    }).join(" ") + "\r\n";
    sdp2 += "c=IN IP4 0.0.0.0\r\n";
    sdp2 += "a=rtcp:9 IN IP4 0.0.0.0\r\n";
    caps.codecs.forEach((codec) => {
      sdp2 += SDPUtils2.writeRtpMap(codec);
      sdp2 += SDPUtils2.writeFmtp(codec);
      sdp2 += SDPUtils2.writeRtcpFb(codec);
    });
    let maxptime = 0;
    caps.codecs.forEach((codec) => {
      if (codec.maxptime > maxptime) {
        maxptime = codec.maxptime;
      }
    });
    if (maxptime > 0) {
      sdp2 += "a=maxptime:" + maxptime + "\r\n";
    }
    if (caps.headerExtensions) {
      caps.headerExtensions.forEach((extension) => {
        sdp2 += SDPUtils2.writeExtmap(extension);
      });
    }
    return sdp2;
  };
  SDPUtils2.parseRtpEncodingParameters = function(mediaSection) {
    const encodingParameters = [];
    const description = SDPUtils2.parseRtpParameters(mediaSection);
    const hasRed = description.fecMechanisms.indexOf("RED") !== -1;
    const hasUlpfec = description.fecMechanisms.indexOf("ULPFEC") !== -1;
    const ssrcs = SDPUtils2.matchPrefix(mediaSection, "a=ssrc:").map((line) => SDPUtils2.parseSsrcMedia(line)).filter((parts) => parts.attribute === "cname");
    const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
    let secondarySsrc;
    const flows = SDPUtils2.matchPrefix(mediaSection, "a=ssrc-group:FID").map((line) => {
      const parts = line.substring(17).split(" ");
      return parts.map((part) => parseInt(part, 10));
    });
    if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
      secondarySsrc = flows[0][1];
    }
    description.codecs.forEach((codec) => {
      if (codec.name.toUpperCase() === "RTX" && codec.parameters.apt) {
        let encParam = {
          ssrc: primarySsrc,
          codecPayloadType: parseInt(codec.parameters.apt, 10)
        };
        if (primarySsrc && secondarySsrc) {
          encParam.rtx = { ssrc: secondarySsrc };
        }
        encodingParameters.push(encParam);
        if (hasRed) {
          encParam = JSON.parse(JSON.stringify(encParam));
          encParam.fec = {
            ssrc: primarySsrc,
            mechanism: hasUlpfec ? "red+ulpfec" : "red"
          };
          encodingParameters.push(encParam);
        }
      }
    });
    if (encodingParameters.length === 0 && primarySsrc) {
      encodingParameters.push({
        ssrc: primarySsrc
      });
    }
    let bandwidth = SDPUtils2.matchPrefix(mediaSection, "b=");
    if (bandwidth.length) {
      if (bandwidth[0].indexOf("b=TIAS:") === 0) {
        bandwidth = parseInt(bandwidth[0].substring(7), 10);
      } else if (bandwidth[0].indexOf("b=AS:") === 0) {
        bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1e3 * 0.95 - 50 * 40 * 8;
      } else {
        bandwidth = void 0;
      }
      encodingParameters.forEach((params) => {
        params.maxBitrate = bandwidth;
      });
    }
    return encodingParameters;
  };
  SDPUtils2.parseRtcpParameters = function(mediaSection) {
    const rtcpParameters = {};
    const remoteSsrc = SDPUtils2.matchPrefix(mediaSection, "a=ssrc:").map((line) => SDPUtils2.parseSsrcMedia(line)).filter((obj) => obj.attribute === "cname")[0];
    if (remoteSsrc) {
      rtcpParameters.cname = remoteSsrc.value;
      rtcpParameters.ssrc = remoteSsrc.ssrc;
    }
    const rsize = SDPUtils2.matchPrefix(mediaSection, "a=rtcp-rsize");
    rtcpParameters.reducedSize = rsize.length > 0;
    rtcpParameters.compound = rsize.length === 0;
    const mux = SDPUtils2.matchPrefix(mediaSection, "a=rtcp-mux");
    rtcpParameters.mux = mux.length > 0;
    return rtcpParameters;
  };
  SDPUtils2.writeRtcpParameters = function(rtcpParameters) {
    let sdp2 = "";
    if (rtcpParameters.reducedSize) {
      sdp2 += "a=rtcp-rsize\r\n";
    }
    if (rtcpParameters.mux) {
      sdp2 += "a=rtcp-mux\r\n";
    }
    if (rtcpParameters.ssrc !== void 0 && rtcpParameters.cname) {
      sdp2 += "a=ssrc:" + rtcpParameters.ssrc + " cname:" + rtcpParameters.cname + "\r\n";
    }
    return sdp2;
  };
  SDPUtils2.parseMsid = function(mediaSection) {
    let parts;
    const spec = SDPUtils2.matchPrefix(mediaSection, "a=msid:");
    if (spec.length === 1) {
      parts = spec[0].substring(7).split(" ");
      return { stream: parts[0], track: parts[1] };
    }
    const planB = SDPUtils2.matchPrefix(mediaSection, "a=ssrc:").map((line) => SDPUtils2.parseSsrcMedia(line)).filter((msidParts) => msidParts.attribute === "msid");
    if (planB.length > 0) {
      parts = planB[0].value.split(" ");
      return { stream: parts[0], track: parts[1] };
    }
  };
  SDPUtils2.parseSctpDescription = function(mediaSection) {
    const mline = SDPUtils2.parseMLine(mediaSection);
    const maxSizeLine = SDPUtils2.matchPrefix(mediaSection, "a=max-message-size:");
    let maxMessageSize;
    if (maxSizeLine.length > 0) {
      maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
    }
    if (isNaN(maxMessageSize)) {
      maxMessageSize = 65536;
    }
    const sctpPort = SDPUtils2.matchPrefix(mediaSection, "a=sctp-port:");
    if (sctpPort.length > 0) {
      return {
        port: parseInt(sctpPort[0].substring(12), 10),
        protocol: mline.fmt,
        maxMessageSize
      };
    }
    const sctpMapLines = SDPUtils2.matchPrefix(mediaSection, "a=sctpmap:");
    if (sctpMapLines.length > 0) {
      const parts = sctpMapLines[0].substring(10).split(" ");
      return {
        port: parseInt(parts[0], 10),
        protocol: parts[1],
        maxMessageSize
      };
    }
  };
  SDPUtils2.writeSctpDescription = function(media, sctp) {
    let output = [];
    if (media.protocol !== "DTLS/SCTP") {
      output = [
        "m=" + media.kind + " 9 " + media.protocol + " " + sctp.protocol + "\r\n",
        "c=IN IP4 0.0.0.0\r\n",
        "a=sctp-port:" + sctp.port + "\r\n"
      ];
    } else {
      output = [
        "m=" + media.kind + " 9 " + media.protocol + " " + sctp.port + "\r\n",
        "c=IN IP4 0.0.0.0\r\n",
        "a=sctpmap:" + sctp.port + " " + sctp.protocol + " 65535\r\n"
      ];
    }
    if (sctp.maxMessageSize !== void 0) {
      output.push("a=max-message-size:" + sctp.maxMessageSize + "\r\n");
    }
    return output.join("");
  };
  SDPUtils2.generateSessionId = function() {
    return Math.random().toString().substr(2, 22);
  };
  SDPUtils2.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
    let sessionId;
    const version = sessVer !== void 0 ? sessVer : 2;
    if (sessId) {
      sessionId = sessId;
    } else {
      sessionId = SDPUtils2.generateSessionId();
    }
    const user = sessUser || "thisisadapterortc";
    return "v=0\r\no=" + user + " " + sessionId + " " + version + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n";
  };
  SDPUtils2.getDirection = function(mediaSection, sessionpart) {
    const lines = SDPUtils2.splitLines(mediaSection);
    for (let i2 = 0; i2 < lines.length; i2++) {
      switch (lines[i2]) {
        case "a=sendrecv":
        case "a=sendonly":
        case "a=recvonly":
        case "a=inactive":
          return lines[i2].substring(2);
      }
    }
    if (sessionpart) {
      return SDPUtils2.getDirection(sessionpart);
    }
    return "sendrecv";
  };
  SDPUtils2.getKind = function(mediaSection) {
    const lines = SDPUtils2.splitLines(mediaSection);
    const mline = lines[0].split(" ");
    return mline[0].substring(2);
  };
  SDPUtils2.isRejected = function(mediaSection) {
    return mediaSection.split(" ", 2)[1] === "0";
  };
  SDPUtils2.parseMLine = function(mediaSection) {
    const lines = SDPUtils2.splitLines(mediaSection);
    const parts = lines[0].substring(2).split(" ");
    return {
      kind: parts[0],
      port: parseInt(parts[1], 10),
      protocol: parts[2],
      fmt: parts.slice(3).join(" ")
    };
  };
  SDPUtils2.parseOLine = function(mediaSection) {
    const line = SDPUtils2.matchPrefix(mediaSection, "o=")[0];
    const parts = line.substring(2).split(" ");
    return {
      username: parts[0],
      sessionId: parts[1],
      sessionVersion: parseInt(parts[2], 10),
      netType: parts[3],
      addressType: parts[4],
      address: parts[5]
    };
  };
  SDPUtils2.isValidSDP = function(blob) {
    if (typeof blob !== "string" || blob.length === 0) {
      return false;
    }
    const lines = SDPUtils2.splitLines(blob);
    for (let i2 = 0; i2 < lines.length; i2++) {
      if (lines[i2].length < 2 || lines[i2].charAt(1) !== "=") {
        return false;
      }
    }
    return true;
  };
  {
    module.exports = SDPUtils2;
  }
})(sdp$1);
var SDPUtils = sdp$1.exports;
var sdp = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  "default": SDPUtils
}, [sdp$1.exports]);
function shimRTCIceCandidate(window2) {
  if (!window2.RTCIceCandidate || window2.RTCIceCandidate && "foundation" in window2.RTCIceCandidate.prototype) {
    return;
  }
  const NativeRTCIceCandidate = window2.RTCIceCandidate;
  window2.RTCIceCandidate = function RTCIceCandidate(args) {
    if (typeof args === "object" && args.candidate && args.candidate.indexOf("a=") === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substring(2);
    }
    if (args.candidate && args.candidate.length) {
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);
      for (const key in parsedCandidate) {
        if (!(key in nativeCandidate)) {
          Object.defineProperty(
            nativeCandidate,
            key,
            { value: parsedCandidate[key] }
          );
        }
      }
      nativeCandidate.toJSON = function toJSON() {
        return {
          candidate: nativeCandidate.candidate,
          sdpMid: nativeCandidate.sdpMid,
          sdpMLineIndex: nativeCandidate.sdpMLineIndex,
          usernameFragment: nativeCandidate.usernameFragment
        };
      };
      return nativeCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window2.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;
  wrapPeerConnectionEvent(window2, "icecandidate", (e2) => {
    if (e2.candidate) {
      Object.defineProperty(e2, "candidate", {
        value: new window2.RTCIceCandidate(e2.candidate),
        writable: "false"
      });
    }
    return e2;
  });
}
function shimRTCIceCandidateRelayProtocol(window2) {
  if (!window2.RTCIceCandidate || window2.RTCIceCandidate && "relayProtocol" in window2.RTCIceCandidate.prototype) {
    return;
  }
  wrapPeerConnectionEvent(window2, "icecandidate", (e2) => {
    if (e2.candidate) {
      const parsedCandidate = SDPUtils.parseCandidate(e2.candidate.candidate);
      if (parsedCandidate.type === "relay") {
        e2.candidate.relayProtocol = {
          0: "tls",
          1: "tcp",
          2: "udp"
        }[parsedCandidate.priority >> 24];
      }
    }
    return e2;
  });
}
function shimMaxMessageSize(window2, browserDetails) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  if (!("sctp" in window2.RTCPeerConnection.prototype)) {
    Object.defineProperty(window2.RTCPeerConnection.prototype, "sctp", {
      get() {
        return typeof this._sctp === "undefined" ? null : this._sctp;
      }
    });
  }
  const sctpInDescription = function(description) {
    if (!description || !description.sdp) {
      return false;
    }
    const sections = SDPUtils.splitSections(description.sdp);
    sections.shift();
    return sections.some((mediaSection) => {
      const mLine = SDPUtils.parseMLine(mediaSection);
      return mLine && mLine.kind === "application" && mLine.protocol.indexOf("SCTP") !== -1;
    });
  };
  const getRemoteFirefoxVersion = function(description) {
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    const version = parseInt(match[1], 10);
    return version !== version ? -1 : version;
  };
  const getCanSendMaxMessageSize = function(remoteIsFirefox) {
    let canSendMaxMessageSize = 65536;
    if (browserDetails.browser === "firefox") {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          canSendMaxMessageSize = 16384;
        } else {
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
      } else {
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };
  const getMaxMessageSize = function(description, remoteIsFirefox) {
    let maxMessageSize = 65536;
    if (browserDetails.browser === "firefox" && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }
    const match = SDPUtils.matchPrefix(
      description.sdp,
      "a=max-message-size:"
    );
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substring(19), 10);
    } else if (browserDetails.browser === "firefox" && remoteIsFirefox !== -1) {
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };
  const origSetRemoteDescription = window2.RTCPeerConnection.prototype.setRemoteDescription;
  window2.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
    this._sctp = null;
    if (browserDetails.browser === "chrome" && browserDetails.version >= 76) {
      const { sdpSemantics } = this.getConfiguration();
      if (sdpSemantics === "plan-b") {
        Object.defineProperty(this, "sctp", {
          get() {
            return typeof this._sctp === "undefined" ? null : this._sctp;
          },
          enumerable: true,
          configurable: true
        });
      }
    }
    if (sctpInDescription(arguments[0])) {
      const isFirefox = getRemoteFirefoxVersion(arguments[0]);
      const canSendMMS = getCanSendMaxMessageSize(isFirefox);
      const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);
      let maxMessageSize;
      if (canSendMMS === 0 && remoteMMS === 0) {
        maxMessageSize = Number.POSITIVE_INFINITY;
      } else if (canSendMMS === 0 || remoteMMS === 0) {
        maxMessageSize = Math.max(canSendMMS, remoteMMS);
      } else {
        maxMessageSize = Math.min(canSendMMS, remoteMMS);
      }
      const sctp = {};
      Object.defineProperty(sctp, "maxMessageSize", {
        get() {
          return maxMessageSize;
        }
      });
      this._sctp = sctp;
    }
    return origSetRemoteDescription.apply(this, arguments);
  };
}
function shimSendThrowTypeError(window2) {
  if (!(window2.RTCPeerConnection && "createDataChannel" in window2.RTCPeerConnection.prototype)) {
    return;
  }
  function wrapDcSend(dc2, pc2) {
    const origDataChannelSend = dc2.send;
    dc2.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;
      if (dc2.readyState === "open" && pc2.sctp && length > pc2.sctp.maxMessageSize) {
        throw new TypeError("Message too large (can send a maximum of " + pc2.sctp.maxMessageSize + " bytes)");
      }
      return origDataChannelSend.apply(dc2, arguments);
    };
  }
  const origCreateDataChannel = window2.RTCPeerConnection.prototype.createDataChannel;
  window2.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
    const dataChannel = origCreateDataChannel.apply(this, arguments);
    wrapDcSend(dataChannel, this);
    return dataChannel;
  };
  wrapPeerConnectionEvent(window2, "datachannel", (e2) => {
    wrapDcSend(e2.channel, e2.target);
    return e2;
  });
}
function shimConnectionState(window2) {
  if (!window2.RTCPeerConnection || "connectionState" in window2.RTCPeerConnection.prototype) {
    return;
  }
  const proto = window2.RTCPeerConnection.prototype;
  Object.defineProperty(proto, "connectionState", {
    get() {
      return {
        completed: "connected",
        checking: "connecting"
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, "onconnectionstatechange", {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb2) {
      if (this._onconnectionstatechange) {
        this.removeEventListener(
          "connectionstatechange",
          this._onconnectionstatechange
        );
        delete this._onconnectionstatechange;
      }
      if (cb2) {
        this.addEventListener(
          "connectionstatechange",
          this._onconnectionstatechange = cb2
        );
      }
    },
    enumerable: true,
    configurable: true
  });
  ["setLocalDescription", "setRemoteDescription"].forEach((method) => {
    const origMethod = proto[method];
    proto[method] = function() {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = (e2) => {
          const pc2 = e2.target;
          if (pc2._lastConnectionState !== pc2.connectionState) {
            pc2._lastConnectionState = pc2.connectionState;
            const newEvent = new Event("connectionstatechange", e2);
            pc2.dispatchEvent(newEvent);
          }
          return e2;
        };
        this.addEventListener(
          "iceconnectionstatechange",
          this._connectionstatechangepoly
        );
      }
      return origMethod.apply(this, arguments);
    };
  });
}
function removeExtmapAllowMixed(window2, browserDetails) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  if (browserDetails.browser === "chrome" && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === "safari" && browserDetails.version >= 605) {
    return;
  }
  const nativeSRD = window2.RTCPeerConnection.prototype.setRemoteDescription;
  window2.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf("\na=extmap-allow-mixed") !== -1) {
      const sdp2 = desc.sdp.split("\n").filter((line) => {
        return line.trim() !== "a=extmap-allow-mixed";
      }).join("\n");
      if (window2.RTCSessionDescription && desc instanceof window2.RTCSessionDescription) {
        arguments[0] = new window2.RTCSessionDescription({
          type: desc.type,
          sdp: sdp2
        });
      } else {
        desc.sdp = sdp2;
      }
    }
    return nativeSRD.apply(this, arguments);
  };
}
function shimAddIceCandidateNullOrEmpty(window2, browserDetails) {
  if (!(window2.RTCPeerConnection && window2.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeAddIceCandidate = window2.RTCPeerConnection.prototype.addIceCandidate;
  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }
  window2.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
    if (!arguments[0]) {
      if (arguments[1]) {
        arguments[1].apply(null);
      }
      return Promise.resolve();
    }
    if ((browserDetails.browser === "chrome" && browserDetails.version < 78 || browserDetails.browser === "firefox" && browserDetails.version < 68 || browserDetails.browser === "safari") && arguments[0] && arguments[0].candidate === "") {
      return Promise.resolve();
    }
    return nativeAddIceCandidate.apply(this, arguments);
  };
}
function shimParameterlessSetLocalDescription(window2, browserDetails) {
  if (!(window2.RTCPeerConnection && window2.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeSetLocalDescription = window2.RTCPeerConnection.prototype.setLocalDescription;
  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }
  window2.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    let desc = arguments[0] || {};
    if (typeof desc !== "object" || desc.type && desc.sdp) {
      return nativeSetLocalDescription.apply(this, arguments);
    }
    desc = { type: desc.type, sdp: desc.sdp };
    if (!desc.type) {
      switch (this.signalingState) {
        case "stable":
        case "have-local-offer":
        case "have-remote-pranswer":
          desc.type = "offer";
          break;
        default:
          desc.type = "answer";
          break;
      }
    }
    if (desc.sdp || desc.type !== "offer" && desc.type !== "answer") {
      return nativeSetLocalDescription.apply(this, [desc]);
    }
    const func = desc.type === "offer" ? this.createOffer : this.createAnswer;
    return func.apply(this).then((d2) => nativeSetLocalDescription.apply(this, [d2]));
  };
}
var commonShim = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  shimRTCIceCandidate,
  shimRTCIceCandidateRelayProtocol,
  shimMaxMessageSize,
  shimSendThrowTypeError,
  shimConnectionState,
  removeExtmapAllowMixed,
  shimAddIceCandidateNullOrEmpty,
  shimParameterlessSetLocalDescription
}, Symbol.toStringTag, { value: "Module" }));
function adapterFactory({ window: window2 } = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimSafari: true
}) {
  const logging2 = log;
  const browserDetails = detectBrowser(window2);
  const adapter2 = {
    browserDetails,
    commonShim,
    extractVersion,
    disableLog,
    disableWarnings,
    sdp
  };
  switch (browserDetails.browser) {
    case "chrome":
      if (!chromeShim || !shimPeerConnection$1 || !options.shimChrome) {
        logging2("Chrome shim is not included in this adapter release.");
        return adapter2;
      }
      if (browserDetails.version === null) {
        logging2("Chrome shim can not determine version, not shimming.");
        return adapter2;
      }
      logging2("adapter.js shimming chrome.");
      adapter2.browserShim = chromeShim;
      shimAddIceCandidateNullOrEmpty(window2, browserDetails);
      shimParameterlessSetLocalDescription(window2);
      shimGetUserMedia$2(window2, browserDetails);
      shimMediaStream(window2);
      shimPeerConnection$1(window2, browserDetails);
      shimOnTrack$1(window2);
      shimAddTrackRemoveTrack(window2, browserDetails);
      shimGetSendersWithDtmf(window2);
      shimGetStats(window2);
      shimSenderReceiverGetStats(window2);
      fixNegotiationNeeded(window2, browserDetails);
      shimRTCIceCandidate(window2);
      shimRTCIceCandidateRelayProtocol(window2);
      shimConnectionState(window2);
      shimMaxMessageSize(window2, browserDetails);
      shimSendThrowTypeError(window2);
      removeExtmapAllowMixed(window2, browserDetails);
      break;
    case "firefox":
      if (!firefoxShim || !shimPeerConnection || !options.shimFirefox) {
        logging2("Firefox shim is not included in this adapter release.");
        return adapter2;
      }
      logging2("adapter.js shimming firefox.");
      adapter2.browserShim = firefoxShim;
      shimAddIceCandidateNullOrEmpty(window2, browserDetails);
      shimParameterlessSetLocalDescription(window2);
      shimGetUserMedia$1(window2, browserDetails);
      shimPeerConnection(window2, browserDetails);
      shimOnTrack(window2);
      shimRemoveStream(window2);
      shimSenderGetStats(window2);
      shimReceiverGetStats(window2);
      shimRTCDataChannel(window2);
      shimAddTransceiver(window2);
      shimGetParameters(window2);
      shimCreateOffer(window2);
      shimCreateAnswer(window2);
      shimRTCIceCandidate(window2);
      shimConnectionState(window2);
      shimMaxMessageSize(window2, browserDetails);
      shimSendThrowTypeError(window2);
      break;
    case "safari":
      if (!safariShim || !options.shimSafari) {
        logging2("Safari shim is not included in this adapter release.");
        return adapter2;
      }
      logging2("adapter.js shimming safari.");
      adapter2.browserShim = safariShim;
      shimAddIceCandidateNullOrEmpty(window2, browserDetails);
      shimParameterlessSetLocalDescription(window2);
      shimRTCIceServerUrls(window2);
      shimCreateOfferLegacy(window2);
      shimCallbacksAPI(window2);
      shimLocalStreamsAPI(window2);
      shimRemoteStreamsAPI(window2);
      shimTrackEventTransceiver(window2);
      shimGetUserMedia(window2);
      shimAudioContext(window2);
      shimRTCIceCandidate(window2);
      shimRTCIceCandidateRelayProtocol(window2);
      shimMaxMessageSize(window2, browserDetails);
      shimSendThrowTypeError(window2);
      removeExtmapAllowMixed(window2, browserDetails);
      break;
    default:
      logging2("Unsupported browser!");
      break;
  }
  return adapter2;
}
const adapter = adapterFactory({ window: typeof window === "undefined" ? void 0 : window });
var eventemitter2 = { exports: {} };
/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */
(function(module, exports) {
  !function(undefined$1) {
    var hasOwnProperty = Object.hasOwnProperty;
    var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
      return Object.prototype.toString.call(obj) === "[object Array]";
    };
    var defaultMaxListeners2 = 10;
    var nextTickSupported = typeof process == "object" && typeof process.nextTick == "function";
    var symbolsSupported = typeof Symbol === "function";
    var reflectSupported = typeof Reflect === "object";
    var setImmediateSupported = typeof setImmediate === "function";
    var _setImmediate = setImmediateSupported ? setImmediate : setTimeout;
    var ownKeys = symbolsSupported ? reflectSupported && typeof Reflect.ownKeys === "function" ? Reflect.ownKeys : function(obj) {
      var arr = Object.getOwnPropertyNames(obj);
      arr.push.apply(arr, Object.getOwnPropertySymbols(obj));
      return arr;
    } : Object.keys;
    function init() {
      this._events = {};
      if (this._conf) {
        configure.call(this, this._conf);
      }
    }
    function configure(conf) {
      if (conf) {
        this._conf = conf;
        conf.delimiter && (this.delimiter = conf.delimiter);
        if (conf.maxListeners !== undefined$1) {
          this._maxListeners = conf.maxListeners;
        }
        conf.wildcard && (this.wildcard = conf.wildcard);
        conf.newListener && (this._newListener = conf.newListener);
        conf.removeListener && (this._removeListener = conf.removeListener);
        conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);
        conf.ignoreErrors && (this.ignoreErrors = conf.ignoreErrors);
        if (this.wildcard) {
          this.listenerTree = {};
        }
      }
    }
    function logPossibleMemoryLeak(count, eventName) {
      var errorMsg = "(node) warning: possible EventEmitter memory leak detected. " + count + " listeners added. Use emitter.setMaxListeners() to increase limit.";
      if (this.verboseMemoryLeak) {
        errorMsg += " Event name: " + eventName + ".";
      }
      if (typeof process !== "undefined" && process.emitWarning) {
        var e2 = new Error(errorMsg);
        e2.name = "MaxListenersExceededWarning";
        e2.emitter = this;
        e2.count = count;
        process.emitWarning(e2);
      } else {
        console.error(errorMsg);
        if (console.trace) {
          console.trace();
        }
      }
    }
    var toArray = function(a2, b2, c2) {
      var n9 = arguments.length;
      switch (n9) {
        case 0:
          return [];
        case 1:
          return [a2];
        case 2:
          return [a2, b2];
        case 3:
          return [a2, b2, c2];
        default:
          var arr = new Array(n9);
          while (n9--) {
            arr[n9] = arguments[n9];
          }
          return arr;
      }
    };
    function toObject(keys, values) {
      var obj = {};
      var key;
      var len = keys.length;
      var valuesCount = values ? values.length : 0;
      for (var i2 = 0; i2 < len; i2++) {
        key = keys[i2];
        obj[key] = i2 < valuesCount ? values[i2] : undefined$1;
      }
      return obj;
    }
    function TargetObserver(emitter, target, options) {
      this._emitter = emitter;
      this._target = target;
      this._listeners = {};
      this._listenersCount = 0;
      var on2, off;
      if (options.on || options.off) {
        on2 = options.on;
        off = options.off;
      }
      if (target.addEventListener) {
        on2 = target.addEventListener;
        off = target.removeEventListener;
      } else if (target.addListener) {
        on2 = target.addListener;
        off = target.removeListener;
      } else if (target.on) {
        on2 = target.on;
        off = target.off;
      }
      if (!on2 && !off) {
        throw Error("target does not implement any known event API");
      }
      if (typeof on2 !== "function") {
        throw TypeError("on method must be a function");
      }
      if (typeof off !== "function") {
        throw TypeError("off method must be a function");
      }
      this._on = on2;
      this._off = off;
      var _observers = emitter._observers;
      if (_observers) {
        _observers.push(this);
      } else {
        emitter._observers = [this];
      }
    }
    Object.assign(TargetObserver.prototype, {
      subscribe: function(event, localEvent, reducer) {
        var observer = this;
        var target = this._target;
        var emitter = this._emitter;
        var listeners2 = this._listeners;
        var handler = function() {
          var args = toArray.apply(null, arguments);
          var eventObj = {
            data: args,
            name: localEvent,
            original: event
          };
          if (reducer) {
            var result = reducer.call(target, eventObj);
            if (result !== false) {
              emitter.emit.apply(emitter, [eventObj.name].concat(args));
            }
            return;
          }
          emitter.emit.apply(emitter, [localEvent].concat(args));
        };
        if (listeners2[event]) {
          throw Error("Event '" + event + "' is already listening");
        }
        this._listenersCount++;
        if (emitter._newListener && emitter._removeListener && !observer._onNewListener) {
          this._onNewListener = function(_event) {
            if (_event === localEvent && listeners2[event] === null) {
              listeners2[event] = handler;
              observer._on.call(target, event, handler);
            }
          };
          emitter.on("newListener", this._onNewListener);
          this._onRemoveListener = function(_event) {
            if (_event === localEvent && !emitter.hasListeners(_event) && listeners2[event]) {
              listeners2[event] = null;
              observer._off.call(target, event, handler);
            }
          };
          listeners2[event] = null;
          emitter.on("removeListener", this._onRemoveListener);
        } else {
          listeners2[event] = handler;
          observer._on.call(target, event, handler);
        }
      },
      unsubscribe: function(event) {
        var observer = this;
        var listeners2 = this._listeners;
        var emitter = this._emitter;
        var handler;
        var events;
        var off = this._off;
        var target = this._target;
        var i2;
        if (event && typeof event !== "string") {
          throw TypeError("event must be a string");
        }
        function clearRefs() {
          if (observer._onNewListener) {
            emitter.off("newListener", observer._onNewListener);
            emitter.off("removeListener", observer._onRemoveListener);
            observer._onNewListener = null;
            observer._onRemoveListener = null;
          }
          var index2 = findTargetIndex.call(emitter, observer);
          emitter._observers.splice(index2, 1);
        }
        if (event) {
          handler = listeners2[event];
          if (!handler)
            return;
          off.call(target, event, handler);
          delete listeners2[event];
          if (!--this._listenersCount) {
            clearRefs();
          }
        } else {
          events = ownKeys(listeners2);
          i2 = events.length;
          while (i2-- > 0) {
            event = events[i2];
            off.call(target, event, listeners2[event]);
          }
          this._listeners = {};
          this._listenersCount = 0;
          clearRefs();
        }
      }
    });
    function resolveOptions(options, schema, reducers, allowUnknown) {
      var computedOptions = Object.assign({}, schema);
      if (!options)
        return computedOptions;
      if (typeof options !== "object") {
        throw TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var length = keys.length;
      var option, value;
      var reducer;
      function reject(reason) {
        throw Error('Invalid "' + option + '" option value' + (reason ? ". Reason: " + reason : ""));
      }
      for (var i2 = 0; i2 < length; i2++) {
        option = keys[i2];
        if (!allowUnknown && !hasOwnProperty.call(schema, option)) {
          throw Error('Unknown "' + option + '" option');
        }
        value = options[option];
        if (value !== undefined$1) {
          reducer = reducers[option];
          computedOptions[option] = reducer ? reducer(value, reject) : value;
        }
      }
      return computedOptions;
    }
    function constructorReducer(value, reject) {
      if (typeof value !== "function" || !value.hasOwnProperty("prototype")) {
        reject("value must be a constructor");
      }
      return value;
    }
    function makeTypeReducer(types) {
      var message = "value must be type of " + types.join("|");
      var len = types.length;
      var firstType = types[0];
      var secondType = types[1];
      if (len === 1) {
        return function(v2, reject) {
          if (typeof v2 === firstType) {
            return v2;
          }
          reject(message);
        };
      }
      if (len === 2) {
        return function(v2, reject) {
          var kind = typeof v2;
          if (kind === firstType || kind === secondType)
            return v2;
          reject(message);
        };
      }
      return function(v2, reject) {
        var kind = typeof v2;
        var i2 = len;
        while (i2-- > 0) {
          if (kind === types[i2])
            return v2;
        }
        reject(message);
      };
    }
    var functionReducer = makeTypeReducer(["function"]);
    var objectFunctionReducer = makeTypeReducer(["object", "function"]);
    function makeCancelablePromise(Promise2, executor, options) {
      var isCancelable;
      var callbacks;
      var timer = 0;
      var subscriptionClosed;
      var promise = new Promise2(function(resolve, reject, onCancel) {
        options = resolveOptions(options, {
          timeout: 0,
          overload: false
        }, {
          timeout: function(value, reject2) {
            value *= 1;
            if (typeof value !== "number" || value < 0 || !Number.isFinite(value)) {
              reject2("timeout must be a positive number");
            }
            return value;
          }
        });
        isCancelable = !options.overload && typeof Promise2.prototype.cancel === "function" && typeof onCancel === "function";
        function cleanup() {
          if (callbacks) {
            callbacks = null;
          }
          if (timer) {
            clearTimeout(timer);
            timer = 0;
          }
        }
        var _resolve = function(value) {
          cleanup();
          resolve(value);
        };
        var _reject = function(err) {
          cleanup();
          reject(err);
        };
        if (isCancelable) {
          executor(_resolve, _reject, onCancel);
        } else {
          callbacks = [function(reason) {
            _reject(reason || Error("canceled"));
          }];
          executor(_resolve, _reject, function(cb2) {
            if (subscriptionClosed) {
              throw Error("Unable to subscribe on cancel event asynchronously");
            }
            if (typeof cb2 !== "function") {
              throw TypeError("onCancel callback must be a function");
            }
            callbacks.push(cb2);
          });
          subscriptionClosed = true;
        }
        if (options.timeout > 0) {
          timer = setTimeout(function() {
            var reason = Error("timeout");
            reason.code = "ETIMEDOUT";
            timer = 0;
            promise.cancel(reason);
            reject(reason);
          }, options.timeout);
        }
      });
      if (!isCancelable) {
        promise.cancel = function(reason) {
          if (!callbacks) {
            return;
          }
          var length = callbacks.length;
          for (var i2 = 1; i2 < length; i2++) {
            callbacks[i2](reason);
          }
          callbacks[0](reason);
          callbacks = null;
        };
      }
      return promise;
    }
    function findTargetIndex(observer) {
      var observers = this._observers;
      if (!observers) {
        return -1;
      }
      var len = observers.length;
      for (var i2 = 0; i2 < len; i2++) {
        if (observers[i2]._target === observer)
          return i2;
      }
      return -1;
    }
    function searchListenerTree(handlers, type, tree, i2, typeLength) {
      if (!tree) {
        return null;
      }
      if (i2 === 0) {
        var kind = typeof type;
        if (kind === "string") {
          var ns2, n9, l2 = 0, j2 = 0, delimiter = this.delimiter, dl2 = delimiter.length;
          if ((n9 = type.indexOf(delimiter)) !== -1) {
            ns2 = new Array(5);
            do {
              ns2[l2++] = type.slice(j2, n9);
              j2 = n9 + dl2;
            } while ((n9 = type.indexOf(delimiter, j2)) !== -1);
            ns2[l2++] = type.slice(j2);
            type = ns2;
            typeLength = l2;
          } else {
            type = [type];
            typeLength = 1;
          }
        } else if (kind === "object") {
          typeLength = type.length;
        } else {
          type = [type];
          typeLength = 1;
        }
      }
      var listeners2 = null, branch, xTree, xxTree, isolatedBranch, endReached, currentType = type[i2], nextType = type[i2 + 1], branches, _listeners2;
      if (i2 === typeLength) {
        if (tree._listeners) {
          if (typeof tree._listeners === "function") {
            handlers && handlers.push(tree._listeners);
            listeners2 = [tree];
          } else {
            handlers && handlers.push.apply(handlers, tree._listeners);
            listeners2 = [tree];
          }
        }
      } else {
        if (currentType === "*") {
          branches = ownKeys(tree);
          n9 = branches.length;
          while (n9-- > 0) {
            branch = branches[n9];
            if (branch !== "_listeners") {
              _listeners2 = searchListenerTree(handlers, type, tree[branch], i2 + 1, typeLength);
              if (_listeners2) {
                if (listeners2) {
                  listeners2.push.apply(listeners2, _listeners2);
                } else {
                  listeners2 = _listeners2;
                }
              }
            }
          }
          return listeners2;
        } else if (currentType === "**") {
          endReached = i2 + 1 === typeLength || i2 + 2 === typeLength && nextType === "*";
          if (endReached && tree._listeners) {
            listeners2 = searchListenerTree(handlers, type, tree, typeLength, typeLength);
          }
          branches = ownKeys(tree);
          n9 = branches.length;
          while (n9-- > 0) {
            branch = branches[n9];
            if (branch !== "_listeners") {
              if (branch === "*" || branch === "**") {
                if (tree[branch]._listeners && !endReached) {
                  _listeners2 = searchListenerTree(handlers, type, tree[branch], typeLength, typeLength);
                  if (_listeners2) {
                    if (listeners2) {
                      listeners2.push.apply(listeners2, _listeners2);
                    } else {
                      listeners2 = _listeners2;
                    }
                  }
                }
                _listeners2 = searchListenerTree(handlers, type, tree[branch], i2, typeLength);
              } else if (branch === nextType) {
                _listeners2 = searchListenerTree(handlers, type, tree[branch], i2 + 2, typeLength);
              } else {
                _listeners2 = searchListenerTree(handlers, type, tree[branch], i2, typeLength);
              }
              if (_listeners2) {
                if (listeners2) {
                  listeners2.push.apply(listeners2, _listeners2);
                } else {
                  listeners2 = _listeners2;
                }
              }
            }
          }
          return listeners2;
        } else if (tree[currentType]) {
          listeners2 = searchListenerTree(handlers, type, tree[currentType], i2 + 1, typeLength);
        }
      }
      xTree = tree["*"];
      if (xTree) {
        searchListenerTree(handlers, type, xTree, i2 + 1, typeLength);
      }
      xxTree = tree["**"];
      if (xxTree) {
        if (i2 < typeLength) {
          if (xxTree._listeners) {
            searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
          }
          branches = ownKeys(xxTree);
          n9 = branches.length;
          while (n9-- > 0) {
            branch = branches[n9];
            if (branch !== "_listeners") {
              if (branch === nextType) {
                searchListenerTree(handlers, type, xxTree[branch], i2 + 2, typeLength);
              } else if (branch === currentType) {
                searchListenerTree(handlers, type, xxTree[branch], i2 + 1, typeLength);
              } else {
                isolatedBranch = {};
                isolatedBranch[branch] = xxTree[branch];
                searchListenerTree(handlers, type, { "**": isolatedBranch }, i2 + 1, typeLength);
              }
            }
          }
        } else if (xxTree._listeners) {
          searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
        } else if (xxTree["*"] && xxTree["*"]._listeners) {
          searchListenerTree(handlers, type, xxTree["*"], typeLength, typeLength);
        }
      }
      return listeners2;
    }
    function growListenerTree(type, listener, prepend) {
      var len = 0, j2 = 0, i2, delimiter = this.delimiter, dl2 = delimiter.length, ns2;
      if (typeof type === "string") {
        if ((i2 = type.indexOf(delimiter)) !== -1) {
          ns2 = new Array(5);
          do {
            ns2[len++] = type.slice(j2, i2);
            j2 = i2 + dl2;
          } while ((i2 = type.indexOf(delimiter, j2)) !== -1);
          ns2[len++] = type.slice(j2);
        } else {
          ns2 = [type];
          len = 1;
        }
      } else {
        ns2 = type;
        len = type.length;
      }
      if (len > 1) {
        for (i2 = 0; i2 + 1 < len; i2++) {
          if (ns2[i2] === "**" && ns2[i2 + 1] === "**") {
            return;
          }
        }
      }
      var tree = this.listenerTree, name;
      for (i2 = 0; i2 < len; i2++) {
        name = ns2[i2];
        tree = tree[name] || (tree[name] = {});
        if (i2 === len - 1) {
          if (!tree._listeners) {
            tree._listeners = listener;
          } else {
            if (typeof tree._listeners === "function") {
              tree._listeners = [tree._listeners];
            }
            if (prepend) {
              tree._listeners.unshift(listener);
            } else {
              tree._listeners.push(listener);
            }
            if (!tree._listeners.warned && this._maxListeners > 0 && tree._listeners.length > this._maxListeners) {
              tree._listeners.warned = true;
              logPossibleMemoryLeak.call(this, tree._listeners.length, name);
            }
          }
          return true;
        }
      }
      return true;
    }
    function collectTreeEvents(tree, events, root2, asArray) {
      var branches = ownKeys(tree);
      var i2 = branches.length;
      var branch, branchName, path;
      var hasListeners = tree["_listeners"];
      var isArrayPath;
      while (i2-- > 0) {
        branchName = branches[i2];
        branch = tree[branchName];
        if (branchName === "_listeners") {
          path = root2;
        } else {
          path = root2 ? root2.concat(branchName) : [branchName];
        }
        isArrayPath = asArray || typeof branchName === "symbol";
        hasListeners && events.push(isArrayPath ? path : path.join(this.delimiter));
        if (typeof branch === "object") {
          collectTreeEvents.call(this, branch, events, path, isArrayPath);
        }
      }
      return events;
    }
    function recursivelyGarbageCollect(root2) {
      var keys = ownKeys(root2);
      var i2 = keys.length;
      var obj, key, flag;
      while (i2-- > 0) {
        key = keys[i2];
        obj = root2[key];
        if (obj) {
          flag = true;
          if (key !== "_listeners" && !recursivelyGarbageCollect(obj)) {
            delete root2[key];
          }
        }
      }
      return flag;
    }
    function Listener(emitter, event, listener) {
      this.emitter = emitter;
      this.event = event;
      this.listener = listener;
    }
    Listener.prototype.off = function() {
      this.emitter.off(this.event, this.listener);
      return this;
    };
    function setupListener(event, listener, options) {
      if (options === true) {
        promisify = true;
      } else if (options === false) {
        async = true;
      } else {
        if (!options || typeof options !== "object") {
          throw TypeError("options should be an object or true");
        }
        var async = options.async;
        var promisify = options.promisify;
        var nextTick = options.nextTick;
        var objectify = options.objectify;
      }
      if (async || nextTick || promisify) {
        var _listener = listener;
        var _origin = listener._origin || listener;
        if (nextTick && !nextTickSupported) {
          throw Error("process.nextTick is not supported");
        }
        if (promisify === undefined$1) {
          promisify = listener.constructor.name === "AsyncFunction";
        }
        listener = function() {
          var args = arguments;
          var context2 = this;
          var event2 = this.event;
          return promisify ? nextTick ? Promise.resolve() : new Promise(function(resolve) {
            _setImmediate(resolve);
          }).then(function() {
            context2.event = event2;
            return _listener.apply(context2, args);
          }) : (nextTick ? process.nextTick : _setImmediate)(function() {
            context2.event = event2;
            _listener.apply(context2, args);
          });
        };
        listener._async = true;
        listener._origin = _origin;
      }
      return [listener, objectify ? new Listener(this, event, listener) : this];
    }
    function EventEmitter2(conf) {
      this._events = {};
      this._newListener = false;
      this._removeListener = false;
      this.verboseMemoryLeak = false;
      configure.call(this, conf);
    }
    EventEmitter2.EventEmitter2 = EventEmitter2;
    EventEmitter2.prototype.listenTo = function(target, events, options) {
      if (typeof target !== "object") {
        throw TypeError("target musts be an object");
      }
      var emitter = this;
      options = resolveOptions(options, {
        on: undefined$1,
        off: undefined$1,
        reducers: undefined$1
      }, {
        on: functionReducer,
        off: functionReducer,
        reducers: objectFunctionReducer
      });
      function listen(events2) {
        if (typeof events2 !== "object") {
          throw TypeError("events must be an object");
        }
        var reducers = options.reducers;
        var index2 = findTargetIndex.call(emitter, target);
        var observer;
        if (index2 === -1) {
          observer = new TargetObserver(emitter, target, options);
        } else {
          observer = emitter._observers[index2];
        }
        var keys = ownKeys(events2);
        var len = keys.length;
        var event;
        var isSingleReducer = typeof reducers === "function";
        for (var i2 = 0; i2 < len; i2++) {
          event = keys[i2];
          observer.subscribe(
            event,
            events2[event] || event,
            isSingleReducer ? reducers : reducers && reducers[event]
          );
        }
      }
      isArray(events) ? listen(toObject(events)) : typeof events === "string" ? listen(toObject(events.split(/\s+/))) : listen(events);
      return this;
    };
    EventEmitter2.prototype.stopListeningTo = function(target, event) {
      var observers = this._observers;
      if (!observers) {
        return false;
      }
      var i2 = observers.length;
      var observer;
      var matched = false;
      if (target && typeof target !== "object") {
        throw TypeError("target should be an object");
      }
      while (i2-- > 0) {
        observer = observers[i2];
        if (!target || observer._target === target) {
          observer.unsubscribe(event);
          matched = true;
        }
      }
      return matched;
    };
    EventEmitter2.prototype.delimiter = ".";
    EventEmitter2.prototype.setMaxListeners = function(n9) {
      if (n9 !== undefined$1) {
        this._maxListeners = n9;
        if (!this._conf)
          this._conf = {};
        this._conf.maxListeners = n9;
      }
    };
    EventEmitter2.prototype.getMaxListeners = function() {
      return this._maxListeners;
    };
    EventEmitter2.prototype.event = "";
    EventEmitter2.prototype.once = function(event, fn2, options) {
      return this._once(event, fn2, false, options);
    };
    EventEmitter2.prototype.prependOnceListener = function(event, fn2, options) {
      return this._once(event, fn2, true, options);
    };
    EventEmitter2.prototype._once = function(event, fn2, prepend, options) {
      return this._many(event, 1, fn2, prepend, options);
    };
    EventEmitter2.prototype.many = function(event, ttl, fn2, options) {
      return this._many(event, ttl, fn2, false, options);
    };
    EventEmitter2.prototype.prependMany = function(event, ttl, fn2, options) {
      return this._many(event, ttl, fn2, true, options);
    };
    EventEmitter2.prototype._many = function(event, ttl, fn2, prepend, options) {
      var self2 = this;
      if (typeof fn2 !== "function") {
        throw new Error("many only accepts instances of Function");
      }
      function listener() {
        if (--ttl === 0) {
          self2.off(event, listener);
        }
        return fn2.apply(this, arguments);
      }
      listener._origin = fn2;
      return this._on(event, listener, prepend, options);
    };
    EventEmitter2.prototype.emit = function() {
      if (!this._events && !this._all) {
        return false;
      }
      this._events || init.call(this);
      var type = arguments[0], ns2, wildcard = this.wildcard;
      var args, l2, i2, j2, containsSymbol;
      if (type === "newListener" && !this._newListener) {
        if (!this._events.newListener) {
          return false;
        }
      }
      if (wildcard) {
        ns2 = type;
        if (type !== "newListener" && type !== "removeListener") {
          if (typeof type === "object") {
            l2 = type.length;
            if (symbolsSupported) {
              for (i2 = 0; i2 < l2; i2++) {
                if (typeof type[i2] === "symbol") {
                  containsSymbol = true;
                  break;
                }
              }
            }
            if (!containsSymbol) {
              type = type.join(this.delimiter);
            }
          }
        }
      }
      var al2 = arguments.length;
      var handler;
      if (this._all && this._all.length) {
        handler = this._all.slice();
        for (i2 = 0, l2 = handler.length; i2 < l2; i2++) {
          this.event = type;
          switch (al2) {
            case 1:
              handler[i2].call(this, type);
              break;
            case 2:
              handler[i2].call(this, type, arguments[1]);
              break;
            case 3:
              handler[i2].call(this, type, arguments[1], arguments[2]);
              break;
            default:
              handler[i2].apply(this, arguments);
          }
        }
      }
      if (wildcard) {
        handler = [];
        searchListenerTree.call(this, handler, ns2, this.listenerTree, 0, l2);
      } else {
        handler = this._events[type];
        if (typeof handler === "function") {
          this.event = type;
          switch (al2) {
            case 1:
              handler.call(this);
              break;
            case 2:
              handler.call(this, arguments[1]);
              break;
            case 3:
              handler.call(this, arguments[1], arguments[2]);
              break;
            default:
              args = new Array(al2 - 1);
              for (j2 = 1; j2 < al2; j2++)
                args[j2 - 1] = arguments[j2];
              handler.apply(this, args);
          }
          return true;
        } else if (handler) {
          handler = handler.slice();
        }
      }
      if (handler && handler.length) {
        if (al2 > 3) {
          args = new Array(al2 - 1);
          for (j2 = 1; j2 < al2; j2++)
            args[j2 - 1] = arguments[j2];
        }
        for (i2 = 0, l2 = handler.length; i2 < l2; i2++) {
          this.event = type;
          switch (al2) {
            case 1:
              handler[i2].call(this);
              break;
            case 2:
              handler[i2].call(this, arguments[1]);
              break;
            case 3:
              handler[i2].call(this, arguments[1], arguments[2]);
              break;
            default:
              handler[i2].apply(this, args);
          }
        }
        return true;
      } else if (!this.ignoreErrors && !this._all && type === "error") {
        if (arguments[1] instanceof Error) {
          throw arguments[1];
        } else {
          throw new Error("Uncaught, unspecified 'error' event.");
        }
      }
      return !!this._all;
    };
    EventEmitter2.prototype.emitAsync = function() {
      if (!this._events && !this._all) {
        return false;
      }
      this._events || init.call(this);
      var type = arguments[0], wildcard = this.wildcard, ns2, containsSymbol;
      var args, l2, i2, j2;
      if (type === "newListener" && !this._newListener) {
        if (!this._events.newListener) {
          return Promise.resolve([false]);
        }
      }
      if (wildcard) {
        ns2 = type;
        if (type !== "newListener" && type !== "removeListener") {
          if (typeof type === "object") {
            l2 = type.length;
            if (symbolsSupported) {
              for (i2 = 0; i2 < l2; i2++) {
                if (typeof type[i2] === "symbol") {
                  containsSymbol = true;
                  break;
                }
              }
            }
            if (!containsSymbol) {
              type = type.join(this.delimiter);
            }
          }
        }
      }
      var promises = [];
      var al2 = arguments.length;
      var handler;
      if (this._all) {
        for (i2 = 0, l2 = this._all.length; i2 < l2; i2++) {
          this.event = type;
          switch (al2) {
            case 1:
              promises.push(this._all[i2].call(this, type));
              break;
            case 2:
              promises.push(this._all[i2].call(this, type, arguments[1]));
              break;
            case 3:
              promises.push(this._all[i2].call(this, type, arguments[1], arguments[2]));
              break;
            default:
              promises.push(this._all[i2].apply(this, arguments));
          }
        }
      }
      if (wildcard) {
        handler = [];
        searchListenerTree.call(this, handler, ns2, this.listenerTree, 0);
      } else {
        handler = this._events[type];
      }
      if (typeof handler === "function") {
        this.event = type;
        switch (al2) {
          case 1:
            promises.push(handler.call(this));
            break;
          case 2:
            promises.push(handler.call(this, arguments[1]));
            break;
          case 3:
            promises.push(handler.call(this, arguments[1], arguments[2]));
            break;
          default:
            args = new Array(al2 - 1);
            for (j2 = 1; j2 < al2; j2++)
              args[j2 - 1] = arguments[j2];
            promises.push(handler.apply(this, args));
        }
      } else if (handler && handler.length) {
        handler = handler.slice();
        if (al2 > 3) {
          args = new Array(al2 - 1);
          for (j2 = 1; j2 < al2; j2++)
            args[j2 - 1] = arguments[j2];
        }
        for (i2 = 0, l2 = handler.length; i2 < l2; i2++) {
          this.event = type;
          switch (al2) {
            case 1:
              promises.push(handler[i2].call(this));
              break;
            case 2:
              promises.push(handler[i2].call(this, arguments[1]));
              break;
            case 3:
              promises.push(handler[i2].call(this, arguments[1], arguments[2]));
              break;
            default:
              promises.push(handler[i2].apply(this, args));
          }
        }
      } else if (!this.ignoreErrors && !this._all && type === "error") {
        if (arguments[1] instanceof Error) {
          return Promise.reject(arguments[1]);
        } else {
          return Promise.reject("Uncaught, unspecified 'error' event.");
        }
      }
      return Promise.all(promises);
    };
    EventEmitter2.prototype.on = function(type, listener, options) {
      return this._on(type, listener, false, options);
    };
    EventEmitter2.prototype.prependListener = function(type, listener, options) {
      return this._on(type, listener, true, options);
    };
    EventEmitter2.prototype.onAny = function(fn2) {
      return this._onAny(fn2, false);
    };
    EventEmitter2.prototype.prependAny = function(fn2) {
      return this._onAny(fn2, true);
    };
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prototype._onAny = function(fn2, prepend) {
      if (typeof fn2 !== "function") {
        throw new Error("onAny only accepts instances of Function");
      }
      if (!this._all) {
        this._all = [];
      }
      if (prepend) {
        this._all.unshift(fn2);
      } else {
        this._all.push(fn2);
      }
      return this;
    };
    EventEmitter2.prototype._on = function(type, listener, prepend, options) {
      if (typeof type === "function") {
        this._onAny(type, listener);
        return this;
      }
      if (typeof listener !== "function") {
        throw new Error("on only accepts instances of Function");
      }
      this._events || init.call(this);
      var returnValue = this, temp;
      if (options !== undefined$1) {
        temp = setupListener.call(this, type, listener, options);
        listener = temp[0];
        returnValue = temp[1];
      }
      if (this._newListener) {
        this.emit("newListener", type, listener);
      }
      if (this.wildcard) {
        growListenerTree.call(this, type, listener, prepend);
        return returnValue;
      }
      if (!this._events[type]) {
        this._events[type] = listener;
      } else {
        if (typeof this._events[type] === "function") {
          this._events[type] = [this._events[type]];
        }
        if (prepend) {
          this._events[type].unshift(listener);
        } else {
          this._events[type].push(listener);
        }
        if (!this._events[type].warned && this._maxListeners > 0 && this._events[type].length > this._maxListeners) {
          this._events[type].warned = true;
          logPossibleMemoryLeak.call(this, this._events[type].length, type);
        }
      }
      return returnValue;
    };
    EventEmitter2.prototype.off = function(type, listener) {
      if (typeof listener !== "function") {
        throw new Error("removeListener only takes instances of Function");
      }
      var handlers, leafs = [];
      if (this.wildcard) {
        var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
        leafs = searchListenerTree.call(this, null, ns2, this.listenerTree, 0);
        if (!leafs)
          return this;
      } else {
        if (!this._events[type])
          return this;
        handlers = this._events[type];
        leafs.push({ _listeners: handlers });
      }
      for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {
        var leaf = leafs[iLeaf];
        handlers = leaf._listeners;
        if (isArray(handlers)) {
          var position = -1;
          for (var i2 = 0, length = handlers.length; i2 < length; i2++) {
            if (handlers[i2] === listener || handlers[i2].listener && handlers[i2].listener === listener || handlers[i2]._origin && handlers[i2]._origin === listener) {
              position = i2;
              break;
            }
          }
          if (position < 0) {
            continue;
          }
          if (this.wildcard) {
            leaf._listeners.splice(position, 1);
          } else {
            this._events[type].splice(position, 1);
          }
          if (handlers.length === 0) {
            if (this.wildcard) {
              delete leaf._listeners;
            } else {
              delete this._events[type];
            }
          }
          if (this._removeListener)
            this.emit("removeListener", type, listener);
          return this;
        } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {
          if (this.wildcard) {
            delete leaf._listeners;
          } else {
            delete this._events[type];
          }
          if (this._removeListener)
            this.emit("removeListener", type, listener);
        }
      }
      this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
      return this;
    };
    EventEmitter2.prototype.offAny = function(fn2) {
      var i2 = 0, l2 = 0, fns;
      if (fn2 && this._all && this._all.length > 0) {
        fns = this._all;
        for (i2 = 0, l2 = fns.length; i2 < l2; i2++) {
          if (fn2 === fns[i2]) {
            fns.splice(i2, 1);
            if (this._removeListener)
              this.emit("removeListenerAny", fn2);
            return this;
          }
        }
      } else {
        fns = this._all;
        if (this._removeListener) {
          for (i2 = 0, l2 = fns.length; i2 < l2; i2++)
            this.emit("removeListenerAny", fns[i2]);
        }
        this._all = [];
      }
      return this;
    };
    EventEmitter2.prototype.removeListener = EventEmitter2.prototype.off;
    EventEmitter2.prototype.removeAllListeners = function(type) {
      if (type === undefined$1) {
        !this._events || init.call(this);
        return this;
      }
      if (this.wildcard) {
        var leafs = searchListenerTree.call(this, null, type, this.listenerTree, 0), leaf, i2;
        if (!leafs)
          return this;
        for (i2 = 0; i2 < leafs.length; i2++) {
          leaf = leafs[i2];
          leaf._listeners = null;
        }
        this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
      } else if (this._events) {
        this._events[type] = null;
      }
      return this;
    };
    EventEmitter2.prototype.listeners = function(type) {
      var _events = this._events;
      var keys, listeners2, allListeners;
      var i2;
      var listenerTree;
      if (type === undefined$1) {
        if (this.wildcard) {
          throw Error("event name required for wildcard emitter");
        }
        if (!_events) {
          return [];
        }
        keys = ownKeys(_events);
        i2 = keys.length;
        allListeners = [];
        while (i2-- > 0) {
          listeners2 = _events[keys[i2]];
          if (typeof listeners2 === "function") {
            allListeners.push(listeners2);
          } else {
            allListeners.push.apply(allListeners, listeners2);
          }
        }
        return allListeners;
      } else {
        if (this.wildcard) {
          listenerTree = this.listenerTree;
          if (!listenerTree)
            return [];
          var handlers = [];
          var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
          searchListenerTree.call(this, handlers, ns2, listenerTree, 0);
          return handlers;
        }
        if (!_events) {
          return [];
        }
        listeners2 = _events[type];
        if (!listeners2) {
          return [];
        }
        return typeof listeners2 === "function" ? [listeners2] : listeners2;
      }
    };
    EventEmitter2.prototype.eventNames = function(nsAsArray) {
      var _events = this._events;
      return this.wildcard ? collectTreeEvents.call(this, this.listenerTree, [], null, nsAsArray) : _events ? ownKeys(_events) : [];
    };
    EventEmitter2.prototype.listenerCount = function(type) {
      return this.listeners(type).length;
    };
    EventEmitter2.prototype.hasListeners = function(type) {
      if (this.wildcard) {
        var handlers = [];
        var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
        searchListenerTree.call(this, handlers, ns2, this.listenerTree, 0);
        return handlers.length > 0;
      }
      var _events = this._events;
      var _all = this._all;
      return !!(_all && _all.length || _events && (type === undefined$1 ? ownKeys(_events).length : _events[type]));
    };
    EventEmitter2.prototype.listenersAny = function() {
      if (this._all) {
        return this._all;
      } else {
        return [];
      }
    };
    EventEmitter2.prototype.waitFor = function(event, options) {
      var self2 = this;
      var type = typeof options;
      if (type === "number") {
        options = { timeout: options };
      } else if (type === "function") {
        options = { filter: options };
      }
      options = resolveOptions(options, {
        timeout: 0,
        filter: undefined$1,
        handleError: false,
        Promise,
        overload: false
      }, {
        filter: functionReducer,
        Promise: constructorReducer
      });
      return makeCancelablePromise(options.Promise, function(resolve, reject, onCancel) {
        function listener() {
          var filter = options.filter;
          if (filter && !filter.apply(self2, arguments)) {
            return;
          }
          self2.off(event, listener);
          if (options.handleError) {
            var err = arguments[0];
            err ? reject(err) : resolve(toArray.apply(null, arguments).slice(1));
          } else {
            resolve(toArray.apply(null, arguments));
          }
        }
        onCancel(function() {
          self2.off(event, listener);
        });
        self2._on(event, listener, false);
      }, {
        timeout: options.timeout,
        overload: options.overload
      });
    };
    function once2(emitter, name, options) {
      options = resolveOptions(options, {
        Promise,
        timeout: 0,
        overload: false
      }, {
        Promise: constructorReducer
      });
      var _Promise = options.Promise;
      return makeCancelablePromise(_Promise, function(resolve, reject, onCancel) {
        var handler;
        if (typeof emitter.addEventListener === "function") {
          handler = function() {
            resolve(toArray.apply(null, arguments));
          };
          onCancel(function() {
            emitter.removeEventListener(name, handler);
          });
          emitter.addEventListener(
            name,
            handler,
            { once: true }
          );
          return;
        }
        var eventListener = function() {
          errorListener && emitter.removeListener("error", errorListener);
          resolve(toArray.apply(null, arguments));
        };
        var errorListener;
        if (name !== "error") {
          errorListener = function(err) {
            emitter.removeListener(name, eventListener);
            reject(err);
          };
          emitter.once("error", errorListener);
        }
        onCancel(function() {
          errorListener && emitter.removeListener("error", errorListener);
          emitter.removeListener(name, eventListener);
        });
        emitter.once(name, eventListener);
      }, {
        timeout: options.timeout,
        overload: options.overload
      });
    }
    var prototype = EventEmitter2.prototype;
    Object.defineProperties(EventEmitter2, {
      defaultMaxListeners: {
        get: function() {
          return prototype._maxListeners;
        },
        set: function(n9) {
          if (typeof n9 !== "number" || n9 < 0 || Number.isNaN(n9)) {
            throw TypeError("n must be a non-negative number");
          }
          prototype._maxListeners = n9;
        },
        enumerable: true
      },
      once: {
        value: once2,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperties(prototype, {
      _maxListeners: {
        value: defaultMaxListeners2,
        writable: true,
        configurable: true
      },
      _observers: { value: null, writable: true, configurable: true }
    });
    if (typeof undefined$1 === "function" && undefined$1.amd) {
      undefined$1(function() {
        return EventEmitter2;
      });
    } else {
      module.exports = EventEmitter2;
    }
  }();
})(eventemitter2);
var is = eventemitter2.exports;
var parser$1 = {};
var grammar$2 = { exports: {} };
var grammar$1 = grammar$2.exports = {
  v: [{
    name: "version",
    reg: /^(\d*)$/
  }],
  o: [{
    name: "origin",
    reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
    names: ["username", "sessionId", "sessionVersion", "netType", "ipVer", "address"],
    format: "%s %s %d %s IP%d %s"
  }],
  s: [{ name: "name" }],
  i: [{ name: "description" }],
  u: [{ name: "uri" }],
  e: [{ name: "email" }],
  p: [{ name: "phone" }],
  z: [{ name: "timezones" }],
  r: [{ name: "repeats" }],
  t: [{
    name: "timing",
    reg: /^(\d*) (\d*)/,
    names: ["start", "stop"],
    format: "%d %d"
  }],
  c: [{
    name: "connection",
    reg: /^IN IP(\d) (\S*)/,
    names: ["version", "ip"],
    format: "IN IP%d %s"
  }],
  b: [{
    push: "bandwidth",
    reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
    names: ["type", "limit"],
    format: "%s:%s"
  }],
  m: [{
    reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
    names: ["type", "port", "protocol", "payloads"],
    format: "%s %d %s %s"
  }],
  a: [
    {
      push: "rtp",
      reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
      names: ["payload", "codec", "rate", "encoding"],
      format: function(o2) {
        return o2.encoding ? "rtpmap:%d %s/%s/%s" : o2.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s";
      }
    },
    {
      push: "fmtp",
      reg: /^fmtp:(\d*) ([\S| ]*)/,
      names: ["payload", "config"],
      format: "fmtp:%d %s"
    },
    {
      name: "control",
      reg: /^control:(.*)/,
      format: "control:%s"
    },
    {
      name: "rtcp",
      reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
      names: ["port", "netType", "ipVer", "address"],
      format: function(o2) {
        return o2.address != null ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
      }
    },
    {
      push: "rtcpFbTrrInt",
      reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
      names: ["payload", "value"],
      format: "rtcp-fb:%s trr-int %d"
    },
    {
      push: "rtcpFb",
      reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
      names: ["payload", "type", "subtype"],
      format: function(o2) {
        return o2.subtype != null ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s";
      }
    },
    {
      push: "ext",
      reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
      names: ["value", "direction", "encrypt-uri", "uri", "config"],
      format: function(o2) {
        return "extmap:%d" + (o2.direction ? "/%s" : "%v") + (o2["encrypt-uri"] ? " %s" : "%v") + " %s" + (o2.config ? " %s" : "");
      }
    },
    {
      name: "extmapAllowMixed",
      reg: /^(extmap-allow-mixed)/
    },
    {
      push: "crypto",
      reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
      names: ["id", "suite", "config", "sessionConfig"],
      format: function(o2) {
        return o2.sessionConfig != null ? "crypto:%d %s %s %s" : "crypto:%d %s %s";
      }
    },
    {
      name: "setup",
      reg: /^setup:(\w*)/,
      format: "setup:%s"
    },
    {
      name: "connectionType",
      reg: /^connection:(new|existing)/,
      format: "connection:%s"
    },
    {
      name: "mid",
      reg: /^mid:([^\s]*)/,
      format: "mid:%s"
    },
    {
      name: "msid",
      reg: /^msid:(.*)/,
      format: "msid:%s"
    },
    {
      name: "ptime",
      reg: /^ptime:(\d*(?:\.\d*)*)/,
      format: "ptime:%d"
    },
    {
      name: "maxptime",
      reg: /^maxptime:(\d*(?:\.\d*)*)/,
      format: "maxptime:%d"
    },
    {
      name: "direction",
      reg: /^(sendrecv|recvonly|sendonly|inactive)/
    },
    {
      name: "icelite",
      reg: /^(ice-lite)/
    },
    {
      name: "iceUfrag",
      reg: /^ice-ufrag:(\S*)/,
      format: "ice-ufrag:%s"
    },
    {
      name: "icePwd",
      reg: /^ice-pwd:(\S*)/,
      format: "ice-pwd:%s"
    },
    {
      name: "fingerprint",
      reg: /^fingerprint:(\S*) (\S*)/,
      names: ["type", "hash"],
      format: "fingerprint:%s %s"
    },
    {
      push: "candidates",
      reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
      names: ["foundation", "component", "transport", "priority", "ip", "port", "type", "raddr", "rport", "tcptype", "generation", "network-id", "network-cost"],
      format: function(o2) {
        var str = "candidate:%s %d %s %d %s %d typ %s";
        str += o2.raddr != null ? " raddr %s rport %d" : "%v%v";
        str += o2.tcptype != null ? " tcptype %s" : "%v";
        if (o2.generation != null) {
          str += " generation %d";
        }
        str += o2["network-id"] != null ? " network-id %d" : "%v";
        str += o2["network-cost"] != null ? " network-cost %d" : "%v";
        return str;
      }
    },
    {
      name: "endOfCandidates",
      reg: /^(end-of-candidates)/
    },
    {
      name: "remoteCandidates",
      reg: /^remote-candidates:(.*)/,
      format: "remote-candidates:%s"
    },
    {
      name: "iceOptions",
      reg: /^ice-options:(\S*)/,
      format: "ice-options:%s"
    },
    {
      push: "ssrcs",
      reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
      names: ["id", "attribute", "value"],
      format: function(o2) {
        var str = "ssrc:%d";
        if (o2.attribute != null) {
          str += " %s";
          if (o2.value != null) {
            str += ":%s";
          }
        }
        return str;
      }
    },
    {
      push: "ssrcGroups",
      reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
      names: ["semantics", "ssrcs"],
      format: "ssrc-group:%s %s"
    },
    {
      name: "msidSemantic",
      reg: /^msid-semantic:\s?(\w*) (\S*)/,
      names: ["semantic", "token"],
      format: "msid-semantic: %s %s"
    },
    {
      push: "groups",
      reg: /^group:(\w*) (.*)/,
      names: ["type", "mids"],
      format: "group:%s %s"
    },
    {
      name: "rtcpMux",
      reg: /^(rtcp-mux)/
    },
    {
      name: "rtcpRsize",
      reg: /^(rtcp-rsize)/
    },
    {
      name: "sctpmap",
      reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
      names: ["sctpmapNumber", "app", "maxMessageSize"],
      format: function(o2) {
        return o2.maxMessageSize != null ? "sctpmap:%s %s %s" : "sctpmap:%s %s";
      }
    },
    {
      name: "xGoogleFlag",
      reg: /^x-google-flag:([^\s]*)/,
      format: "x-google-flag:%s"
    },
    {
      push: "rids",
      reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
      names: ["id", "direction", "params"],
      format: function(o2) {
        return o2.params ? "rid:%s %s %s" : "rid:%s %s";
      }
    },
    {
      push: "imageattrs",
      reg: new RegExp(
        "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
      ),
      names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
      format: function(o2) {
        return "imageattr:%s %s %s" + (o2.dir2 ? " %s %s" : "");
      }
    },
    {
      name: "simulcast",
      reg: new RegExp(
        "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
      ),
      names: ["dir1", "list1", "dir2", "list2"],
      format: function(o2) {
        return "simulcast:%s %s" + (o2.dir2 ? " %s %s" : "");
      }
    },
    {
      name: "simulcast_03",
      reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
      names: ["value"],
      format: "simulcast: %s"
    },
    {
      name: "framerate",
      reg: /^framerate:(\d+(?:$|\.\d+))/,
      format: "framerate:%s"
    },
    {
      name: "sourceFilter",
      reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
      names: ["filterMode", "netType", "addressTypes", "destAddress", "srcList"],
      format: "source-filter: %s %s %s %s %s"
    },
    {
      name: "bundleOnly",
      reg: /^(bundle-only)/
    },
    {
      name: "label",
      reg: /^label:(.+)/,
      format: "label:%s"
    },
    {
      name: "sctpPort",
      reg: /^sctp-port:(\d+)$/,
      format: "sctp-port:%s"
    },
    {
      name: "maxMessageSize",
      reg: /^max-message-size:(\d+)$/,
      format: "max-message-size:%s"
    },
    {
      push: "tsRefClocks",
      reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
      names: ["clksrc", "clksrcExt"],
      format: function(o2) {
        return "ts-refclk:%s" + (o2.clksrcExt != null ? "=%s" : "");
      }
    },
    {
      name: "mediaClk",
      reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
      names: ["id", "mediaClockName", "mediaClockValue", "rateNumerator", "rateDenominator"],
      format: function(o2) {
        var str = "mediaclk:";
        str += o2.id != null ? "id=%s %s" : "%v%s";
        str += o2.mediaClockValue != null ? "=%s" : "";
        str += o2.rateNumerator != null ? " rate=%s" : "";
        str += o2.rateDenominator != null ? "/%s" : "";
        return str;
      }
    },
    {
      name: "keywords",
      reg: /^keywds:(.+)$/,
      format: "keywds:%s"
    },
    {
      name: "content",
      reg: /^content:(.+)/,
      format: "content:%s"
    },
    {
      name: "bfcpFloorCtrl",
      reg: /^floorctrl:(c-only|s-only|c-s)/,
      format: "floorctrl:%s"
    },
    {
      name: "bfcpConfId",
      reg: /^confid:(\d+)/,
      format: "confid:%s"
    },
    {
      name: "bfcpUserId",
      reg: /^userid:(\d+)/,
      format: "userid:%s"
    },
    {
      name: "bfcpFloorId",
      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
      names: ["id", "mStream"],
      format: "floorid:%s mstrm:%s"
    },
    {
      push: "invalid",
      names: ["value"]
    }
  ]
};
Object.keys(grammar$1).forEach(function(key) {
  var objs = grammar$1[key];
  objs.forEach(function(obj) {
    if (!obj.reg) {
      obj.reg = /(.*)/;
    }
    if (!obj.format) {
      obj.format = "%s";
    }
  });
});
(function(exports) {
  var toIntIfInt = function(v2) {
    return String(Number(v2)) === v2 ? Number(v2) : v2;
  };
  var attachProperties = function(match, location, names, rawName) {
    if (rawName && !names) {
      location[rawName] = toIntIfInt(match[1]);
    } else {
      for (var i2 = 0; i2 < names.length; i2 += 1) {
        if (match[i2 + 1] != null) {
          location[names[i2]] = toIntIfInt(match[i2 + 1]);
        }
      }
    }
  };
  var parseReg = function(obj, location, content) {
    var needsBlank = obj.name && obj.names;
    if (obj.push && !location[obj.push]) {
      location[obj.push] = [];
    } else if (needsBlank && !location[obj.name]) {
      location[obj.name] = {};
    }
    var keyLocation = obj.push ? {} : needsBlank ? location[obj.name] : location;
    attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);
    if (obj.push) {
      location[obj.push].push(keyLocation);
    }
  };
  var grammar2 = grammar$2.exports;
  var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
  exports.parse = function(sdp2) {
    var session = {}, media = [], location = session;
    sdp2.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function(l2) {
      var type = l2[0];
      var content = l2.slice(2);
      if (type === "m") {
        media.push({ rtp: [], fmtp: [] });
        location = media[media.length - 1];
      }
      for (var j2 = 0; j2 < (grammar2[type] || []).length; j2 += 1) {
        var obj = grammar2[type][j2];
        if (obj.reg.test(content)) {
          return parseReg(obj, location, content);
        }
      }
    });
    session.media = media;
    return session;
  };
  var paramReducer = function(acc, expr) {
    var s4 = expr.split(/=(.+)/, 2);
    if (s4.length === 2) {
      acc[s4[0]] = toIntIfInt(s4[1]);
    } else if (s4.length === 1 && expr.length > 1) {
      acc[s4[0]] = void 0;
    }
    return acc;
  };
  exports.parseParams = function(str) {
    return str.split(/;\s?/).reduce(paramReducer, {});
  };
  exports.parseFmtpConfig = exports.parseParams;
  exports.parsePayloads = function(str) {
    return str.toString().split(" ").map(Number);
  };
  exports.parseRemoteCandidates = function(str) {
    var candidates = [];
    var parts = str.split(" ").map(toIntIfInt);
    for (var i2 = 0; i2 < parts.length; i2 += 3) {
      candidates.push({
        component: parts[i2],
        ip: parts[i2 + 1],
        port: parts[i2 + 2]
      });
    }
    return candidates;
  };
  exports.parseImageAttributes = function(str) {
    return str.split(" ").map(function(item) {
      return item.substring(1, item.length - 1).split(",").reduce(paramReducer, {});
    });
  };
  exports.parseSimulcastStreamList = function(str) {
    return str.split(";").map(function(stream) {
      return stream.split(",").map(function(format2) {
        var scid, paused = false;
        if (format2[0] !== "~") {
          scid = toIntIfInt(format2);
        } else {
          scid = toIntIfInt(format2.substring(1, format2.length));
          paused = true;
        }
        return {
          scid,
          paused
        };
      });
    });
  };
})(parser$1);
var grammar = grammar$2.exports;
var formatRegExp = /%[sdv%]/g;
var format = function(formatStr) {
  var i2 = 1;
  var args = arguments;
  var len = args.length;
  return formatStr.replace(formatRegExp, function(x2) {
    if (i2 >= len) {
      return x2;
    }
    var arg = args[i2];
    i2 += 1;
    switch (x2) {
      case "%%":
        return "%";
      case "%s":
        return String(arg);
      case "%d":
        return Number(arg);
      case "%v":
        return "";
    }
  });
};
var makeLine = function(type, obj, location) {
  var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;
  var args = [type + "=" + str];
  if (obj.names) {
    for (var i2 = 0; i2 < obj.names.length; i2 += 1) {
      var n9 = obj.names[i2];
      if (obj.name) {
        args.push(location[obj.name][n9]);
      } else {
        args.push(location[obj.names[i2]]);
      }
    }
  } else {
    args.push(location[obj.name]);
  }
  return format.apply(null, args);
};
var defaultOuterOrder = [
  "v",
  "o",
  "s",
  "i",
  "u",
  "e",
  "p",
  "c",
  "b",
  "t",
  "r",
  "z",
  "a"
];
var defaultInnerOrder = ["i", "c", "b", "a"];
var writer$1 = function(session, opts) {
  opts = opts || {};
  if (session.version == null) {
    session.version = 0;
  }
  if (session.name == null) {
    session.name = " ";
  }
  session.media.forEach(function(mLine) {
    if (mLine.payloads == null) {
      mLine.payloads = "";
    }
  });
  var outerOrder = opts.outerOrder || defaultOuterOrder;
  var innerOrder = opts.innerOrder || defaultInnerOrder;
  var sdp2 = [];
  outerOrder.forEach(function(type) {
    grammar[type].forEach(function(obj) {
      if (obj.name in session && session[obj.name] != null) {
        sdp2.push(makeLine(type, obj, session));
      } else if (obj.push in session && session[obj.push] != null) {
        session[obj.push].forEach(function(el2) {
          sdp2.push(makeLine(type, obj, el2));
        });
      }
    });
  });
  session.media.forEach(function(mLine) {
    sdp2.push(makeLine("m", grammar.m[0], mLine));
    innerOrder.forEach(function(type) {
      grammar[type].forEach(function(obj) {
        if (obj.name in mLine && mLine[obj.name] != null) {
          sdp2.push(makeLine(type, obj, mLine));
        } else if (obj.push in mLine && mLine[obj.push] != null) {
          mLine[obj.push].forEach(function(el2) {
            sdp2.push(makeLine(type, obj, el2));
          });
        }
      });
    });
  });
  return sdp2.join("\r\n") + "\r\n";
};
var parser = parser$1;
var writer = writer$1;
var write = writer;
var parse$1 = parser.parse;
parser.parseParams;
parser.parseFmtpConfig;
parser.parsePayloads;
parser.parseRemoteCandidates;
parser.parseImageAttributes;
parser.parseSimulcastStreamList;
var dr = Object.defineProperty, lr = Object.defineProperties;
var ur = Object.getOwnPropertyDescriptors;
var Ze$1 = Object.getOwnPropertySymbols, hr = Object.getPrototypeOf, fi = Object.prototype.hasOwnProperty, Ei = Object.prototype.propertyIsEnumerable, pr = Reflect.get;
var Ti = (n9, e2, t2) => e2 in n9 ? dr(n9, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : n9[e2] = t2, g$1 = (n9, e2) => {
  for (var t2 in e2 || (e2 = {}))
    fi.call(e2, t2) && Ti(n9, t2, e2[t2]);
  if (Ze$1)
    for (var t2 of Ze$1(e2))
      Ei.call(e2, t2) && Ti(n9, t2, e2[t2]);
  return n9;
}, M$1 = (n9, e2) => lr(n9, ur(e2));
var $t = (n9, e2) => {
  var t2 = {};
  for (var i2 in n9)
    fi.call(n9, i2) && e2.indexOf(i2) < 0 && (t2[i2] = n9[i2]);
  if (n9 != null && Ze$1)
    for (var i2 of Ze$1(n9))
      e2.indexOf(i2) < 0 && Ei.call(n9, i2) && (t2[i2] = n9[i2]);
  return t2;
};
var mr = (n9, e2) => () => (e2 || n9((e2 = { exports: {} }).exports, e2), e2.exports);
var D$3 = (n9, e2, t2) => pr(hr(n9), t2, e2);
var d$3 = (n9, e2, t2) => new Promise((i2, r2) => {
  var s4 = (l2) => {
    try {
      c2(t2.next(l2));
    } catch (h2) {
      r2(h2);
    }
  }, a2 = (l2) => {
    try {
      c2(t2.throw(l2));
    } catch (h2) {
      r2(h2);
    }
  }, c2 = (l2) => l2.done ? i2(l2.value) : Promise.resolve(l2.value).then(s4, a2);
  c2((t2 = t2.apply(n9, e2)).next());
});
var qt$1 = mr((Ks, kr) => {
  kr.exports = { name: "@100mslive/hms-video", version: "0.9.10", license: "MIT", main: "dist/index.cjs.js", typings: "dist/index.d.ts", module: "dist/index.js", files: ["dist", "src"], engines: { node: ">=10" }, exports: { ".": { require: "./dist/index.cjs.js", import: "./dist/index.js", default: "./dist/index.js" } }, scripts: { prestart: "rm -rf dist && yarn types:build", start: 'concurrently "yarn dev" "yarn types"', dev: "node ../../scripts/dev", "build:only": "node ../../scripts/build", build: "yarn build:only && yarn types:build", types: "tsc -w", "types:build": "tsc -p tsconfig.json", test: "jest --maxWorkers=1", lint: "eslint -c ../../.eslintrc .", "lint:fix": "yarn lint --fix", prepare: "yarn build", size: "size-limit", analyze: "size-limit --why", format: "prettier --write src/**/*.ts" }, author: "100ms <tech-common@100ms.live>", devDependencies: { "@types/dom-screen-wake-lock": "^1.0.1", "@types/sdp-transform": "^2.4.4", "@types/ua-parser-js": "^0.7.36", "@types/uuid": "^8.3.0", "jest-canvas-mock": "^2.3.1", tslib: "^2.2.0" }, dependencies: { eventemitter2: "^6.4.7", "sdp-transform": "^2.14.1", "ua-parser-js": "^1.0.1", uuid: "^8.3.2", "webrtc-adapter": "^8.0.0" }, gitHead: "fe8f6b9b3b39b210c46f19c021ccf37c654c32d4" };
});
var ne$1 = class {
  constructor({ sender: e2, message: t2, type: i2 = "chat", recipientPeer: r2, recipientRoles: s4, time: a2, id: c2 }) {
    this.sender = e2, this.message = t2, this.type = i2, this.recipientPeer = r2, this.recipientRoles = s4, this.time = a2, this.id = c2;
  }
  toSignalParams() {
    var r2, s4;
    let e2 = (r2 = this.recipientRoles) == null ? void 0 : r2.map((a2) => a2.name), t2 = (s4 = this.recipientPeer) == null ? void 0 : s4.peerId, i2 = { info: { message: this.message, type: this.type } };
    return e2 != null && e2.length && (i2.roles = e2), t2 && (i2.peer_id = t2), i2;
  }
  toString() {
    var e2;
    return `{
      sender: ${this.sender};
      recipientPeer: ${this.recipientPeer};
      recipientRoles: ${(e2 = this.recipientRoles) == null ? void 0 : e2.map((t2) => t2.name)};
      message: ${this.message};
      time: ${this.time};
      type: ${this.type};
      id: ${this.id}
    }`;
  }
};
var Re$1 = class {
  constructor(e2) {
    this.recording = { server: { running: false }, browser: { running: false }, hls: { running: false } };
    this.rtmp = { running: false };
    this.hls = { running: false, variants: [] };
    this.id = e2;
  }
};
var W$3 = class {
  constructor({ peerId: e2, name: t2, isLocal: i2, customerUserId: r2, metadata: s4, role: a2, joinedAt: c2 }) {
    this.customerUserId = "";
    this.metadata = "";
    this.auxiliaryTracks = [];
    this.name = t2, this.peerId = e2, this.isLocal = i2, this.customerUserId = r2, this.metadata = s4, this.joinedAt = c2, a2 && (this.role = a2);
  }
  updateRole(e2) {
    this.role = e2;
  }
  updateName(e2) {
    this.name = e2;
  }
  updateMetadata(e2) {
    this.metadata = e2;
  }
  toString() {
    var e2, t2, i2;
    return `{
      name: ${this.name};
      role: ${(e2 = this.role) == null ? void 0 : e2.name};
      peerId: ${this.peerId};
      customerUserId: ${this.customerUserId};
      ${this.audioTrack ? `audioTrack: ${(t2 = this.audioTrack) == null ? void 0 : t2.trackId};` : ""}
      ${this.videoTrack ? `videoTrack: ${(i2 = this.videoTrack) == null ? void 0 : i2.trackId};` : ""}
    }`;
  }
};
var Se$1 = class {
};
Se$1.makePeerId = () => v4();
var Ce$1 = class extends W$3 {
  constructor(t2) {
    super(M$1(g$1({}, t2), { peerId: Se$1.makePeerId(), isLocal: true }));
    this.isLocal = true;
    this.auxiliaryTracks = [];
    this.asRole = t2.asRole;
  }
  isInPreview() {
    return !!this.asRole;
  }
  toString() {
    var t2, i2, r2;
    return `{
      name: ${this.name};
      role: ${(t2 = this.role) == null ? void 0 : t2.name};
      peerId: ${this.peerId};
      customerUserId: ${this.customerUserId};
      ${this.asRole ? `asRole: ${this.asRole.name};` : ""}
      ${this.audioTrack ? `audioTrack: ${(i2 = this.audioTrack) == null ? void 0 : i2.trackId};` : ""}
      ${this.videoTrack ? `videoTrack: ${(r2 = this.videoTrack) == null ? void 0 : r2.trackId};` : ""}
    }`;
  }
};
var we$1 = class extends W$3 {
  constructor(t2) {
    super(M$1(g$1({}, t2), { isLocal: false }));
    this.isLocal = false;
    this.auxiliaryTracks = [];
    this.fromRoomState = false;
    this.fromRoomState = !!t2.fromRoomState;
  }
};
var oe$1 = new uaParser.exports.UAParser(), w$2 = typeof window != "undefined", ki, ce$1 = typeof window == "undefined" && !((ki = oe$1.getBrowser().name) != null && ki.toLowerCase().includes("electron")), et = ((i2) => (i2.PROD = "prod", i2.QA = "qa", i2.DEV = "dev", i2))(et || {}), Mi = () => oe$1.getDevice().type === "mobile", yi = () => typeof document != "undefined" && document.hidden, Wt = () => {
  var n9;
  return ((n9 = oe$1.getOS().name) == null ? void 0 : n9.toLowerCase()) === "ios";
};
function fr() {
  if (w$2 && window) {
    let n9 = window.location.hostname;
    return n9 === "localhost" || n9 === "127.0.0.1" ? "LOCAL" : n9.includes("app.100ms.live") ? "HMS" : "CUSTOM";
  }
  return "CUSTOM";
}
var ve$1 = fr();
var Kt$1 = class {
  constructor() {
    this.valuesMap = /* @__PURE__ */ new Map();
  }
  getItem(e2) {
    return this.valuesMap.has(e2) ? String(this.valuesMap.get(e2)) : null;
  }
  setItem(e2, t2) {
    this.valuesMap.set(e2, t2);
  }
  removeItem(e2) {
    this.valuesMap.delete(e2);
  }
  clear() {
    this.valuesMap.clear();
  }
  key(e2) {
    if (arguments.length === 0)
      throw new TypeError("Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.");
    return Array.from(this.valuesMap.keys())[e2];
  }
  get length() {
    return this.valuesMap.size;
  }
}, Pi = () => {
  w$2 && !localStorage && (window.localStorage = new Kt$1());
};
var U$1 = class {
  constructor(e2) {
    this.key = e2;
    this.storage = null;
  }
  getStorage() {
    return w$2 && !this.storage && (Pi(), this.storage = window.localStorage), this.storage;
  }
  get() {
    var i2;
    let e2 = (i2 = this.getStorage()) == null ? void 0 : i2.getItem(this.key);
    return e2 ? JSON.parse(e2) : void 0;
  }
  set(e2) {
    var i2;
    let t2 = JSON.stringify(e2);
    (i2 = this.getStorage()) == null || i2.setItem(this.key, t2);
  }
  clear() {
    var e2;
    (e2 = this.getStorage()) == null || e2.removeItem(this.key);
  }
};
var Ai = () => {
  let n9, e2 = new U$1("hms-analytics-deviceId"), t2 = e2.get();
  return t2 ? n9 = t2 : (n9 = v4(), e2.set(n9)), n9;
};
var bi = qt$1().version;
function Le$1(n9 = "prod", e2) {
  let t2 = "web", i2 = ve$1 !== "LOCAL" && n9 === "prod" ? "prod" : "debug";
  if (ce$1)
    return Ii({ os: "web_nodejs", os_version: process.version, sdk: t2, sdk_version: bi, env: i2, domain: ve$1, framework: "node", framework_version: process.version, framework_sdk_version: e2 == null ? void 0 : e2.sdkVersion });
  let r2 = oe$1.getOS(), s4 = oe$1.getDevice(), a2 = oe$1.getBrowser(), c2 = jt$1(`web_${r2.name}`), l2 = r2.version || "", h2 = jt$1(`${a2.name}_${a2.version}`), u2 = h2;
  return s4.type && (u2 = `${jt$1(`${s4.vendor}_${s4.type}`)}/${h2}`), Ii({ os: c2, os_version: l2, sdk: t2, sdk_version: bi, device_model: u2, env: i2, domain: ve$1, framework: e2 == null ? void 0 : e2.type, framework_version: e2 == null ? void 0 : e2.version, framework_sdk_version: e2 == null ? void 0 : e2.sdkVersion });
}
function jt$1(n9) {
  return n9.replace(/ /g, "_");
}
var Ii = (n9, e2 = ",") => Object.keys(n9).filter((t2) => !!n9[t2]).map((t2) => `${t2}:${n9[t2]}`).join(e2);
var P$2 = class {
  constructor({ name: e2, level: t2, properties: i2, includesPII: r2, timestamp: s4 }) {
    this.metadata = { peer: {}, userAgent: Le$1() };
    this.name = e2, this.level = t2, this.includesPII = r2 || false, this.properties = i2 || {}, this.timestamp = s4 || new Date().getTime(), this.event_id = v4(), this.device_id = Ai();
  }
  toSignalParams() {
    return { name: this.name, info: M$1(g$1({}, this.properties), { timestamp: this.timestamp, domain: ve$1 }), timestamp: new Date().getTime() };
  }
};
var v$3 = class n2 extends Error {
  constructor(t2, i2, r2, s4, a2, c2 = false) {
    super(s4);
    this.code = t2;
    this.name = i2;
    this.message = s4;
    this.description = a2;
    this.isTerminal = c2;
    Object.setPrototypeOf(this, n2.prototype), this.action = r2.toString();
  }
  toAnalyticsProperties() {
    return { error_name: this.name, error_code: this.code, error_message: this.message, error_description: this.description, action: this.action, is_terminal: this.isTerminal };
  }
  addNativeError(t2) {
    this.nativeError = t2;
  }
  toString() {
    var t2;
    return `{
      code: ${this.code};
      name: ${this.name};
      action: ${this.action};
      message: ${this.message};
      description: ${this.description};
      isTerminal: ${this.isTerminal};
      nativeError: ${(t2 = this.nativeError) == null ? void 0 : t2.message};
    }`;
  }
};
var E$3 = class {
  static connect(e2, t2, i2 = new Date(), r2 = new Date(), s4) {
    let a2 = this.eventNameFor("connect", e2 === void 0), c2 = e2 ? 2 : 1, l2 = this.getPropertiesWithError(M$1(g$1({}, t2), { [this.KEY_REQUESTED_AT]: i2 == null ? void 0 : i2.getTime(), [this.KEY_RESPONDED_AT]: r2 == null ? void 0 : r2.getTime(), endpoint: s4 }), e2);
    return new P$2({ name: a2, level: c2, properties: l2 });
  }
  static disconnect(e2, t2) {
    let i2 = "disconnected", r2 = e2 ? 2 : 1, s4 = this.getPropertiesWithError(t2, e2);
    return new P$2({ name: i2, level: r2, properties: s4 });
  }
  static preview(i2) {
    var r2 = i2, { error: e2 } = r2, t2 = $t(r2, ["error"]);
    let s4 = this.eventNameFor("preview", e2 === void 0), a2 = e2 ? 2 : 1, c2 = this.getPropertiesWithError(t2, e2);
    return new P$2({ name: s4, level: a2, properties: c2 });
  }
  static join(i2) {
    var r2 = i2, { error: e2 } = r2, t2 = $t(r2, ["error"]);
    let s4 = this.eventNameFor("join", e2 === void 0), a2 = e2 ? 2 : 1, c2 = this.getPropertiesWithError(M$1(g$1({}, t2), { is_preview_called: !!t2.is_preview_called }), e2);
    return new P$2({ name: s4, level: a2, properties: c2 });
  }
  static publish({ devices: e2, settings: t2, error: i2 }) {
    let r2 = this.eventNameFor("publish", i2 === void 0), s4 = i2 ? 2 : 1, a2 = this.getPropertiesWithError({ devices: e2, audio: t2 == null ? void 0 : t2.audio, video: t2 == null ? void 0 : t2.video }, i2);
    return new P$2({ name: r2, level: s4, properties: a2 });
  }
  static hlsPlayerError(e2) {
    return new P$2({ name: "hlsPlayerError", level: 2, properties: this.getErrorProperties(e2) });
  }
  static subscribeFail(e2) {
    let t2 = this.eventNameFor("subscribe", false), i2 = 2, r2 = this.getErrorProperties(e2);
    return new P$2({ name: t2, level: i2, properties: r2 });
  }
  static leave() {
    return new P$2({ name: "leave", level: 1 });
  }
  static autoplayError() {
    return new P$2({ name: "autoplayError", level: 2 });
  }
  static audioPlaybackError(e2) {
    return new P$2({ name: "audioPlaybackError", level: 2, properties: this.getErrorProperties(e2) });
  }
  static deviceChange({ selection: e2, type: t2, devices: i2, error: r2 }) {
    let s4 = this.eventNameFor(r2 ? "publish" : `device.${t2}`, r2 === void 0), a2 = r2 ? 2 : 1, c2 = this.getPropertiesWithError({ selection: e2, devices: i2 }, r2);
    return new P$2({ name: s4, level: a2, properties: c2 });
  }
  static performance(e2) {
    let t2 = "perf.stats", i2 = 1, r2 = e2.toAnalyticsProperties();
    return new P$2({ name: t2, level: i2, properties: r2 });
  }
  static rtcStats(e2) {
    let t2 = "rtc.stats", i2 = 1, r2 = e2.toAnalyticsProperties();
    return new P$2({ name: t2, level: i2, properties: r2 });
  }
  static rtcStatsFailed(e2) {
    let t2 = "rtc.stats.failed", i2 = 2;
    return new P$2({ name: t2, level: i2, properties: this.getErrorProperties(e2) });
  }
  static degradationStats(e2, t2) {
    let i2 = "video.degradation.stats", r2 = 1, s4 = { degradedAt: e2.degradedAt, trackId: e2.trackId };
    if (!t2 && e2.degradedAt instanceof Date) {
      let a2 = new Date(), c2 = a2.valueOf() - e2.degradedAt.valueOf();
      s4 = M$1(g$1({}, s4), { duration: c2, restoredAt: a2 });
    }
    return new P$2({ name: i2, level: r2, properties: s4 });
  }
  static audioDetectionFail(e2, t2) {
    let i2 = this.getPropertiesWithError({ device: t2 }, e2), r2 = 2, s4 = "audiopresence.failed";
    return new P$2({ name: s4, level: r2, properties: i2 });
  }
  static previewNetworkQuality(e2) {
    return new P$2({ name: "perf.networkquality.preview", level: e2.error ? 2 : 1, properties: e2 });
  }
  static publishStats(e2) {
    return new P$2({ name: "publisher.stats", level: 1, properties: e2 });
  }
  static eventNameFor(e2, t2) {
    return `${e2}.${t2 ? "success" : "failed"}`;
  }
  static getPropertiesWithError(e2, t2) {
    let i2 = this.getErrorProperties(t2);
    return e2 = g$1(g$1({}, i2), e2), e2;
  }
  static getErrorProperties(e2) {
    return e2 ? e2 instanceof v$3 ? e2.toAnalyticsProperties() : { error_name: e2.name, error_message: e2.message, error_description: e2.cause } : {};
  }
};
E$3.KEY_REQUESTED_AT = "requested_at", E$3.KEY_RESPONDED_AT = "responded_at";
var Pr = ((l2) => (l2[l2.VERBOSE = 0] = "VERBOSE", l2[l2.DEBUG = 1] = "DEBUG", l2[l2.INFO = 2] = "INFO", l2[l2.WARN = 3] = "WARN", l2[l2.TIME = 4] = "TIME", l2[l2.TIMEEND = 5] = "TIMEEND", l2[l2.ERROR = 6] = "ERROR", l2[l2.NONE = 7] = "NONE", l2))(Pr || {}), Ar = typeof window != "undefined" && typeof window.expect != "undefined", o$2 = class {
  static v(e2, ...t2) {
    this.log(0, e2, ...t2);
  }
  static d(e2, ...t2) {
    this.log(1, e2, ...t2);
  }
  static i(e2, ...t2) {
    this.log(2, e2, ...t2);
  }
  static w(e2, ...t2) {
    this.log(3, e2, ...t2);
  }
  static e(e2, ...t2) {
    this.log(6, e2, ...t2);
  }
  static time(e2) {
    this.log(4, "[HMSPerformanceTiming]", e2);
  }
  static timeEnd(e2) {
    this.log(5, "[HMSPerformanceTiming]", e2, e2);
  }
  static cleanup() {
    performance.clearMarks(), performance.clearMeasures();
  }
  static log(e2, t2, ...i2) {
    if (!(this.level.valueOf() > e2.valueOf()))
      switch (e2) {
        case 0: {
          console.log(t2, ...i2);
          break;
        }
        case 1: {
          console.debug(t2, ...i2);
          break;
        }
        case 2: {
          console.info(t2, ...i2);
          break;
        }
        case 3: {
          console.warn(t2, ...i2);
          break;
        }
        case 6: {
          console.error(t2, ...i2);
          break;
        }
        case 4: {
          performance.mark(i2[0]);
          break;
        }
        case 5: {
          let r2 = i2[0];
          try {
            let s4 = performance.measure(r2, r2);
            this.log(1, t2, r2, s4 == null ? void 0 : s4.duration), performance.clearMarks(r2), performance.clearMeasures(r2);
          } catch (s4) {
            this.log(1, t2, r2, s4);
          }
          break;
        }
      }
  }
};
o$2.level = Ar ? 7 : 0;
var br = ["init_response_time", "ws_connect_time", "on_policy_change_time", "local_audio_track_time", "local_video_track_time", "peer_list_time", "room_state_time", "join_response_time"], tt$1 = class {
  constructor() {
    this.eventPerformanceMeasures = {};
  }
  start(e2) {
    performance.mark(e2);
  }
  end(e2) {
    var t2;
    try {
      this.eventPerformanceMeasures[e2] = performance.measure(e2, e2), o$2.d("[HMSPerformanceTiming]", e2, (t2 = this.eventPerformanceMeasures[e2]) == null ? void 0 : t2.duration);
    } catch (i2) {
      o$2.w("[AnalyticsTimer]", `Error in measuring performance for event ${e2}`, { error: i2 });
    }
  }
  getTimeTaken(e2) {
    var t2;
    return (t2 = this.eventPerformanceMeasures[e2]) == null ? void 0 : t2.duration;
  }
  getTimes(...e2) {
    return [...br, ...e2].reduce((t2, i2) => M$1(g$1({}, t2), { [i2]: this.getTimeTaken(i2) }), {});
  }
  cleanup() {
    this.eventPerformanceMeasures = {};
  }
};
var f$3 = { WebSocketConnectionErrors: { FAILED_TO_CONNECT: 1e3, WEBSOCKET_CONNECTION_LOST: 1003, ABNORMAL_CLOSE: 1006 }, APIErrors: { SERVER_ERRORS: 2e3, INIT_CONFIG_NOT_AVAILABLE: 2002, ENDPOINT_UNREACHABLE: 2003, INVALID_TOKEN_FORMAT: 2004 }, TracksErrors: { GENERIC_TRACK: 3e3, CANT_ACCESS_CAPTURE_DEVICE: 3001, DEVICE_NOT_AVAILABLE: 3002, DEVICE_IN_USE: 3003, DEVICE_LOST_MIDWAY: 3008, NOTHING_TO_RETURN: 3005, INVALID_VIDEO_SETTINGS: 3006, CODEC_CHANGE_NOT_PERMITTED: 3007, AUTOPLAY_ERROR: 3008, OVER_CONSTRAINED: 3009, NO_AUDIO_DETECTED: 3010, SYSTEM_DENIED_PERMISSION: 3011, CURRENT_TAB_NOT_SHARED: 3012, AUDIO_PLAYBACK_ERROR: 3013 }, WebrtcErrors: { CREATE_OFFER_FAILED: 4001, CREATE_ANSWER_FAILED: 4002, SET_LOCAL_DESCRIPTION_FAILED: 4003, SET_REMOTE_DESCRIPTION_FAILED: 4004, ICE_FAILURE: 4005, ICE_DISCONNECTED: 4006, STATS_FAILED: 4007 }, WebsocketMethodErrors: { SERVER_ERRORS: 5e3, ALREADY_JOINED: 5001, CANNOT_JOIN_PREVIEW_IN_PROGRESS: 5002 }, GenericErrors: { NOT_CONNECTED: 6e3, SIGNALLING: 6001, UNKNOWN: 6002, NOT_READY: 6003, JSON_PARSING_FAILED: 6004, TRACK_METADATA_MISSING: 6005, RTC_TRACK_MISSING: 6006, PEER_METADATA_MISSING: 6007, INVALID_ROLE: 6008, PREVIEW_IN_PROGRESS: 6009, MISSING_MEDIADEVICES: 6010, MISSING_RTCPEERCONNECTION: 6011 }, PlaylistErrors: { NO_ENTRY_TO_PLAY: 8001, NO_ENTRY_IS_PLAYING: 8002 } };
function Qt$1(n9) {
  switch (n9) {
    case "join":
      return "JOIN";
    case "offer":
      return "PUBLISH";
    case "answer":
      return "SUBSCRIBE";
    case "track-update":
      return "TRACK";
    default:
      return "NONE";
  }
}
var Rr = ["join", "offer", "answer", "trickle", "on-error", "JOIN"], p$3 = { WebSocketConnectionErrors: { FailedToConnect(n9, e2 = "") {
  return new v$3(f$3.WebSocketConnectionErrors.FAILED_TO_CONNECT, "WebsocketFailedToConnect", n9, `[WS]: ${e2}`, `[WS]: ${e2}`);
}, WebSocketConnectionLost(n9, e2 = "") {
  return new v$3(f$3.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, "WebSocketConnectionLost", n9, "Network connection lost ", e2);
}, AbnormalClose(n9, e2 = "") {
  return new v$3(f$3.WebSocketConnectionErrors.ABNORMAL_CLOSE, "WebSocketAbnormalClose", n9, "Websocket closed abnormally", e2);
} }, APIErrors: { ServerErrors(n9, e2, t2 = "", i2 = true) {
  return new v$3(n9, "ServerErrors", e2, `[${e2}]: Server error ${t2}`, t2, i2);
}, EndpointUnreachable(n9, e2 = "") {
  return new v$3(f$3.APIErrors.ENDPOINT_UNREACHABLE, "EndpointUnreachable", n9, `Endpoint is not reachable - ${e2}`, e2);
}, InvalidTokenFormat(n9, e2 = "") {
  return new v$3(f$3.APIErrors.INVALID_TOKEN_FORMAT, "InvalidTokenFormat", n9, `Token is not in proper JWT format - ${e2}`, e2, true);
}, InitConfigNotAvailable(n9, e2 = "") {
  return new v$3(f$3.APIErrors.INIT_CONFIG_NOT_AVAILABLE, "InitError", n9, `[INIT]: ${e2}`, `[INIT]: ${e2}`);
} }, TracksErrors: { GenericTrack(n9, e2 = "") {
  return new v$3(f$3.TracksErrors.GENERIC_TRACK, "GenericTrack", n9, `[TRACK]: ${e2}`, `[TRACK]: ${e2}`);
}, CantAccessCaptureDevice(n9, e2, t2 = "") {
  return new v$3(f$3.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE, "CantAccessCaptureDevice", n9, `User denied permission to access capture device - ${e2}`, t2);
}, DeviceNotAvailable(n9, e2, t2 = "") {
  return new v$3(f$3.TracksErrors.DEVICE_NOT_AVAILABLE, "DeviceNotAvailable", n9, `[TRACK]: Capture device is no longer available - ${e2}`, t2);
}, DeviceInUse(n9, e2, t2 = "") {
  return new v$3(f$3.TracksErrors.DEVICE_IN_USE, "DeviceInUse", n9, `[TRACK]: Capture device is in use by another application - ${e2}`, t2);
}, DeviceLostMidway(n9, e2, t2 = "") {
  return new v$3(f$3.TracksErrors.DEVICE_LOST_MIDWAY, "DeviceLostMidway", n9, `Lost access to capture device midway - ${e2}`, t2);
}, NothingToReturn(n9, e2 = "", t2 = "There is no media to return. Please select either video or audio or both.") {
  return new v$3(f$3.TracksErrors.NOTHING_TO_RETURN, "NothingToReturn", n9, t2, e2);
}, InvalidVideoSettings(n9, e2 = "") {
  return new v$3(f$3.TracksErrors.INVALID_VIDEO_SETTINGS, "InvalidVideoSettings", n9, "Cannot enable simulcast when no video settings are provided", e2);
}, AutoplayBlocked(n9, e2 = "") {
  return new v$3(f$3.TracksErrors.AUTOPLAY_ERROR, "AutoplayBlocked", n9, "Autoplay blocked because the user didn't interact with the document first", e2);
}, CodecChangeNotPermitted(n9, e2 = "") {
  return new v$3(f$3.TracksErrors.CODEC_CHANGE_NOT_PERMITTED, "CodecChangeNotPermitted", n9, "Codec can't be changed mid call.", e2);
}, OverConstrained(n9, e2, t2 = "") {
  return new v$3(f$3.TracksErrors.OVER_CONSTRAINED, "OverConstrained", n9, `[TRACK]: Requested constraints cannot be satisfied with the device hardware - ${e2}`, t2);
}, NoAudioDetected(n9, e2 = "Please check the mic or use another audio input") {
  return new v$3(f$3.TracksErrors.NO_AUDIO_DETECTED, "NoAudioDetected", n9, "No audio input detected from microphone", e2);
}, SystemDeniedPermission(n9, e2, t2 = "") {
  return new v$3(f$3.TracksErrors.SYSTEM_DENIED_PERMISSION, "SystemDeniedPermission", n9, `Operating System denied permission to access capture device - ${e2}`, t2);
}, CurrentTabNotShared() {
  return new v$3(f$3.TracksErrors.CURRENT_TAB_NOT_SHARED, "CurrentTabNotShared", "TRACK", "The app requires you to share the current tab", "You must screen share the current tab in order to proceed");
}, AudioPlaybackError(n9) {
  return new v$3(f$3.TracksErrors.AUDIO_PLAYBACK_ERROR, "Audio playback error", "TRACK", n9, n9);
} }, WebrtcErrors: { CreateOfferFailed(n9, e2 = "") {
  return new v$3(f$3.WebrtcErrors.CREATE_OFFER_FAILED, "CreateOfferFailed", n9, `[${n9.toString()}]: Failed to create offer. `, e2);
}, CreateAnswerFailed(n9, e2 = "") {
  return new v$3(f$3.WebrtcErrors.CREATE_ANSWER_FAILED, "CreateAnswerFailed", n9, `[${n9.toString()}]: Failed to create answer. `, e2);
}, SetLocalDescriptionFailed(n9, e2 = "") {
  return new v$3(f$3.WebrtcErrors.SET_LOCAL_DESCRIPTION_FAILED, "SetLocalDescriptionFailed", n9, `[${n9.toString()}]: Failed to set offer. `, e2);
}, SetRemoteDescriptionFailed(n9, e2 = "") {
  return new v$3(f$3.WebrtcErrors.SET_REMOTE_DESCRIPTION_FAILED, "SetRemoteDescriptionFailed", n9, `[${n9.toString()}]: Failed to set answer. `, e2, true);
}, ICEFailure(n9, e2 = "") {
  return new v$3(f$3.WebrtcErrors.ICE_FAILURE, "ICEFailure", n9, `[${n9.toString()}]: Ice connection state FAILED`, e2);
}, ICEDisconnected(n9, e2 = "") {
  return new v$3(f$3.WebrtcErrors.ICE_DISCONNECTED, "ICEDisconnected", n9, `[${n9.toString()}]: Ice connection state DISCONNECTED`, e2);
}, StatsFailed(n9, e2 = "") {
  return new v$3(f$3.WebrtcErrors.STATS_FAILED, "StatsFailed", n9, `Failed to WebRTC get stats - ${e2}`, e2);
} }, WebsocketMethodErrors: { ServerErrors(n9, e2, t2) {
  return new v$3(n9, "ServerErrors", e2, t2, t2, Rr.includes(e2));
}, AlreadyJoined(n9, e2 = "") {
  return new v$3(f$3.WebsocketMethodErrors.ALREADY_JOINED, "AlreadyJoined", n9, "[JOIN]: You have already joined this room.", e2);
}, CannotJoinPreviewInProgress(n9, e2 = "") {
  return new v$3(f$3.WebsocketMethodErrors.CANNOT_JOIN_PREVIEW_IN_PROGRESS, "CannotJoinPreviewInProgress", n9, "[JOIN]: Cannot join if preview is in progress", e2);
} }, GenericErrors: { NotConnected(n9, e2 = "") {
  return new v$3(f$3.GenericErrors.NOT_CONNECTED, "NotConnected", n9, "Client is not connected", e2);
}, Signalling(n9, e2) {
  return new v$3(f$3.GenericErrors.SIGNALLING, "Signalling", n9, `Unknown signalling error: ${n9.toString()} ${e2} `, e2);
}, Unknown(n9, e2) {
  return new v$3(f$3.GenericErrors.UNKNOWN, "Unknown", n9, `Unknown exception: ${e2}`, e2);
}, NotReady(n9, e2 = "") {
  return new v$3(f$3.GenericErrors.NOT_READY, "NotReady", n9, e2, e2);
}, JsonParsingFailed(n9, e2, t2 = "") {
  return new v$3(f$3.GenericErrors.JSON_PARSING_FAILED, "JsonParsingFailed", n9, `Failed to parse JSON message - ${e2}`, t2);
}, TrackMetadataMissing(n9, e2 = "") {
  return new v$3(f$3.GenericErrors.TRACK_METADATA_MISSING, "TrackMetadataMissing", n9, "Track Metadata Missing", e2);
}, RTCTrackMissing(n9, e2 = "") {
  return new v$3(f$3.GenericErrors.RTC_TRACK_MISSING, "RTCTrackMissing", n9, "RTC Track missing", e2);
}, PeerMetadataMissing(n9, e2 = "") {
  return new v$3(f$3.GenericErrors.PEER_METADATA_MISSING, "PeerMetadataMissing", n9, "Peer Metadata Missing", e2);
}, ValidationFailed(n9, e2) {
  return new v$3(f$3.GenericErrors.INVALID_ROLE, "ValidationFailed", "VALIDATION", n9, e2 ? JSON.stringify(e2) : "");
}, InvalidRole(n9, e2) {
  return new v$3(f$3.GenericErrors.INVALID_ROLE, "InvalidRole", n9, "Invalid role. Join with valid role", e2, true);
}, PreviewAlreadyInProgress(n9, e2 = "") {
  return new v$3(f$3.GenericErrors.PREVIEW_IN_PROGRESS, "PreviewAlreadyInProgress", n9, "[Preview]: Cannot join if preview is in progress", e2);
}, MissingMediaDevices() {
  return new v$3(f$3.GenericErrors.MISSING_MEDIADEVICES, "MissingMediaDevices", "JOIN", "navigator.mediaDevices is undefined. 100ms SDK won't work on this website as WebRTC is not supported on HTTP endpoints(missing navigator.mediaDevices). Please ensure you're using the SDK either on localhost or a valid HTTPS endpoint.", "", true);
}, MissingRTCPeerConnection() {
  return new v$3(f$3.GenericErrors.MISSING_RTCPEERCONNECTION, "MissingRTCPeerConnection", "JOIN", "RTCPeerConnection which is a core requirement for WebRTC call was not found, this could be due to an unsupported browser or browser extensions blocking WebRTC", "", true);
} }, MediaPluginErrors: { PlatformNotSupported(n9, e2 = "") {
  return new v$3(7001, "PlatformNotSupported", n9, "Check HMS Docs to see the list of supported platforms", e2);
}, InitFailed(n9, e2 = "") {
  return new v$3(7002, "InitFailed", n9, "Plugin init failed", e2);
}, ProcessingFailed(n9, e2 = "") {
  return new v$3(7003, "ProcessingFailed", n9, "Plugin processing failed", e2);
}, AddAlreadyInProgress(n9, e2 = "") {
  return new v$3(7004, "AddAlreadyInProgress", n9, "Plugin add already in progress", e2);
}, DeviceNotSupported(n9, e2 = "") {
  return new v$3(7005, "DeviceNotSupported", n9, "Check HMS Docs to see the list of supported devices", e2);
} }, PlaylistErrors: { NoEntryToPlay(n9, e2) {
  return new v$3(f$3.PlaylistErrors.NO_ENTRY_TO_PLAY, "NoEntryToPlay", n9, "Reached end of playlist", e2);
}, NoEntryPlaying(n9, e2) {
  return new v$3(f$3.PlaylistErrors.NO_ENTRY_IS_PLAYING, "NoEntryIsPlaying", n9, "No entry is playing at this time", e2);
} } };
function Cr(n9, e2) {
  let t2 = n9.toLowerCase();
  return t2.includes("device not found") ? p$3.TracksErrors.DeviceNotAvailable("TRACK", e2, n9) : t2.includes("permission denied") ? p$3.TracksErrors.CantAccessCaptureDevice("TRACK", e2, n9) : p$3.TracksErrors.GenericTrack("TRACK", n9);
}
function wr(n9, e2 = "") {
  if (adapter.browserDetails.browser === "chrome" && n9.name === "NotAllowedError" && n9.message.includes("denied by system"))
    return p$3.TracksErrors.SystemDeniedPermission("TRACK", e2, n9.message);
  if (adapter.browserDetails.browser === "firefox" && n9.name === "NotFoundError") {
    let i2 = p$3.TracksErrors.SystemDeniedPermission("TRACK", e2, n9.message);
    return i2.description = `Capture device is either blocked at Operating System level or not available - ${e2}`, i2;
  }
  switch (n9.name) {
    case "OverconstrainedError":
      return p$3.TracksErrors.OverConstrained("TRACK", e2, n9.constraint);
    case "NotAllowedError":
      return p$3.TracksErrors.CantAccessCaptureDevice("TRACK", e2, n9.message);
    case "NotFoundError":
      return p$3.TracksErrors.DeviceNotAvailable("TRACK", e2, n9.message);
    case "NotReadableError":
      return p$3.TracksErrors.DeviceInUse("TRACK", e2, n9.message);
    case "TypeError":
      return p$3.TracksErrors.NothingToReturn("TRACK", n9.message);
    default:
      return Cr(n9.message, e2);
  }
}
function V$1(n9, e2) {
  let t2 = wr(n9, e2);
  return t2.addNativeError(n9), t2;
}
var de = class {
  constructor(e2) {
    this.tracks = new Array();
    this.nativeStream = e2, this.id = e2.id;
  }
  updateId(e2) {
    this.id = e2;
  }
};
var X$2 = (n9) => n9 ? `{
    trackId: ${n9.id};
    kind: ${n9.kind};
    enabled: ${n9.enabled};
    muted: ${n9.muted};
    readyState: ${n9.readyState};
  }` : "";
var Z$2 = class {
  constructor(e2, t2, i2) {
    this.logIdentifier = "";
    this.stream = e2, this.nativeTrack = t2, this.source = i2;
  }
  get enabled() {
    return this.nativeTrack.enabled;
  }
  get trackId() {
    return this.firstTrackId || this.sdpTrackId || this.nativeTrack.id;
  }
  getMediaTrackSettings() {
    return this.nativeTrack.getSettings();
  }
  setEnabled(e2) {
    return d$3(this, null, function* () {
      this.nativeTrack.enabled = e2;
    });
  }
  setSdpTrackId(e2) {
    this.sdpTrackId = e2;
  }
  setFirstTrackId(e2) {
    this.firstTrackId = e2;
  }
  cleanup() {
    var e2;
    o$2.d("[HMSTrack]", "Stopping track", this.toString()), (e2 = this.nativeTrack) == null || e2.stop();
  }
  toString() {
    var e2;
    return `{
      streamId: ${this.stream.id};
      peerId: ${this.peerId};
      trackId: ${this.trackId};
      mid: ${((e2 = this.transceiver) == null ? void 0 : e2.mid) || "-"};
      logIdentifier: ${this.logIdentifier};
      source: ${this.source};
      enabled: ${this.enabled};
      nativeTrack: ${X$2(this.nativeTrack)};
    }`;
  }
};
var le$1 = ((t2) => (t2.AUDIO = "audio", t2.VIDEO = "video", t2))(le$1 || {});
var Te$1 = class extends Z$2 {
  constructor(t2, i2, r2) {
    super(t2, i2, r2);
    this.type = "audio";
    this.audioElement = null;
    if (i2.kind !== "audio")
      throw new Error("Expected 'track' kind = 'audio'");
  }
  getVolume() {
    return this.audioElement ? this.audioElement.volume * 100 : null;
  }
  setVolume(t2) {
    return d$3(this, null, function* () {
      if (t2 < 0 || t2 > 100)
        throw Error("Please pass a valid number between 0-100");
      yield this.subscribeToAudio(t2 === 0 ? false : this.enabled), this.audioElement && (this.audioElement.volume = Math.floor(t2 / 100));
    });
  }
  setAudioElement(t2) {
    o$2.d("[HMSAudioTrack]", this.logIdentifier, "adding audio element", `${this}`, t2), this.audioElement = t2;
  }
  getAudioElement() {
    return this.audioElement;
  }
  getOutputDevice() {
    return this.outputDevice;
  }
  cleanup() {
    super.cleanup(), this.audioElement && (this.audioElement.srcObject = null, this.audioElement.remove(), this.audioElement = null);
  }
  setOutputDevice(t2) {
    return d$3(this, null, function* () {
      var i2;
      if (!t2) {
        o$2.d("[HMSAudioTrack]", this.logIdentifier, "device is null", `${this}`);
        return;
      }
      if (!this.audioElement) {
        o$2.d("[HMSAudioTrack]", this.logIdentifier, "no audio element to set output", `${this}`), this.outputDevice = t2;
        return;
      }
      try {
        typeof this.audioElement.setSinkId == "function" && (yield (i2 = this.audioElement) == null ? void 0 : i2.setSinkId(t2.deviceId), this.outputDevice = t2);
      } catch (r2) {
        o$2.d("[HMSAudioTrack]", "error in setSinkId", r2);
      }
    });
  }
  subscribeToAudio(t2) {
    return d$3(this, null, function* () {
      this.stream instanceof K$2 && (yield this.stream.setAudio(t2, this.trackId, this.logIdentifier));
    });
  }
};
var Jt = class {
  constructor() {
    this.storage = new U$1("hms-device-selection");
    this.remember = false;
    this.TAG = "[HMSDeviceStorage]";
  }
  setDevices(e2) {
    this.devices = e2;
  }
  rememberDevices(e2) {
    this.remember = e2;
  }
  updateSelection(e2, { deviceId: t2, groupId: i2 }) {
    if (!this.devices || !this.remember)
      return;
    let r2 = this.devices[e2].find((a2) => this.isSame({ deviceId: t2, groupId: i2 }, a2));
    if (!r2) {
      o$2.w(this.TAG, `Could not find device with deviceId: ${t2}, groupId: ${i2}`);
      return;
    }
    let s4 = this.storage.get() || {};
    s4[e2] = r2, this.storage.set(s4);
  }
  getSelection() {
    if (this.remember)
      return this.storage.get();
  }
  cleanup() {
    this.remember = false, this.devices = void 0;
  }
  isSame(e2, t2) {
    return e2.deviceId === t2.deviceId && (e2.groupId === t2.groupId || !e2.groupId);
  }
}, O$2 = new Jt();
var Ci = ((t2) => (t2.TRANSFORM = "TRANSFORM", t2.ANALYZE = "ANALYZE", t2))(Ci || {}), it$1 = ((t2) => (t2.PLATFORM_NOT_SUPPORTED = "PLATFORM_NOT_SUPPORTED", t2.DEVICE_NOT_SUPPORTED = "DEVICE_NOT_SUPPORTED", t2))(it$1 || {});
var q$1 = class {
  static failure(e2, t2) {
    let i2 = "mediaPlugin.failed", r2 = 2, s4 = g$1({ plugin_name: e2 }, t2.toAnalyticsProperties());
    return new P$2({ name: i2, level: r2, properties: s4 });
  }
  static audioPluginFailure(e2, t2, i2) {
    let r2 = "mediaPlugin.failed", s4 = 2, a2 = g$1({ plugin_name: e2, sampleRate: t2 }, i2.toAnalyticsProperties());
    return new P$2({ name: r2, level: s4, properties: a2 });
  }
  static audioPluginStats({ pluginName: e2, duration: t2, loadTime: i2, sampleRate: r2 }) {
    let s4 = "mediaPlugin.stats", a2 = 1, c2 = { plugin_name: e2, duration: t2, load_time: i2, sampleRate: r2 };
    return new P$2({ name: s4, level: a2, properties: c2 });
  }
  static stats({ pluginName: e2, duration: t2, loadTime: i2, avgPreProcessingTime: r2, avgProcessingTime: s4, inputFrameRate: a2, pluginFrameRate: c2 }) {
    let l2 = "mediaPlugin.stats", h2 = 1, u2 = { plugin_name: e2, duration: t2, load_time: i2, avg_preprocessing_time: r2, avg_processing_time: s4, input_frame_rate: a2, plugin_frame_rate: c2 };
    return new P$2({ name: l2, level: h2, properties: u2 });
  }
};
var rt$1 = class {
  constructor(e2) {
    this.eventBus = e2;
    this.TAG = "[AudioPluginsAnalytics]";
    this.initTime = {}, this.addedTimestamps = {}, this.pluginAdded = {}, this.pluginSampleRate = {};
  }
  added(e2, t2) {
    this.pluginAdded[e2] = true, this.addedTimestamps[e2] = Date.now(), this.initTime[e2] = 0, this.pluginSampleRate[e2] = t2;
  }
  removed(e2) {
    if (this.pluginAdded[e2]) {
      let t2 = { pluginName: e2, duration: Math.floor((Date.now() - this.addedTimestamps[e2]) / 1e3), loadTime: this.initTime[e2], sampleRate: this.pluginSampleRate[e2] };
      this.eventBus.analytics.publish(q$1.audioPluginStats(t2)), this.clean(e2);
    }
  }
  failure(e2, t2) {
    this.pluginAdded[e2] && (this.eventBus.analytics.publish(q$1.audioPluginFailure(e2, this.pluginSampleRate[e2], t2)), this.clean(e2));
  }
  initWithTime(e2, t2) {
    return d$3(this, null, function* () {
      if (this.initTime[e2]) {
        o$2.i(this.TAG, `Plugin Already loaded ${e2}, time it took: ${this.initTime[e2]}`);
        return;
      }
      let i2;
      try {
        i2 = yield this.timeInMs(t2), o$2.i(this.TAG, `Time taken for Plugin ${e2} initialization : ${i2}`);
      } catch (r2) {
        let s4 = p$3.MediaPluginErrors.InitFailed("AUDIO_PLUGINS", `failed during initialization of plugin${r2.message || r2}`);
        throw o$2.e(this.TAG, s4), this.failure(e2, s4), s4;
      }
      i2 && (this.initTime[e2] = i2);
    });
  }
  timeInMs(e2) {
    return d$3(this, null, function* () {
      let t2 = Date.now();
      return yield e2(), Math.floor(Date.now() - t2);
    });
  }
  clean(e2) {
    delete this.addedTimestamps[e2], delete this.initTime[e2], delete this.pluginAdded[e2], delete this.pluginSampleRate[e2];
  }
};
var Lr = 48e3, Hr = () => navigator.userAgent.indexOf("Firefox") !== -1, He$1 = class {
  constructor(e2, t2) {
    this.TAG = "[AudioPluginsManager]";
    this.pluginAddInProgress = false;
    this.hmsTrack = e2, this.pluginsMap = /* @__PURE__ */ new Map(), this.analytics = new rt$1(t2), this.createAudioContext();
  }
  getPlugins() {
    return Array.from(this.pluginsMap.keys());
  }
  addPlugin(e2) {
    return d$3(this, null, function* () {
      var i2;
      let t2 = (i2 = e2.getName) == null ? void 0 : i2.call(e2);
      if (!t2) {
        o$2.w("no name provided by the plugin");
        return;
      }
      if (this.pluginAddInProgress) {
        let r2 = p$3.MediaPluginErrors.AddAlreadyInProgress("AUDIO_PLUGINS", "Add Plugin is already in Progress");
        throw this.analytics.added(t2, this.audioContext.sampleRate), this.analytics.failure(t2, r2), o$2.w("can't add another plugin when previous add is in progress"), r2;
      }
      this.pluginAddInProgress = true;
      try {
        yield this.addPluginInternal(e2);
      } finally {
        this.pluginAddInProgress = false;
      }
    });
  }
  addPluginInternal(e2) {
    return d$3(this, null, function* () {
      var i2;
      let t2 = (i2 = e2.getName) == null ? void 0 : i2.call(e2);
      if (this.pluginsMap.get(t2)) {
        o$2.w(this.TAG, `plugin - ${t2} already added.`);
        return;
      }
      yield this.validateAndThrow(t2, e2);
      try {
        this.pluginsMap.size === 0 ? yield this.initAudioNodes() : this.prevAudioNode && this.prevAudioNode.disconnect(), this.analytics.added(t2, this.audioContext.sampleRate), yield this.analytics.initWithTime(t2, () => d$3(this, null, function* () {
          return e2.init();
        })), this.pluginsMap.set(t2, e2), yield this.processPlugin(e2), yield this.connectToDestination();
      } catch (r2) {
        throw o$2.e(this.TAG, "failed to add plugin", r2), r2;
      }
    });
  }
  validatePlugin(e2) {
    return e2.checkSupport(this.audioContext);
  }
  validateAndThrow(e2, t2) {
    return d$3(this, null, function* () {
      let i2 = this.validatePlugin(t2);
      if (i2.isSupported)
        o$2.i(this.TAG, `plugin is supported,- ${t2.getName()}`);
      else if (this.analytics.added(e2, this.audioContext.sampleRate), i2.errType === "PLATFORM_NOT_SUPPORTED") {
        let r2 = p$3.MediaPluginErrors.PlatformNotSupported("AUDIO_PLUGINS", "platform not supported, see docs");
        throw this.analytics.failure(e2, r2), yield this.cleanup(), r2;
      } else if (i2.errType === "DEVICE_NOT_SUPPORTED") {
        let r2 = p$3.MediaPluginErrors.DeviceNotSupported("AUDIO_PLUGINS", "audio device not supported, see docs");
        throw this.analytics.failure(e2, r2), yield this.cleanup(), r2;
      }
    });
  }
  removePlugin(e2) {
    return d$3(this, null, function* () {
      yield this.removePluginInternal(e2), this.pluginsMap.size === 0 ? (yield this.cleanup(), o$2.i(this.TAG, "No plugins left, stopping plugins loop"), yield this.hmsTrack.setProcessedTrack(void 0)) : yield this.reprocessPlugins();
    });
  }
  cleanup() {
    return d$3(this, null, function* () {
      var e2, t2, i2;
      for (let r2 of this.pluginsMap.values())
        yield this.removePluginInternal(r2);
      yield this.hmsTrack.setProcessedTrack(void 0), (e2 = this.sourceNode) == null || e2.disconnect(), (t2 = this.prevAudioNode) == null || t2.disconnect(), (i2 = this.outputTrack) == null || i2.stop(), this.sourceNode = void 0, this.destinationNode = void 0, this.prevAudioNode = void 0, this.outputTrack = void 0;
    });
  }
  closeContext() {
    return d$3(this, null, function* () {
      var e2;
      (e2 = this.audioContext) == null || e2.close(), this.audioContext = void 0;
    });
  }
  reprocessPlugins() {
    return d$3(this, null, function* () {
      if (this.pluginsMap.size === 0 || !this.sourceNode)
        return;
      let e2 = Array.from(this.pluginsMap.values());
      yield this.cleanup(), yield this.initAudioNodes();
      for (let t2 of e2)
        yield this.addPlugin(t2);
    });
  }
  initAudioNodes() {
    return d$3(this, null, function* () {
      if (this.audioContext) {
        if (!this.sourceNode) {
          let e2 = new MediaStream([this.hmsTrack.nativeTrack]);
          this.sourceNode = this.audioContext.createMediaStreamSource(e2);
        }
        if (!this.destinationNode) {
          this.destinationNode = this.audioContext.createMediaStreamDestination(), this.outputTrack = this.destinationNode.stream.getAudioTracks()[0];
          try {
            yield this.hmsTrack.setProcessedTrack(this.outputTrack);
          } catch (e2) {
            throw o$2.e(this.TAG, "error in setting processed track", e2), e2;
          }
        }
      }
    });
  }
  processPlugin(e2) {
    return d$3(this, null, function* () {
      try {
        let t2 = yield e2.processAudioTrack(this.audioContext, this.prevAudioNode || this.sourceNode);
        this.prevAudioNode && this.prevAudioNode.connect(t2), this.prevAudioNode = t2;
      } catch (t2) {
        let i2 = e2.getName();
        o$2.e(this.TAG, `error in processing plugin ${i2}`, t2), yield this.removePluginInternal(e2);
      }
    });
  }
  connectToDestination() {
    return d$3(this, null, function* () {
      try {
        this.prevAudioNode && this.destinationNode && this.prevAudioNode.context === this.destinationNode.context && this.prevAudioNode.connect(this.destinationNode);
      } catch (e2) {
        o$2.e(this.TAG, "error in connecting to destination node", e2);
      }
    });
  }
  removePluginInternal(e2) {
    return d$3(this, null, function* () {
      var i2;
      let t2 = (i2 = e2.getName) == null ? void 0 : i2.call(e2);
      if (!this.pluginsMap.get(t2)) {
        o$2.w(this.TAG, `plugin - ${t2} not found to remove.`);
        return;
      }
      o$2.i(this.TAG, `removing plugin ${t2}`), this.pluginsMap.delete(t2), e2.stop(), this.analytics.removed(t2);
    });
  }
  createAudioContext() {
    this.audioContext || (Hr() ? this.audioContext = new AudioContext() : this.audioContext = new AudioContext({ sampleRate: Lr }));
  }
};
function st$1(n9) {
  return d$3(this, null, function* () {
    try {
      return (yield navigator.mediaDevices.getUserMedia({ audio: n9 ? n9.toConstraints() : false })).getAudioTracks()[0];
    } catch (e2) {
      throw V$1(e2, "audio");
    }
  });
}
function at$1(n9) {
  return d$3(this, null, function* () {
    try {
      return (yield navigator.mediaDevices.getUserMedia({ video: n9 ? n9.toConstraints() : false })).getVideoTracks()[0];
    } catch (e2) {
      throw V$1(e2, "video");
    }
  });
}
function B$2(n9) {
  return "canvas" in n9 || n9.label === "MediaStreamAudioDestinationNode" || n9.label === "";
}
var ee$1 = { audioContext: null, getAudioContext() {
  return this.audioContext || (this.audioContext = new AudioContext()), this.audioContext;
}, resumeContext() {
  return d$3(this, null, function* () {
    try {
      return yield this.getAudioContext().resume();
    } catch (n9) {
      o$2.e("AudioContext", n9);
    }
  });
} };
var te$1 = class {
  constructor(e2 = 1 / 0) {
    this.capacity = e2;
    this.storage = [];
  }
  size() {
    return this.storage.length;
  }
  toList() {
    return this.storage.slice(0);
  }
  enqueue(e2) {
    this.size() === this.capacity && this.dequeue(), this.storage.push(e2);
  }
  dequeue() {
    return this.storage.shift();
  }
  aggregate(e2) {
    return e2(this.storage);
  }
};
function R$2(n9) {
  if (n9 < 0)
    throw Error("`ms` should be a positive integer");
  return new Promise((e2) => setTimeout(e2, n9));
}
function nt$1(n9, e2 = 300) {
  let t2;
  return function(...i2) {
    clearTimeout(t2), t2 = void 0;
    let r2 = this;
    t2 = setTimeout(() => {
      n9.apply(r2, i2);
    }, e2);
  };
}
var _r = 35, Dr = 5, ot$1 = class {
  constructor(e2, t2, i2) {
    this.track = e2;
    this.audioLevelEvent = t2;
    this.silenceEvent = i2;
    this.TAG = "[TrackAudioLevelMonitor]";
    this.audioLevel = 0;
    this.isMonitored = false;
    this.interval = 100;
    this.historyInterval = 700;
    this.history = new te$1(this.historyInterval / this.interval);
    this.detectSilence = () => d$3(this, null, function* () {
      let i3 = 0;
      for (; this.isMonitored; ) {
        if (this.track.enabled)
          if (this.isSilentThisInstant()) {
            if (i3++, i3 > 50) {
              this.silenceEvent.publish({ track: this.track });
              break;
            }
          } else
            break;
        yield R$2(20);
      }
    });
    try {
      let r2 = new MediaStream([this.track.nativeTrack]);
      this.analyserNode = this.createAnalyserNodeForStream(r2);
    } catch (r2) {
      o$2.w(this.TAG, "Unable to initialize AudioContext", r2);
    }
  }
  start() {
    this.stop(), this.isMonitored = true, o$2.d(this.TAG, "Starting track Monitor", `${this.track}`), this.loop().then(() => o$2.d(this.TAG, "Stopping track Monitor", `${this.track}`));
  }
  stop() {
    if (!this.analyserNode) {
      o$2.d(this.TAG, "AudioContext not initialized");
      return;
    }
    this.sendAudioLevel(0), this.isMonitored = false;
  }
  loop() {
    return d$3(this, null, function* () {
      for (; this.isMonitored; )
        this.sendAudioLevel(this.getMaxAudioLevelOverPeriod()), yield R$2(this.interval);
    });
  }
  sendAudioLevel(e2 = 0) {
    if (e2 = e2 > _r ? e2 : 0, Math.abs(this.audioLevel - e2) > Dr) {
      this.audioLevel = e2;
      let i2 = { track: this.track, audioLevel: this.audioLevel };
      this.audioLevelEvent.publish(i2);
    }
  }
  getMaxAudioLevelOverPeriod() {
    if (!this.analyserNode) {
      o$2.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e2 = this.calculateAudioLevel();
    return e2 !== void 0 && this.history.enqueue(e2), this.history.aggregate((t2) => Math.max(...t2));
  }
  calculateAudioLevel() {
    if (!this.analyserNode) {
      o$2.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e2 = new Uint8Array(this.analyserNode.fftSize);
    this.analyserNode.getByteTimeDomainData(e2);
    let t2 = 9e-3, i2 = t2;
    for (let a2 of e2)
      i2 = Math.max(i2, (a2 - 128) / 128);
    let r2 = (Math.log(t2) - Math.log(i2)) / Math.log(t2);
    return Math.ceil(Math.min(Math.max(r2 * 100, 0), 100));
  }
  isSilentThisInstant() {
    if (!this.analyserNode) {
      o$2.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e2 = new Uint8Array(this.analyserNode.fftSize);
    return this.analyserNode.getByteTimeDomainData(e2), !e2.some((t2) => t2 !== 128 && t2 !== 0);
  }
  createAnalyserNodeForStream(e2) {
    let t2 = ee$1.getAudioContext(), i2 = t2.createAnalyser();
    return t2.createMediaStreamSource(e2).connect(i2), i2;
  }
};
var Hi = ((s4) => (s4.RECORDING_STATE_UPDATED = "RECORDING_STATE_UPDATED", s4.BROWSER_RECORDING_STATE_UPDATED = "BROWSER_RECORDING_STATE_UPDATED", s4.SERVER_RECORDING_STATE_UPDATED = "SERVER_RECORDING_STATE_UPDATED", s4.RTMP_STREAMING_STATE_UPDATED = "RTMP_STREAMING_STATE_UPDATED", s4.HLS_STREAMING_STATE_UPDATED = "HLS_STREAMING_STATE_UPDATED", s4))(Hi || {}), ct$1 = ((S2) => (S2[S2.PEER_JOINED = 0] = "PEER_JOINED", S2[S2.PEER_LEFT = 1] = "PEER_LEFT", S2[S2.AUDIO_TOGGLED = 2] = "AUDIO_TOGGLED", S2[S2.VIDEO_TOGGLED = 3] = "VIDEO_TOGGLED", S2[S2.BECAME_DOMINANT_SPEAKER = 4] = "BECAME_DOMINANT_SPEAKER", S2[S2.RESIGNED_DOMINANT_SPEAKER = 5] = "RESIGNED_DOMINANT_SPEAKER", S2[S2.STARTED_SPEAKING = 6] = "STARTED_SPEAKING", S2[S2.STOPPED_SPEAKING = 7] = "STOPPED_SPEAKING", S2[S2.ROLE_UPDATED = 8] = "ROLE_UPDATED", S2[S2.PEER_LIST = 9] = "PEER_LIST", S2[S2.NAME_UPDATED = 10] = "NAME_UPDATED", S2[S2.METADATA_UPDATED = 11] = "METADATA_UPDATED", S2))(ct$1 || {}), ie$1 = ((c2) => (c2[c2.TRACK_ADDED = 0] = "TRACK_ADDED", c2[c2.TRACK_REMOVED = 1] = "TRACK_REMOVED", c2[c2.TRACK_MUTED = 2] = "TRACK_MUTED", c2[c2.TRACK_UNMUTED = 3] = "TRACK_UNMUTED", c2[c2.TRACK_DESCRIPTION_CHANGED = 4] = "TRACK_DESCRIPTION_CHANGED", c2[c2.TRACK_DEGRADED = 5] = "TRACK_DEGRADED", c2[c2.TRACK_RESTORED = 6] = "TRACK_RESTORED", c2))(ie$1 || {}), zt = ((r2) => (r2[r2.POLL_CREATED = 0] = "POLL_CREATED", r2[r2.POLL_STARTED = 1] = "POLL_STARTED", r2[r2.POLL_STOPPED = 2] = "POLL_STOPPED", r2[r2.POLL_STATS_UPDATED = 3] = "POLL_STATS_UPDATED", r2))(zt || {});
var fe$1 = ((r2) => (r2.NONE = "none", r2.LOW = "low", r2.MEDIUM = "medium", r2.HIGH = "high", r2))(fe$1 || {}), Yt = { f: "high", h: "medium", q: "low" };
var _i = ((i2) => (i2.VP8 = "vp8", i2.VP9 = "vp9", i2.H264 = "h264", i2))(_i || {}), Di = ((e2) => (e2.OPUS = "opus", e2))(Di || {}), Oi = ((r2) => (r2.USER = "user", r2.ENVIRONMENT = "environment", r2.LEFT = "left", r2.RIGHT = "right", r2))(Oi || {});
var Or = ((i2) => (i2.videoInput = "videoInput", i2.audioInput = "audioInput", i2.audioOutput = "audioOutput", i2))(Or || {});
var Xt$1 = ((t2) => (t2.audio = "audio", t2.video = "video", t2))(Xt$1 || {});
var Ni = ((r2) => (r2.SINGLE_CHOICE = "single-choice", r2.MULTIPLE_CHOICE = "multiple-choice", r2.SHORT_ANSWER = "short-answer", r2.LONG_ANSWER = "long-answer", r2))(Ni || {});
var x$1 = class {
  constructor() {
    this._volume = 1;
    this._codec = "opus";
    this._maxBitrate = 32;
    this._deviceId = "default";
    this._advanced = [{ googEchoCancellation: { exact: true } }, { googExperimentalEchoCancellation: { exact: true } }, { autoGainControl: { exact: true } }, { noiseSuppression: { exact: true } }, { googHighpassFilter: { exact: true } }, { googAudioMirroring: { exact: true } }];
  }
  volume(e2) {
    if (!(0 <= e2 && e2 <= 1))
      throw Error("volume can only be in range [0.0, 1.0]");
    return this._volume = e2, this;
  }
  codec(e2) {
    return this._codec = e2, this;
  }
  maxBitrate(e2) {
    if (e2 && e2 <= 0)
      throw Error("maxBitrate should be >= 1");
    return this._maxBitrate = e2, this;
  }
  deviceId(e2) {
    return this._deviceId = e2, this;
  }
  advanced(e2) {
    return this._advanced = e2, this;
  }
  build() {
    return new ue$1(this._volume, this._codec, this._maxBitrate, this._deviceId, this._advanced);
  }
}, ue$1 = class {
  constructor(e2, t2, i2, r2, s4) {
    this.volume = e2, this.codec = t2, this.maxBitrate = i2, this.deviceId = r2, this.advanced = s4;
  }
  toConstraints() {
    return { deviceId: this.deviceId, advanced: this.advanced };
  }
  toAnalyticsProperties() {
    return { audio_bitrate: this.maxBitrate, audio_codec: this.codec };
  }
};
var N$3 = class {
  constructor() {
    this._width = 320;
    this._height = 180;
    this._codec = "vp8";
    this._maxFramerate = 30;
    this._maxBitrate = 150;
    this._advanced = [];
  }
  setWidth(e2) {
    return this._width = e2, this;
  }
  setHeight(e2) {
    return this._height = e2, this;
  }
  codec(e2) {
    return this._codec = e2, this;
  }
  maxFramerate(e2) {
    if (e2 && e2 <= 0)
      throw Error("maxFramerate should be >= 1");
    return this._maxFramerate = e2, this;
  }
  maxBitrate(e2, t2 = true) {
    if (typeof e2 == "number" && e2 <= 0)
      throw Error("maxBitrate should be >= 1");
    return this._maxBitrate = e2, !this._maxBitrate && t2 && (this._maxBitrate = 15e4), this;
  }
  deviceId(e2) {
    return this._deviceId = e2, this;
  }
  advanced(e2) {
    return this._advanced = e2, this;
  }
  facingMode(e2) {
    return this._facingMode = e2, this;
  }
  build() {
    return new he$1(this._width, this._height, this._codec, this._maxFramerate, this._deviceId, this._advanced, this._maxBitrate, this._facingMode);
  }
}, he$1 = class {
  constructor(e2, t2, i2, r2, s4, a2, c2, l2) {
    this.width = e2, this.height = t2, this.codec = i2, this.maxFramerate = r2, this.maxBitrate = c2, this.deviceId = s4, this.advanced = a2, this.facingMode = l2;
  }
  toConstraints(e2) {
    let t2 = "ideal";
    return e2 && (t2 = "max"), { width: { [t2]: this.width }, height: { [t2]: this.height }, frameRate: this.maxFramerate, deviceId: this.deviceId, facingMode: this.facingMode };
  }
  toAnalyticsProperties() {
    return { width: this.width, height: this.height, video_bitrate: this.maxBitrate, framerate: this.maxFramerate, video_codec: this.codec, facingMode: this.facingMode };
  }
};
var _e = class {
  constructor() {
    this._video = new N$3().build();
    this._audio = new x$1().build();
    this._screen = new N$3().build();
    this._simulcast = false;
  }
  video(e2) {
    return this._video = e2, this;
  }
  audio(e2) {
    return this._audio = e2, this;
  }
  screen(e2) {
    return this._screen = e2, this;
  }
  simulcast(e2) {
    return this._simulcast = e2, this;
  }
  build() {
    if (this._audio === null && this._video === null)
      throw p$3.TracksErrors.NothingToReturn("TRACK");
    if (this._video === null && this._simulcast)
      throw p$3.TracksErrors.InvalidVideoSettings("TRACK", "Cannot enable simulcast when no video settings are provided");
    return new Ee$1(this._video, this._audio, this._simulcast, this._screen || void 0);
  }
}, Ee$1 = class {
  constructor(e2, t2, i2, r2 = null) {
    this.video = e2, this.audio = t2, this.simulcast = i2, this.screen = r2;
  }
  toAnalyticsProperties() {
    let e2 = { audio_enabled: this.audio !== null, video_enabled: this.video !== null };
    return this.audio && (e2 = g$1(g$1({}, this.audio.toAnalyticsProperties()), e2)), this.video && (e2 = g$1(g$1({}, this.video.toAnalyticsProperties()), e2)), e2;
  }
};
function xi(n9, e2) {
  return function(i2) {
    return i2 in n9 && n9[i2] !== e2[i2];
  };
}
var pe = class n3 extends Te$1 {
  constructor(t2, i2, r2, s4, a2 = new x$1().build()) {
    super(t2, i2, r2);
    this.eventBus = s4;
    this.TAG = "[HMSLocalAudioTrack]";
    this.isPublished = false;
    this.handleVisibilityChange = () => d$3(this, null, function* () {
      document.visibilityState === "visible" && (yield this.replaceTrackWith(this.settings));
    });
    this.handleSettingsChange = (t3) => d$3(this, null, function* () {
      let i3 = this.stream, r3 = xi(t3, this.settings);
      r3("maxBitrate") && t3.maxBitrate && (yield i3.setMaxBitrateAndFramerate(this)), r3("advanced") && (yield this.replaceTrackWith(t3));
    });
    this.handleDeviceChange = (t3, i3 = false) => d$3(this, null, function* () {
      xi(t3, this.settings)("deviceId") && (yield this.replaceTrackWith(t3), i3 || O$2.updateSelection("audioInput", { deviceId: t3.deviceId, groupId: this.nativeTrack.getSettings().groupId }));
    });
    t2.tracks.push(this), this.settings = a2, a2.deviceId !== i2.getSettings().deviceId && !B$2(i2) && (this.settings = this.buildNewSettings({ deviceId: i2.getSettings().deviceId })), this.pluginsManager = new He$1(this, s4), this.setFirstTrackId(i2.id), Wt() && w$2 && document.addEventListener("visibilitychange", this.handleVisibilityChange);
  }
  replaceTrackWith(t2) {
    return d$3(this, null, function* () {
      let i2 = this.nativeTrack;
      i2 == null || i2.stop();
      let r2 = !!this.audioLevelMonitor, s4 = yield st$1(t2);
      s4.enabled = this.enabled, o$2.d(this.TAG, "replaceTrack, Previous track stopped", i2, "newTrack", s4);
      let a2 = this.stream;
      yield a2.replaceSenderTrack(i2, this.processedTrack || s4), yield a2.replaceStreamTrack(i2, s4), this.nativeTrack = s4, r2 && this.initAudioLevelMonitor();
      try {
        yield this.pluginsManager.reprocessPlugins();
      } catch (c2) {
        this.eventBus.audioPluginFailed.publish(c2);
      }
    });
  }
  setEnabled(t2) {
    return d$3(this, null, function* () {
      t2 !== this.enabled && (t2 && B$2(this.nativeTrack) && (yield this.replaceTrackWith(this.settings)), yield D$3(n3.prototype, this, "setEnabled").call(this, t2), t2 && (this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId })), this.eventBus.localAudioEnabled.publish({ enabled: t2, track: this }));
    });
  }
  isPublishedTrackId(t2) {
    return this.publishedTrackId === t2;
  }
  setSettings(t2, i2 = false) {
    return d$3(this, null, function* () {
      let r2 = this.buildNewSettings(t2);
      if (B$2(this.nativeTrack)) {
        this.settings = r2;
        return;
      }
      yield this.handleDeviceChange(r2, i2), yield this.handleSettingsChange(r2), this.settings = r2;
    });
  }
  getPlugins() {
    return this.pluginsManager.getPlugins();
  }
  addPlugin(t2) {
    return d$3(this, null, function* () {
      return this.pluginsManager.addPlugin(t2);
    });
  }
  removePlugin(t2) {
    return d$3(this, null, function* () {
      return this.pluginsManager.removePlugin(t2);
    });
  }
  validatePlugin(t2) {
    return this.pluginsManager.validatePlugin(t2);
  }
  setProcessedTrack(t2) {
    return d$3(this, null, function* () {
      if (!t2) {
        this.processedTrack && (yield this.stream.replaceSenderTrack(this.processedTrack, this.nativeTrack)), this.processedTrack = void 0;
        return;
      }
      t2 !== this.processedTrack && (this.processedTrack ? yield this.stream.replaceSenderTrack(this.processedTrack, t2) : yield this.stream.replaceSenderTrack(this.nativeTrack, t2), this.processedTrack = t2);
    });
  }
  initAudioLevelMonitor() {
    this.audioLevelMonitor && this.destroyAudioLevelMonitor(), o$2.d(this.TAG, "Monitor Audio Level for", this, this.getMediaTrackSettings().deviceId), this.audioLevelMonitor = new ot$1(this, this.eventBus.trackAudioLevelUpdate, this.eventBus.localAudioSilence), this.audioLevelMonitor.start(), this.audioLevelMonitor.detectSilence();
  }
  destroyAudioLevelMonitor() {
    var t2;
    (t2 = this.audioLevelMonitor) == null || t2.stop(), this.audioLevelMonitor = void 0;
  }
  cleanup() {
    return d$3(this, null, function* () {
      var t2;
      D$3(n3.prototype, this, "cleanup").call(this), yield this.pluginsManager.cleanup(), yield this.pluginsManager.closeContext(), this.transceiver = void 0, (t2 = this.processedTrack) == null || t2.stop(), this.isPublished = false, this.destroyAudioLevelMonitor(), Wt() && w$2 && document.removeEventListener("visibilitychange", this.handleVisibilityChange);
    });
  }
  getTrackIDBeingSent() {
    return this.processedTrack ? this.processedTrack.id : this.nativeTrack.id;
  }
  getTrackBeingSent() {
    return this.processedTrack || this.nativeTrack;
  }
  buildNewSettings(t2) {
    let { volume: i2, codec: r2, maxBitrate: s4, deviceId: a2, advanced: c2 } = g$1(g$1({}, this.settings), t2);
    return new ue$1(i2, r2, s4, a2, c2);
  }
};
var re$1 = class n4 extends Te$1 {
  setEnabled(e2) {
    return d$3(this, null, function* () {
      e2 !== this.enabled && (yield D$3(n4.prototype, this, "setEnabled").call(this, e2), yield this.subscribeToAudio(e2));
    });
  }
};
var ke = class extends Z$2 {
  constructor(t2, i2, r2) {
    super(t2, i2, r2);
    this.type = "video";
    this.sinkCount = 0;
    if (i2.kind !== "video")
      throw new Error("Expected 'track' kind = 'video'");
  }
  setVideoHandler(t2) {
    this.videoHandler = t2;
  }
  hasSinks() {
    return this.sinkCount > 0;
  }
  getSinks() {
    return this.videoHandler.getVideoElements() || [];
  }
  attach(t2) {
    this.videoHandler.addVideoElement(t2);
  }
  detach(t2) {
    this.videoHandler.removeVideoElement(t2);
  }
  addSink(t2) {
    this.addSinkInternal(t2, this.nativeTrack);
  }
  removeSink(t2) {
    t2.srcObject !== null && (t2.srcObject = null, this.reduceSinkCount());
  }
  cleanup() {
    super.cleanup(), this.videoHandler.cleanup();
  }
  addSinkInternal(t2, i2) {
    let r2 = t2.srcObject;
    if (r2 !== null && r2 instanceof MediaStream) {
      let s4 = r2.getVideoTracks()[0];
      if ((s4 == null ? void 0 : s4.id) === i2.id) {
        if (!s4.muted && s4.readyState === "live")
          return;
        this.reduceSinkCount();
      } else
        this.reduceSinkCount();
    }
    t2.srcObject = new MediaStream([i2]), this.sinkCount++;
  }
  reduceSinkCount() {
    this.sinkCount > 0 && this.sinkCount--;
  }
};
var De$1 = { none: -1, low: 0, medium: 1, high: 2 }, Nr = 0.5, Fi = (n9, e2) => {
  let t2 = "high", i2 = e2.width > e2.height ? "width" : "height", r2 = [...n9].sort((a2, c2) => De$1[a2.layer] - De$1[c2.layer]), s4 = e2[i2] * ((window == null ? void 0 : window.devicePixelRatio) || 1);
  for (let a2 = 0; a2 < r2.length; a2++) {
    let { resolution: c2, layer: l2 } = r2[a2], h2 = c2[i2];
    if (s4 <= h2) {
      t2 = l2;
      break;
    } else {
      let u2 = r2[a2 + 1], m2 = u2 ? u2.resolution[i2] : Number.POSITIVE_INFINITY;
      if ((s4 - h2) / (m2 - h2) < Nr) {
        t2 = l2;
        break;
      }
    }
  }
  return t2;
};
var Zt$1 = class {
  constructor() {
    this.TAG = "[HMSIntersectionObserverWrapper]";
    this.listeners = /* @__PURE__ */ new WeakMap();
    this.observe = (e2, t2) => {
      var i2;
      this.createObserver(), this.unobserve(e2), (i2 = this.intersectionObserver) == null || i2.observe(e2), this.listeners.set(e2, t2);
    };
    this.unobserve = (e2) => {
      var t2;
      (t2 = this.intersectionObserver) == null || t2.unobserve(e2), this.listeners.delete(e2);
    };
    this.createObserver = () => {
      this.isSupported() && !this.intersectionObserver && (this.intersectionObserver = new IntersectionObserver(this.handleIntersection));
    };
    this.handleIntersection = (e2) => {
      var t2;
      for (let i2 of e2)
        (t2 = this.listeners.get(i2.target)) == null || t2(i2);
    };
    this.createObserver();
  }
  isSupported() {
    let e2 = w$2 && typeof window.IntersectionObserver != "undefined";
    return e2 || o$2.w(this.TAG, "IntersectionObserver is not supported, fallback will be used instead"), e2;
  }
}, Gi = new Zt$1();
var ei = class {
  constructor() {
    this.TAG = "[HMSResizeObserverWrapper]";
    this.listeners = /* @__PURE__ */ new WeakMap();
    this.observe = (e2, t2, i2 = { box: "border-box" }) => {
      var r2;
      this.createObserver(), this.unobserve(e2), (r2 = this.resizeObserver) == null || r2.observe(e2, i2), this.listeners.set(e2, t2);
    };
    this.unobserve = (e2) => {
      var t2;
      (t2 = this.resizeObserver) == null || t2.unobserve(e2), this.listeners.delete(e2);
    };
    this.createObserver = () => {
      this.isSupported() && !this.resizeObserver && (this.resizeObserver = new ResizeObserver(nt$1(this.handleResize, 300)));
    };
    this.handleResize = (e2) => {
      var t2;
      for (let i2 of e2)
        (t2 = this.listeners.get(i2.target)) == null || t2(i2);
    };
    this.createObserver();
  }
  isSupported() {
    let e2 = w$2 && typeof window.ResizeObserver != "undefined";
    return e2 || o$2.w(this.TAG, "Resize Observer is not supported"), e2;
  }
}, Ui = new ei();
var Me$1 = class {
  constructor(e2) {
    this.track = e2;
    this.TAG = "[VideoElementManager]";
    this.videoElements = /* @__PURE__ */ new Set();
    this.entries = /* @__PURE__ */ new WeakMap();
    this.handleIntersection = (e3) => d$3(this, null, function* () {
      let t2 = getComputedStyle(e3.target).visibility === "visible";
      this.track.enabled && (e3.isIntersecting && t2 || !document.contains(e3.target)) ? (o$2.d(this.TAG, "add sink intersection", `${this.track}`, this.id), this.entries.set(e3.target, e3.boundingClientRect), yield this.selectMaxLayer(), yield this.track.addSink(e3.target)) : (o$2.d(this.TAG, "remove sink intersection", `${this.track}`, this.id), yield this.track.removeSink(e3.target));
    });
    this.handleResize = (e3) => d$3(this, null, function* () {
      !this.track.enabled || !(this.track instanceof H$2) || (this.entries.set(e3.target, e3.contentRect), yield this.selectMaxLayer());
    });
    this.cleanup = () => {
      this.videoElements.forEach((e3) => {
        var t2, i2;
        e3.srcObject = null, (t2 = this.resizeObserver) == null || t2.unobserve(e3), (i2 = this.intersectionObserver) == null || i2.unobserve(e3);
      }), this.videoElements.clear(), this.resizeObserver = void 0, this.intersectionObserver = void 0;
    };
    this.init(), this.id = v4();
  }
  updateSinks(e2 = false) {
    for (let t2 of this.videoElements)
      this.track.enabled ? this.track.addSink(t2, e2) : this.track.removeSink(t2, e2);
  }
  addVideoElement(e2) {
    return d$3(this, null, function* () {
      var t2;
      this.videoElements.has(e2) || (this.init(), o$2.d(this.TAG, `Adding video element for ${this.track}`, this.id), this.videoElements.add(e2), this.videoElements.size >= 10 && o$2.w(this.TAG, `${this.track}`, `the track is added to ${this.videoElements.size} video elements, while this may be intentional, it's likely that there is a bug leading to unnecessary creation of video elements in the UI`), (t2 = this.intersectionObserver) != null && t2.isSupported() ? this.intersectionObserver.observe(e2, this.handleIntersection) : w$2 && (this.isElementInViewport(e2) ? this.track.addSink(e2) : this.track.removeSink(e2)), this.resizeObserver ? this.resizeObserver.observe(e2, this.handleResize) : this.track instanceof H$2 && (yield this.track.setPreferredLayer(this.track.getPreferredLayer())));
    });
  }
  removeVideoElement(e2) {
    var t2, i2;
    this.track.removeSink(e2), this.videoElements.delete(e2), this.entries.delete(e2), (t2 = this.resizeObserver) == null || t2.unobserve(e2), (i2 = this.intersectionObserver) == null || i2.unobserve(e2), o$2.d(this.TAG, `Removing video element for ${this.track}`);
  }
  getVideoElements() {
    return Array.from(this.videoElements);
  }
  init() {
    w$2 && (this.resizeObserver = Ui, this.intersectionObserver = Gi);
  }
  isElementInViewport(e2) {
    let t2 = e2.offsetTop, i2 = e2.offsetLeft, r2 = e2.offsetWidth, s4 = e2.offsetHeight, { hidden: a2 } = e2, { opacity: c2, display: l2 } = getComputedStyle(e2);
    for (; e2.offsetParent; )
      e2 = e2.offsetParent, t2 += e2.offsetTop, i2 += e2.offsetLeft;
    return t2 < window.pageYOffset + window.innerHeight && i2 < window.pageXOffset + window.innerWidth && t2 + s4 > window.pageYOffset && i2 + r2 > window.pageXOffset && !a2 && (c2 !== "" ? parseFloat(c2) > 0 : true) && l2 !== "none";
  }
  selectMaxLayer() {
    return d$3(this, null, function* () {
      if (!(this.track instanceof H$2) || this.videoElements.size === 0)
        return;
      let e2;
      for (let t2 of this.videoElements) {
        let i2 = this.entries.get(t2);
        if (!i2)
          continue;
        let { width: r2, height: s4 } = i2;
        if (r2 === 0 || s4 === 0)
          continue;
        let a2 = Fi(this.track.getSimulcastDefinitions(), { width: r2, height: s4 });
        e2 ? e2 = De$1[a2] > De$1[e2] ? a2 : e2 : e2 = a2;
      }
      e2 && (o$2.d(this.TAG, `selecting max layer ${e2} for the track`, `${this.track}`), yield this.track.setPreferredLayer(e2));
    });
  }
};
var ti = ((t2) => (t2.TRANSFORM = "TRANSFORM", t2.ANALYZE = "ANALYZE", t2))(ti || {}), ii = ((t2) => (t2["2D"] = "2d", t2.WEBGL = "webgl", t2.WEBGL2 = "webgl2", t2))(ii || {});
var Oe$1 = class {
  constructor() {
    this.total = 0;
    this.count = 0;
  }
  add(e2) {
    this.count++, this.total += e2;
  }
  getAvg() {
    return Math.floor(this.total / this.count);
  }
  reset() {
    this.total = 0, this.count = 0;
  }
};
var dt$1 = class {
  constructor(e2) {
    this.eventBus = e2;
    this.TAG = "[VideoPluginsAnalytics]";
    this.initTime = {}, this.preProcessingAvgs = new Oe$1(), this.addedTimestamps = {}, this.processingAvgs = {}, this.pluginAdded = {}, this.pluginInputFrameRate = {}, this.pluginFrameRate = {};
  }
  added(e2, t2, i2) {
    this.pluginAdded[e2] = true, this.addedTimestamps[e2] = Date.now(), this.initTime[e2] = 0, this.processingAvgs[e2] = new Oe$1(), this.pluginInputFrameRate[e2] = t2, this.pluginFrameRate[e2] = i2 || t2;
  }
  removed(e2) {
    var t2;
    if (this.pluginAdded[e2]) {
      let i2 = { pluginName: e2, duration: Math.floor((Date.now() - this.addedTimestamps[e2]) / 1e3), loadTime: this.initTime[e2], avgPreProcessingTime: this.preProcessingAvgs.getAvg(), avgProcessingTime: (t2 = this.processingAvgs[e2]) == null ? void 0 : t2.getAvg(), inputFrameRate: this.pluginInputFrameRate[e2], pluginFrameRate: this.pluginFrameRate[e2] };
      this.eventBus.analytics.publish(q$1.stats(i2)), this.clean(e2);
    }
  }
  failure(e2, t2) {
    this.pluginAdded[e2] && (this.eventBus.analytics.publish(q$1.failure(e2, t2)), this.clean(e2));
  }
  initWithTime(e2, t2) {
    return d$3(this, null, function* () {
      if (this.initTime[e2]) {
        o$2.i(this.TAG, `Plugin Already loaded ${e2}, time it took: ${this.initTime[e2]}`);
        return;
      }
      let i2;
      try {
        i2 = yield this.timeInMs(t2), o$2.i(this.TAG, `Time taken for Plugin ${e2} initialization : ${i2}`);
      } catch (r2) {
        let s4 = p$3.MediaPluginErrors.InitFailed("VIDEO_PLUGINS", `failed during initialization of plugin${r2.message || r2}`);
        throw o$2.e(this.TAG, s4), this.failure(e2, s4), s4;
      }
      i2 && (this.initTime[e2] = i2);
    });
  }
  preProcessWithTime(e2) {
    return d$3(this, null, function* () {
      let t2 = yield this.timeInMs(e2);
      this.preProcessingAvgs.add(t2);
    });
  }
  processWithTime(e2, t2) {
    return d$3(this, null, function* () {
      var r2;
      let i2;
      try {
        i2 = yield this.timeInMs(t2);
      } catch (s4) {
        let a2 = p$3.MediaPluginErrors.ProcessingFailed("VIDEO_PLUGINS", `Failed during processing of plugin${s4.message || s4}`);
        throw o$2.e(this.TAG, a2), this.failure(e2, a2), a2;
      }
      i2 && ((r2 = this.processingAvgs[e2]) == null || r2.add(i2));
    });
  }
  timeInMs(e2) {
    return d$3(this, null, function* () {
      let t2 = Date.now();
      return yield e2(), Math.floor(Date.now() - t2);
    });
  }
  clean(e2) {
    delete this.addedTimestamps[e2], delete this.initTime[e2], delete this.processingAvgs[e2], delete this.pluginAdded[e2], delete this.pluginInputFrameRate[e2], delete this.pluginFrameRate[e2];
  }
};
var Vi = 24, Fr = 320, Gr = 240, Ne$1 = class {
  constructor(e2, t2) {
    this.TAG = "[VideoPluginsManager]";
    this.pluginsLoopRunning = false;
    this.pluginsLoopState = "paused";
    this.pluginAddInProgress = false;
    this.hmsTrack = e2, this.pluginsMap = /* @__PURE__ */ new Map(), this.pluginNumFramesToSkip = {}, this.pluginNumFramesSkipped = {}, this.analytics = new dt$1(t2), this.canvases = new Array();
  }
  getPlugins() {
    return Array.from(this.pluginsMap.keys());
  }
  addPlugin(e2, t2) {
    return d$3(this, null, function* () {
      var i2;
      if (this.pluginAddInProgress) {
        let r2 = (i2 = e2.getName) == null ? void 0 : i2.call(e2);
        if (!r2 || r2 === "") {
          o$2.w("no name provided by the plugin");
          return;
        }
        let s4 = p$3.MediaPluginErrors.AddAlreadyInProgress("VIDEO_PLUGINS", "Add Plugin is already in Progress");
        throw this.analytics.failure(r2, s4), o$2.w("can't add another plugin when previous add is in progress"), s4;
      }
      this.pluginAddInProgress = true;
      try {
        yield this.addPluginInternal(e2, t2);
      } finally {
        this.pluginAddInProgress = false;
      }
    });
  }
  addPluginInternal(e2, t2) {
    return d$3(this, null, function* () {
      var a2, c2;
      let i2 = (a2 = e2.getName) == null ? void 0 : a2.call(e2);
      if (!i2 || i2 === "") {
        o$2.w("no name provided by the plugin");
        return;
      }
      if (this.pluginsMap.has(i2)) {
        o$2.w(this.TAG, `plugin - ${e2.getName()} already added.`);
        return;
      }
      let r2 = this.hmsTrack.getMediaTrackSettings().frameRate || Vi, s4 = 0;
      t2 && t2 > 0 ? (o$2.i(this.TAG, `adding plugin ${e2.getName()} with framerate ${t2}`), t2 < r2 && (s4 = Math.ceil(r2 / t2) - 1), this.analytics.added(i2, r2, t2)) : (o$2.i(this.TAG, `adding plugin ${e2.getName()}`), this.analytics.added(i2, r2)), o$2.i(this.TAG, "numFrames to skip processing", s4), this.pluginNumFramesToSkip[i2] = s4, this.pluginNumFramesSkipped[i2] = s4, this.validateAndThrow(i2, e2);
      try {
        if (yield this.analytics.initWithTime(i2, () => d$3(this, null, function* () {
          return yield e2.init();
        })), this.pluginsMap.set(i2, e2), this.pluginsMap.size + 1 > this.canvases.length)
          for (let l2 = this.canvases.length; l2 <= this.pluginsMap.size; l2++)
            this.canvases[l2] = document.createElement("canvas");
        yield this.startPluginsLoop((c2 = e2.getContextType) == null ? void 0 : c2.call(e2));
      } catch (l2) {
        throw o$2.e(this.TAG, "failed to add plugin", l2), yield this.removePlugin(e2), l2;
      }
    });
  }
  validatePlugin(e2) {
    return e2.checkSupport();
  }
  validateAndThrow(e2, t2) {
    let i2 = this.validatePlugin(t2);
    if (i2.isSupported)
      o$2.i(this.TAG, `plugin is supported,- ${t2.getName()}`);
    else {
      let r2;
      switch (i2.errType) {
        case "PLATFORM_NOT_SUPPORTED":
          throw r2 = p$3.MediaPluginErrors.PlatformNotSupported("VIDEO_PLUGINS", "platform not supported, see docs"), this.analytics.failure(e2, r2), r2;
        case "DEVICE_NOT_SUPPORTED":
          throw r2 = p$3.MediaPluginErrors.DeviceNotSupported("VIDEO_PLUGINS", "video device not supported, see docs"), this.analytics.failure(e2, r2), r2;
      }
    }
  }
  removePlugin(e2) {
    return d$3(this, null, function* () {
      let t2 = e2.getName();
      if (!this.pluginsMap.get(t2)) {
        o$2.w(this.TAG, `plugin - ${t2} not found to remove.`);
        return;
      }
      o$2.i(this.TAG, `removing plugin ${t2}`), this.removePluginEntry(t2), this.pluginsMap.size === 0 && (o$2.i(this.TAG, "No plugins left, stopping plugins loop"), yield this.stopPluginsLoop()), e2.stop(), this.analytics.removed(t2);
    });
  }
  removePluginEntry(e2) {
    this.pluginsMap.delete(e2), this.pluginNumFramesToSkip[e2] && delete this.pluginNumFramesToSkip[e2], this.pluginNumFramesSkipped[e2] && delete this.pluginNumFramesSkipped[e2];
  }
  waitForRestart() {
    return d$3(this, null, function* () {
      if (!(!this.pluginsLoopRunning || this.pluginsLoopState === "running"))
        for (; this.pluginsLoopState === "paused"; )
          yield R$2(100);
    });
  }
  cleanup() {
    return d$3(this, null, function* () {
      var e2;
      for (let t2 of this.pluginsMap.values())
        yield this.removePlugin(t2);
      (e2 = this.outputTrack) == null || e2.stop();
    });
  }
  initElementsAndStream(e2) {
    this.inputCanvas || (this.inputCanvas = document.createElement("canvas")), this.outputCanvas = document.createElement("canvas"), this.inputVideo || (this.inputVideo = document.createElement("video")), this.inputCanvas.getContext("2d"), this.outputCanvas.getContext(e2 || "2d");
    let t2 = this.outputCanvas.captureStream();
    this.outputTrack = t2.getVideoTracks()[0];
  }
  startPluginsLoop(e2) {
    return d$3(this, null, function* () {
      if (!this.pluginsLoopRunning) {
        this.initElementsAndStream(e2), this.pluginsLoopRunning = true;
        try {
          yield this.hmsTrack.setProcessedTrack(this.outputTrack);
        } catch (t2) {
          throw this.pluginsLoopRunning = false, o$2.e(this.TAG, "error in setting processed track", t2), t2;
        }
        this.pluginsLoop().then(() => {
          o$2.d(this.TAG, "processLoop stopped");
        });
      }
    });
  }
  stopPluginsLoop() {
    return d$3(this, null, function* () {
      var e2;
      this.pluginsLoopRunning = false, yield this.hmsTrack.setProcessedTrack(void 0), this.resetCanvases(), (e2 = this.outputTrack) == null || e2.stop(), this.inputVideo && (this.inputVideo.srcObject = null, this.inputVideo = void 0);
    });
  }
  pluginsLoop() {
    return d$3(this, null, function* () {
      for (; this.pluginsLoopRunning; ) {
        let e2 = this.hmsTrack.getMediaTrackSettings().frameRate || Vi, t2 = Math.floor(1e3 / e2);
        if (!this.hmsTrack.enabled || this.hmsTrack.nativeTrack.readyState === "ended") {
          this.pluginsLoopState === "running" && this.resetCanvases(), this.pluginsLoopState = "paused", yield R$2(t2);
          continue;
        }
        let i2 = 0;
        try {
          yield this.analytics.preProcessWithTime(() => d$3(this, null, function* () {
            return yield this.doPreProcessing();
          }));
          let r2 = Date.now();
          yield this.processFramesThroughPlugins(), i2 = Math.floor(Date.now() - r2), i2 > t2 && (i2 = t2);
        } catch (r2) {
          o$2.e(this.TAG, "error in plugins loop", r2);
        }
        this.pluginsLoopState = "running", yield R$2(t2 - i2);
      }
    });
  }
  doPreProcessing() {
    return d$3(this, null, function* () {
      yield this.addTrackToVideo(), yield this.updateInputCanvas();
    });
  }
  processFramesThroughPlugins() {
    return d$3(this, null, function* () {
      this.canvases[0] = this.inputCanvas;
      let e2 = 0;
      for (let t2 of this.pluginsMap.values()) {
        let i2 = t2.getName();
        if (t2) {
          try {
            let r2 = this.checkIfSkipRequired(i2);
            if (t2.getPluginType() === "TRANSFORM") {
              let s4 = (a2, c2) => d$3(this, null, function* () {
                try {
                  yield t2.processVideoFrame(a2, c2, r2);
                } catch (l2) {
                  o$2.e(this.TAG, `error in processing plugin ${i2}`, l2);
                }
              });
              if (r2)
                e2 === this.pluginsMap.size - 1 ? yield s4(this.canvases[e2], this.outputCanvas) : yield s4(this.canvases[e2], this.canvases[e2 + 1]);
              else {
                let a2 = this.canvases[e2], c2 = this.canvases[e2 + 1];
                e2 === this.pluginsMap.size - 1 ? yield this.analytics.processWithTime(i2, () => d$3(this, null, function* () {
                  return s4(a2, this.outputCanvas);
                })) : yield this.analytics.processWithTime(i2, () => d$3(this, null, function* () {
                  return s4(a2, c2);
                }));
              }
            } else
              t2.getPluginType() === "ANALYZE" && !r2 && (yield this.analytics.processWithTime(i2, () => d$3(this, null, function* () {
                return yield t2.processVideoFrame(this.inputCanvas);
              })));
          } catch (r2) {
            o$2.e(this.TAG, `error in processing plugin ${i2}`, r2), yield this.removePlugin(t2);
          }
          e2++;
        }
      }
    });
  }
  addTrackToVideo() {
    return d$3(this, null, function* () {
      var t2;
      if (!this.inputVideo)
        return;
      let e2 = this.inputVideo.srcObject;
      e2 !== null && e2 instanceof MediaStream && ((t2 = e2.getVideoTracks()[0]) == null ? void 0 : t2.id) === this.hmsTrack.nativeTrack.id || (this.inputVideo.pause(), this.inputVideo.srcObject = new MediaStream([this.hmsTrack.nativeTrack]), this.inputVideo.muted = true, this.inputVideo.playsInline = true, yield this.inputVideo.play());
    });
  }
  updateInputCanvas() {
    return d$3(this, null, function* () {
      if (!this.inputCanvas || !this.inputVideo)
        return;
      let { width: e2 = Fr, height: t2 = Gr } = this.hmsTrack.getMediaTrackSettings();
      this.inputCanvas.height !== t2 && (this.inputCanvas.height = t2), this.inputCanvas.width !== e2 && (this.inputCanvas.width = e2), this.inputCanvas.getContext("2d").drawImage(this.inputVideo, 0, 0, e2, t2);
    });
  }
  resetCanvases() {
    if (!this.outputCanvas || !this.inputCanvas)
      return;
    let e2 = this.inputCanvas.getContext("2d");
    e2 && (e2.fillStyle = "rgb(0, 0, 0)", e2.fillRect(0, 0, this.outputCanvas.width, this.outputCanvas.height)), this.canvases = [];
  }
  checkIfSkipRequired(e2) {
    let t2 = false;
    return this.pluginNumFramesSkipped[e2] < this.pluginNumFramesToSkip[e2] ? (this.pluginNumFramesSkipped[e2]++, t2 = true) : (t2 = false, this.pluginNumFramesSkipped[e2] = 0), t2;
  }
};
function Bi(n9, e2) {
  return function(i2) {
    return i2 in n9 && n9[i2] !== e2[i2];
  };
}
var F$2 = class n5 extends ke {
  constructor(t2, i2, r2, s4, a2 = new N$3().build()) {
    super(t2, i2, r2);
    this.eventBus = s4;
    this._layerDefinitions = [];
    this.TAG = "[HMSLocalVideoTrack]";
    this.isCurrentTab = false;
    this.isPublished = false;
    this.buildNewSettings = (t3) => {
      let { width: i3, height: r3, codec: s5, maxFramerate: a3, maxBitrate: c2, deviceId: l2, advanced: h2, facingMode: u2 } = g$1(g$1({}, this.settings), t3);
      return new he$1(i3, r3, s5, a3, l2, h2, c2, u2);
    };
    this.handleSettingsChange = (t3) => d$3(this, null, function* () {
      let i3 = this.stream, r3 = Bi(t3, this.settings);
      if (r3("maxBitrate") && t3.maxBitrate && (yield i3.setMaxBitrateAndFramerate(this)), r3("width") || r3("height") || r3("advanced")) {
        let s5 = yield this.replaceTrackWith(t3);
        yield this.replaceSender(s5, this.enabled), this.nativeTrack = s5, this.videoHandler.updateSinks();
      }
    });
    this.handleDeviceChange = (t3, i3 = false) => d$3(this, null, function* () {
      if (Bi(t3, this.settings)("deviceId") && this.source === "regular") {
        if (this.enabled) {
          delete t3.facingMode;
          let s5 = yield this.replaceTrackWith(t3);
          yield this.replaceSender(s5, this.enabled), this.nativeTrack = s5, this.videoHandler.updateSinks();
        }
        i3 || O$2.updateSelection("videoInput", { deviceId: t3.deviceId, groupId: this.nativeTrack.getSettings().groupId });
      }
    });
    this.removeOrReplaceProcessedTrack = (t3) => d$3(this, null, function* () {
      t3 ? t3 !== this.processedTrack && (this.processedTrack ? yield this.stream.replaceSenderTrack(this.processedTrack, t3) : yield this.stream.replaceSenderTrack(this.nativeTrack, t3), this.processedTrack = t3) : (this.processedTrack && (yield this.stream.replaceSenderTrack(this.processedTrack, this.nativeTrack)), this.processedTrack = void 0);
    });
    t2.tracks.push(this), this.setVideoHandler(new Me$1(this)), this.settings = a2, a2.deviceId !== i2.getSettings().deviceId && i2.enabled && (this.settings = this.buildNewSettings({ deviceId: i2.getSettings().deviceId })), this.pluginsManager = new Ne$1(this, s4), this.setFirstTrackId(this.trackId);
  }
  setSimulcastDefinitons(t2) {
    this._layerDefinitions = t2;
  }
  getSimulcastDefinitions() {
    return this._layerDefinitions;
  }
  setEnabled(t2) {
    return d$3(this, null, function* () {
      var i2;
      if (t2 !== this.enabled) {
        if (D$3(n5.prototype, this, "setEnabled").call(this, t2), this.source === "regular") {
          let r2;
          t2 ? r2 = yield this.replaceTrackWith(this.settings) : r2 = yield this.replaceTrackWithBlank(), yield this.replaceSender(r2, t2), (i2 = this.nativeTrack) == null || i2.stop(), this.nativeTrack = r2, t2 && (yield this.pluginsManager.waitForRestart(), this.settings = this.buildNewSettings({ deviceId: r2.getSettings().deviceId })), this.videoHandler.updateSinks();
        }
        this.eventBus.localVideoEnabled.publish({ enabled: t2, track: this });
      }
    });
  }
  isPublishedTrackId(t2) {
    return this.publishedTrackId === t2;
  }
  addSink(t2) {
    this.addSinkInternal(t2, this.processedTrack || this.nativeTrack);
  }
  setSettings(t2, i2 = false) {
    return d$3(this, null, function* () {
      let r2 = this.buildNewSettings(t2);
      if (yield this.handleDeviceChange(r2, i2), !this.enabled || B$2(this.nativeTrack)) {
        this.settings = r2;
        return;
      }
      yield this.handleSettingsChange(r2), this.settings = r2;
    });
  }
  getPlugins() {
    return this.pluginsManager.getPlugins();
  }
  addPlugin(t2, i2) {
    return d$3(this, null, function* () {
      return this.pluginsManager.addPlugin(t2, i2);
    });
  }
  removePlugin(t2) {
    return d$3(this, null, function* () {
      return this.pluginsManager.removePlugin(t2);
    });
  }
  validatePlugin(t2) {
    return this.pluginsManager.validatePlugin(t2);
  }
  cleanup() {
    return d$3(this, null, function* () {
      var t2;
      D$3(n5.prototype, this, "cleanup").call(this), this.transceiver = void 0, yield this.pluginsManager.cleanup(), (t2 = this.processedTrack) == null || t2.stop(), this.isPublished = false;
    });
  }
  cropTo(t2) {
    return d$3(this, null, function* () {
      if (t2 && this.source === "screen")
        try {
          this.nativeTrack.cropTo && (yield this.nativeTrack.cropTo(t2));
        } catch (i2) {
          throw o$2.e(this.TAG, "failed to crop screenshare capture - ", i2), p$3.TracksErrors.GenericTrack("TRACK", "failed to crop screenshare capture");
        }
    });
  }
  getCaptureHandle() {
    if (this.nativeTrack.getCaptureHandle)
      return this.nativeTrack.getCaptureHandle();
  }
  setProcessedTrack(t2) {
    return d$3(this, null, function* () {
      if (!this.nativeTrack.enabled) {
        this.processedTrack = t2;
        return;
      }
      yield this.removeOrReplaceProcessedTrack(t2), this.videoHandler.updateSinks();
    });
  }
  getTrackIDBeingSent() {
    return this.getTrackBeingSent().id;
  }
  getTrackBeingSent() {
    return this.enabled ? this.processedTrack || this.nativeTrack : this.nativeTrack;
  }
  switchCamera() {
    return d$3(this, null, function* () {
      var s4;
      let t2 = this.getMediaTrackSettings().facingMode;
      if (!t2 || this.source !== "regular") {
        o$2.d(this.TAG, "facingMode not supported");
        return;
      }
      let i2 = t2 === "environment" ? "user" : "environment";
      (s4 = this.nativeTrack) == null || s4.stop();
      let r2 = yield this.replaceTrackWith(this.buildNewSettings({ facingMode: i2, deviceId: void 0 }));
      yield this.replaceSender(r2, this.enabled), this.nativeTrack = r2, this.videoHandler.updateSinks(), this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId, facingMode: i2 }), O$2.updateSelection("videoInput", { deviceId: this.settings.deviceId, groupId: this.nativeTrack.getSettings().groupId });
    });
  }
  replaceTrackWith(t2) {
    return d$3(this, null, function* () {
      let i2 = this.nativeTrack;
      i2 == null || i2.stop();
      let r2 = yield at$1(t2);
      return o$2.d(this.TAG, "replaceTrack, Previous track stopped", i2, "newTrack", r2), this.settings.deviceId === "default" && (this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId })), r2;
    });
  }
  replaceTrackWithBlank() {
    return d$3(this, null, function* () {
      let t2 = this.nativeTrack, i2 = j$2.getEmptyVideoTrack(t2);
      return t2 == null || t2.stop(), o$2.d(this.TAG, "replaceTrackWithBlank, Previous track stopped", t2, "newTrack", i2), i2;
    });
  }
  replaceSender(t2, i2) {
    return d$3(this, null, function* () {
      let r2 = this.stream;
      i2 ? yield r2.replaceSenderTrack(this.nativeTrack, this.processedTrack || t2) : yield r2.replaceSenderTrack(this.processedTrack || this.nativeTrack, t2), yield r2.replaceStreamTrack(this.nativeTrack, t2);
    });
  }
};
var ye$1 = "renegotiation-callback-id", lt = "ion-sfu";
var Pe$1 = "SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID";
var $i = "https://event.100ms.live/v2/client/report", Wi = "https://event-nonprod.100ms.live/v2/client/report";
var L$2 = { DEVICE_CHANGE: "device-change", LOCAL_AUDIO_ENABLED: "local-audio-enabled", LOCAL_VIDEO_ENABLED: "local-video-enabled", STATS_UPDATE: "stats-update", RTC_STATS_UPDATE: "rtc-stats-update", TRACK_DEGRADED: "track-degraded", TRACK_RESTORED: "track-restored", TRACK_AUDIO_LEVEL_UPDATE: "track-audio-level-update", LOCAL_AUDIO_SILENCE: "local-audio-silence", ANALYTICS: "analytics", AUDIO_PLUGIN_FAILED: "audio-plugin-failed", POLICY_CHANGE: "policy-change", LOCAL_ROLE_UPDATE: "local-role-update", AUDIO_TRACK_UPDATE: "audio-track-update", AUDIO_TRACK_ADDED: "audio-track-added", AUDIO_TRACK_REMOVED: "audio-track-removed", AUTOPLAY_ERROR: "autoplay-error", LEAVE: "leave" };
var H$2 = class n6 extends ke {
  constructor(t2, i2, r2) {
    super(t2, i2, r2);
    this._degraded = false;
    this._degradedAt = null;
    this._layerDefinitions = [];
    this.history = new ri();
    this.preferredLayer = "high";
    this.setVideoHandler(new Me$1(this));
  }
  setTrackId(t2) {
    this.bizTrackId = t2;
  }
  get trackId() {
    return this.bizTrackId || super.trackId;
  }
  get degraded() {
    return this._degraded;
  }
  get degradedAt() {
    return this._degradedAt;
  }
  setEnabled(t2) {
    return d$3(this, null, function* () {
      t2 !== this.enabled && (D$3(n6.prototype, this, "setEnabled").call(this, t2), this.videoHandler.updateSinks(true));
    });
  }
  setPreferredLayer(t2) {
    return d$3(this, null, function* () {
      if (t2 === "none") {
        o$2.w(`layer ${"none"} will be ignored`);
        return;
      }
      if (this.preferredLayer = t2, !!this.shouldSendVideoLayer(t2, "preferLayer")) {
        if (!this.hasSinks()) {
          o$2.d(`[Remote Track] ${this.logIdentifier}
        streamId=${this.stream.id} 
        trackId=${this.trackId}
        saving ${t2}, source=${this.source}
        Track does not have any sink`);
          return;
        }
        yield this.requestLayer(t2, "preferLayer"), this.pushInHistory(`uiPreferLayer-${t2}`);
      }
    });
  }
  getSimulcastLayer() {
    return this.stream.getSimulcastLayer();
  }
  getLayer() {
    return this.stream.getVideoLayer();
  }
  getPreferredLayer() {
    return this.preferredLayer;
  }
  replaceTrack(t2) {
    this.nativeTrack = t2.nativeTrack, t2.transceiver && (this.transceiver = t2.transceiver, this.stream.updateId(t2.stream.id)), this.videoHandler.updateSinks();
  }
  addSink(t2, i2 = true) {
    return d$3(this, null, function* () {
      B$2(this.nativeTrack) ? yield this.requestLayer(this.preferredLayer, "addSink") : (D$3(n6.prototype, this, "addSink").call(this, t2), i2 && (yield this.updateLayer("addSink"))), this.pushInHistory("uiSetLayer-high");
    });
  }
  removeSink(t2, i2 = true) {
    return d$3(this, null, function* () {
      D$3(n6.prototype, this, "removeSink").call(this, t2), i2 && (yield this.updateLayer("removeSink")), this._degraded = false, this.pushInHistory("uiSetLayer-none");
    });
  }
  getSimulcastDefinitions() {
    return [...this._layerDefinitions];
  }
  setSimulcastDefinitons(t2) {
    this._layerDefinitions = t2;
  }
  setLayerFromServer(t2) {
    this._degraded = this.enabled && (t2.publisher_degraded || t2.subscriber_degraded) && t2.current_layer === "none", this._degradedAt = this._degraded ? new Date() : this._degradedAt;
    let i2 = t2.current_layer;
    return o$2.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id} 
      trackId=${this.trackId}
      layer update from sfu
      currLayer=${t2.current_layer}
      preferredLayer=${t2.expected_layer}
      sub_degraded=${t2.subscriber_degraded}
      pub_degraded=${t2.publisher_degraded}
      isDegraded=${this._degraded}`), this.stream.setVideoLayerLocally(i2, this.logIdentifier, "setLayerFromServer"), this.pushInHistory(`sfuLayerUpdate-${i2}`), this._degraded;
  }
  updateLayer(t2) {
    return d$3(this, null, function* () {
      let i2 = this.degraded || !this.enabled || !this.hasSinks() ? "none" : this.preferredLayer;
      this.shouldSendVideoLayer(i2, t2) && (yield this.requestLayer(i2, t2));
    });
  }
  pushInHistory(t2) {
  }
  requestLayer(t2, i2) {
    return d$3(this, null, function* () {
      try {
        let r2 = yield this.stream.setVideoLayer(t2, this.trackId, this.logIdentifier, i2);
        return o$2.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id}
      trackId=${this.trackId}
      Requested layer ${t2}, source=${i2}`), r2;
      } catch (r2) {
        throw o$2.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id}
      trackId=${this.trackId}
      Failed to set layer ${t2}, source=${i2}
      error=${r2.message}`), r2;
      }
    });
  }
  shouldSendVideoLayer(t2, i2) {
    let r2 = this.getLayer();
    return this.degraded && t2 === "none" ? true : r2 === t2 ? (o$2.d(`[Remote Track] ${this.logIdentifier}`, `Not sending update, already on layer ${t2}, source=${i2}`), false) : true;
  }
}, ri = class {
  constructor() {
    this.history = [];
  }
  push(e2) {
    e2.time = new Date().toISOString().split("T")[1], this.history.push(e2);
  }
};
var se = class extends de {
  constructor() {
    super(...arguments);
    this.TAG = "[HMSLocalStream]";
    this.connection = null;
  }
  setConnection(t2) {
    this.connection = t2;
  }
  addTransceiver(t2, i2) {
    let r2 = this.connection.addTransceiver(t2.getTrackBeingSent(), { streams: [this.nativeStream], direction: "sendonly", sendEncodings: this.getTrackEncodings(t2, i2) });
    return this.setPreferredCodec(r2, t2.nativeTrack.kind), t2.transceiver = r2, r2;
  }
  setMaxBitrateAndFramerate(t2) {
    return d$3(this, null, function* () {
      var i2;
      yield (i2 = this.connection) == null ? void 0 : i2.setMaxBitrateAndFramerate(t2);
    });
  }
  setPreferredCodec(t2, i2) {
  }
  replaceStreamTrack(t2, i2) {
    this.nativeStream.addTrack(i2), this.nativeStream.removeTrack(t2), o$2.d(this.TAG, "Native stream tracks after replace", this.nativeStream.getAudioTracks().map(X$2), `prev Track - ${X$2(t2)}`, `new Track - ${X$2(i2)}`);
  }
  replaceSenderTrack(t2, i2) {
    return d$3(this, null, function* () {
      if (!this.connection || this.connection.connectionState === "closed") {
        o$2.d(this.TAG, "publish connection is not initialised or closed");
        return;
      }
      let r2 = this.connection.getSenders().find((s4) => s4.track && s4.track.id === t2.id);
      if (r2 === void 0) {
        o$2.w(this.TAG, `No sender found for trackId=${t2.id}`);
        return;
      }
      yield r2.replaceTrack(i2);
    });
  }
  removeSender(t2) {
    var s4, a2;
    if (!this.connection || this.connection.connectionState === "closed") {
      o$2.d(this.TAG, "publish connection is not initialised or closed");
      return;
    }
    let i2 = (s4 = t2.transceiver) == null ? void 0 : s4.sender;
    if (!i2) {
      o$2.w(this.TAG, `No sender found for trackId=${t2.trackId}`);
      return;
    }
    (a2 = this.connection) == null || a2.removeTrack(i2);
    let r2 = this.tracks.indexOf(t2);
    r2 !== -1 ? this.tracks.splice(r2, 1) : o$2.w(this.TAG, `Cannot find ${t2.trackId} in locally stored tracks`);
  }
  getTrackEncodings(t2, i2) {
    let r2 = [];
    if (t2 instanceof F$2)
      if (i2.length > 0)
        o$2.d(this.TAG, "Simulcast enabled with layers", i2), r2.push(...i2);
      else {
        let s4 = { active: this.nativeStream.active };
        t2.settings.maxBitrate && !ce$1 && (s4.maxBitrate = t2.settings.maxBitrate), r2.push(s4);
      }
    return r2;
  }
};
var K$2 = class extends de {
  constructor(t2, i2) {
    super(t2);
    this.audio = true;
    this.video = "none";
    this.connection = i2;
  }
  setAudio(t2, i2, r2) {
    return d$3(this, null, function* () {
      this.audio !== t2 && (this.audio = t2, o$2.d(`[Remote stream] ${r2 || ""} 
    streamId=${this.id}
    trackId=${i2}
    subscribing audio - ${this.audio}`), yield this.connection.sendOverApiDataChannelWithResponse({ params: { subscribed: this.audio, track_id: i2 }, method: "prefer-audio-track-state" }));
    });
  }
  setVideoLayerLocally(t2, i2, r2) {
    this.video = t2, o$2.d(`[Remote stream] ${i2}
    streamId=${this.id}
    source: ${r2}
    Setting layer field to=${t2}`);
  }
  setVideoLayer(t2, i2, r2, s4) {
    return o$2.d(`[Remote stream] ${r2} 
      streamId=${this.id}
      trackId=${i2} 
      source: ${s4} request ${t2} layer`), this.setVideoLayerLocally(t2, r2, s4), this.connection.sendOverApiDataChannelWithResponse({ params: { max_spatial_layer: this.video, track_id: i2 }, method: "prefer-video-track-state" });
  }
  getSimulcastLayer() {
    return this.video;
  }
  getVideoLayer() {
    return this.video;
  }
  isAudioSubscribed() {
    return this.audio;
  }
};
var Ki = "[VALIDATIONS]";
function Q$2(n9) {
  return n9 != null;
}
var si = () => {
  if (!Q$2(RTCPeerConnection)) {
    let n9 = p$3.GenericErrors.MissingRTCPeerConnection();
    throw o$2.e(Ki, n9), n9;
  }
}, ai = () => {
  if (!Q$2(navigator.mediaDevices)) {
    let n9 = p$3.GenericErrors.MissingMediaDevices();
    throw o$2.e(Ki, n9), n9;
  }
};
var qi = (n9, e2, t2, i2) => d$3(void 0, null, function* () {
  var a2;
  let r2, s4 = {};
  if ((a2 = e2.transceiver) != null && a2.sender.track) {
    try {
      r2 = yield e2.transceiver.sender.getStats();
      let c2 = {}, l2 = {}, h2 = {};
      r2 == null || r2.forEach((u2) => {
        switch (u2.type) {
          case "outbound-rtp":
            l2[u2.id] = u2;
            break;
          case "remote-inbound-rtp":
            h2[u2.ssrc] = u2;
            break;
          case "codec":
            c2[u2.id] = u2.mimeType;
            break;
          default:
            break;
        }
      }), Object.keys(g$1({}, l2)).forEach((u2) => {
        var G2;
        let m2 = (G2 = l2[u2]) == null ? void 0 : G2.codecId, S2 = m2 ? c2[m2] : void 0, T2;
        S2 && (T2 = S2.substring(S2.indexOf("/") + 1));
        let y2 = l2[u2], b2 = h2[y2.ssrc];
        s4[u2] = M$1(g$1({}, y2), { bitrate: ci("bytesSent", y2, i2 == null ? void 0 : i2[u2]), packetsLost: b2 == null ? void 0 : b2.packetsLost, jitter: b2 == null ? void 0 : b2.jitter, roundTripTime: b2 == null ? void 0 : b2.roundTripTime, totalRoundTripTime: b2 == null ? void 0 : b2.totalRoundTripTime, peerName: t2, peerID: e2.peerId, enabled: e2.enabled, codec: T2 });
      });
    } catch (c2) {
      n9.analytics.publish(E$3.rtcStatsFailed(p$3.WebrtcErrors.StatsFailed("TRACK", `Error getting local track stats ${e2.trackId} - ${c2.message}`))), o$2.w("[HMSWebrtcStats]", "Error in getting local track stats", e2, c2, c2.name);
    }
    return s4;
  }
}), ji = (n9, e2, t2, i2) => d$3(void 0, null, function* () {
  var l2;
  let r2;
  try {
    r2 = yield (l2 = e2.transceiver) == null ? void 0 : l2.receiver.getStats();
  } catch (h2) {
    n9.analytics.publish(E$3.rtcStatsFailed(p$3.WebrtcErrors.StatsFailed("TRACK", `Error getting remote track stats ${e2.trackId} - ${h2.message}`))), o$2.w("[HMSWebrtcStats]", "Error in getting remote track stats", e2, h2);
  }
  let s4 = Br(r2), a2 = ci("bytesReceived", s4, i2), c2 = ni("packetsLost", s4, i2);
  return s4 != null && s4.remote && Object.assign(s4.remote, { packetsLostRate: ni("packetsLost", s4.remote, i2 == null ? void 0 : i2.remote) }), s4 && Object.assign(s4, { bitrate: a2, packetsLostRate: c2, peerId: e2.peerId, enabled: e2.enabled, peerName: t2, codec: s4.codec });
}), Br = (n9) => {
  let e2, t2, i2 = {};
  n9 == null || n9.forEach((a2) => {
    switch (a2.type) {
      case "inbound-rtp":
        e2 = a2;
        break;
      case "outbound-rtp":
        e2 = a2;
        break;
      case "remote-inbound-rtp":
        t2 = a2;
        break;
      case "codec":
        i2[a2.id] = a2.mimeType;
        break;
    }
  });
  let r2 = e2 != null && e2.codecId ? i2[e2.codecId] : void 0, s4;
  return r2 && (s4 = r2.substring(r2.indexOf("/") + 1)), e2 && Object.assign(e2, { remote: t2, codec: s4 });
}, oi = (n9, e2, t2) => {
  let i2 = $r(e2), r2 = ci(n9 === "publish" ? "bytesSent" : "bytesReceived", i2, t2 && t2[n9]);
  return i2 && Object.assign(i2, { bitrate: r2 });
}, $r = (n9) => {
  let e2;
  return n9 == null || n9.forEach((t2) => {
    t2.type === "transport" && (e2 = n9 == null ? void 0 : n9.get(t2.selectedCandidatePairId));
  }), e2 || n9 == null || n9.forEach((t2) => {
    t2.type === "candidate-pair" && t2.selected && (e2 = t2);
  }), e2;
}, Qi = (n9) => {
  let e2 = { packetsLost: 0, jitter: 0 };
  return n9 == null || n9.forEach((t2) => {
    t2.packetsLost && (e2.packetsLost += t2.packetsLost), t2.jitter > e2.jitter && (e2.jitter = t2.jitter);
  }), e2;
}, Ji = (n9, e2) => Array.from(new Set(n9.concat(e2))), ci = (n9, e2, t2) => ni(n9, e2, t2) * 8, ni = (n9, e2, t2) => {
  let i2 = e2 && e2[n9], r2 = t2 ? t2[n9] : null;
  return [e2, t2, Q$2(i2), Q$2(r2)].every((a2) => !!a2) ? di(i2, r2, e2 == null ? void 0 : e2.timestamp, t2 == null ? void 0 : t2.timestamp) * 1e3 : 0;
}, di = (n9, e2, t2, i2) => Q$2(n9) && Q$2(e2) && t2 && i2 ? (n9 - e2) / (t2 - i2) : 0;
var xe$1 = class {
  constructor(e2, t2, i2) {
    this.getStats = e2;
    this.store = t2;
    this.eventBus = i2;
    this.TAG = "[HMSWebrtcStats]";
    this.peerStats = {};
    this.remoteTrackStats = {};
    this.localTrackStats = {};
    this.getLocalPeerStats = () => this.peerStats[this.localPeerID];
    this.getRemoteTrackStats = (e3) => this.remoteTrackStats[e3];
    this.getLocalTrackStats = () => this.localTrackStats;
    this.updateStats = () => d$3(this, null, function* () {
      yield this.updateLocalPeerStats(), yield this.updateLocalTrackStats(), yield this.updateRemoteTrackStats();
    });
    this.updateLocalPeerStats = () => d$3(this, null, function* () {
      var u2, m2, S2, T2, y2, b2;
      let e3 = this.getLocalPeerStats(), t3;
      try {
        t3 = yield (m2 = (u2 = this.getStats).publish) == null ? void 0 : m2.call(u2);
      } catch (G2) {
        this.eventBus.analytics.publish(E$3.rtcStatsFailed(p$3.WebrtcErrors.StatsFailed("PUBLISH", G2.message))), o$2.w(this.TAG, "Error in getting publish stats", G2);
      }
      let i3 = t3 && oi("publish", t3, e3), r3;
      try {
        r3 = yield (T2 = (S2 = this.getStats).subscribe) == null ? void 0 : T2.call(S2);
      } catch (G2) {
        this.eventBus.analytics.publish(E$3.rtcStatsFailed(p$3.WebrtcErrors.StatsFailed("SUBSCRIBE", G2.message))), o$2.w(this.TAG, "Error in getting subscribe stats", G2);
      }
      let s4 = r3 && oi("subscribe", r3, e3), { packetsLost: a2, jitter: c2 } = Qi(r3), l2 = di(a2, (y2 = e3 == null ? void 0 : e3.subscribe) == null ? void 0 : y2.packetsLost, s4 == null ? void 0 : s4.timestamp, (b2 = e3 == null ? void 0 : e3.subscribe) == null ? void 0 : b2.timestamp), h2 = s4 && Object.assign(s4, { packetsLostRate: l2, jitter: c2, packetsLost: a2 });
      this.peerStats[this.localPeerID] = { publish: i3, subscribe: h2 };
    });
    this.updateRemoteTrackStats = () => d$3(this, null, function* () {
      var i3;
      let e3 = Array.from(this.store.getTracksMap().values()).filter((r3) => r3 instanceof H$2 || r3 instanceof re$1), t3 = e3.map((r3) => r3.trackId);
      Object.keys(this.remoteTrackStats).forEach((r3) => {
        t3.includes(r3) || delete this.remoteTrackStats[r3];
      });
      for (let r3 of e3) {
        let s4 = r3.peerId && ((i3 = this.store.getPeerById(r3.peerId)) == null ? void 0 : i3.name), a2 = this.getRemoteTrackStats(r3.trackId), c2 = yield ji(this.eventBus, r3, s4, a2);
        c2 && (this.remoteTrackStats[r3.trackId] = c2);
      }
    });
    this.updateLocalTrackStats = () => d$3(this, null, function* () {
      var i3;
      let e3 = this.store.getLocalPeerTracks().reduce((r3, s4) => (r3[s4.getTrackIDBeingSent()] = s4, r3), {}), t3 = Ji(Object.keys(this.localTrackStats), Object.keys(e3));
      for (let r3 of t3) {
        let s4 = e3[r3];
        if (s4) {
          let a2 = (i3 = this.store.getLocalPeer()) == null ? void 0 : i3.name, c2 = yield qi(this.eventBus, s4, a2, this.localTrackStats[r3]);
          c2 && (this.localTrackStats[r3] = c2);
        } else
          delete this.localTrackStats[r3];
      }
    });
    var r2;
    this.localPeerID = (r2 = this.store.getLocalPeer()) == null ? void 0 : r2.peerId;
  }
};
var Fe$1 = class {
  constructor(e2, t2, i2, r2) {
    this.store = e2;
    this.eventBus = t2;
    this.publishConnection = i2;
    this.subscribeConnection = r2;
    this.TAG = "[HMSWebrtcInternals]";
    this.interval = 1e3;
    this.isMonitored = false;
    this.handleStatsUpdate = () => d$3(this, null, function* () {
      var e3;
      yield (e3 = this.hmsStats) == null ? void 0 : e3.updateStats(), this.eventBus.statsUpdate.publish(this.hmsStats);
    });
  }
  getPublishPeerConnection() {
    return this.publishConnection;
  }
  getSubscribePeerConnection() {
    return this.subscribeConnection;
  }
  getCurrentStats() {
    return this.hmsStats;
  }
  onStatsChange(e2) {
    return this.eventBus.statsUpdate.subscribe(e2), () => {
      this.eventBus.statsUpdate.unsubscribe(e2);
    };
  }
  setPeerConnections({ publish: e2, subscribe: t2 }) {
    var i2, r2;
    this.publishConnection = e2, this.subscribeConnection = t2, this.hmsStats = new xe$1({ publish: (i2 = this.publishConnection) == null ? void 0 : i2.getStats.bind(this.publishConnection), subscribe: (r2 = this.subscribeConnection) == null ? void 0 : r2.getStats.bind(this.subscribeConnection) }, this.store, this.eventBus);
  }
  start() {
    return d$3(this, null, function* () {
      if (this.isMonitored) {
        o$2.d(this.TAG, "Already started");
        return;
      }
      this.stop(), this.isMonitored = true, o$2.d(this.TAG, "Starting Webrtc Stats Monitor"), this.startLoop().then(() => o$2.d(this.TAG, "Stopping Webrtc Stats Monitor")).catch((e2) => {
        this.eventBus.analytics.publish(E$3.rtcStatsFailed(p$3.WebrtcErrors.StatsFailed("PUBLISH", e2.message))), o$2.e(this.TAG, e2.message);
      });
    });
  }
  stop() {
    this.isMonitored = false;
  }
  startLoop() {
    return d$3(this, null, function* () {
      for (; this.isMonitored; )
        yield this.handleStatsUpdate(), yield R$2(this.interval);
    });
  }
  cleanup() {
    this.stop(), this.eventBus.statsUpdate.removeAllListeners();
  }
};
var Kr = qt$1().version;
o$2.d("adapter", `${adapter.browserDetails.browser} v${adapter.browserDetails.version}`);
o$2.d("sdk version", Kr);
var li = { isAudioMuted: false, isVideoMuted: false, audioInputDeviceId: "default", audioOutputDeviceId: "default", videoDeviceId: "default" }, $$1, ut$1, j$2 = class n7 {
  constructor(e2, t2, i2, r2, s4) {
    this.store = e2;
    this.observer = t2;
    this.deviceManager = i2;
    this.eventBus = r2;
    this.analyticsTimer = s4;
    this.TAG = "[LocalTrackManager]";
    this.setScreenCaptureHandleConfig();
  }
  getTracksToPublish() {
    return d$3(this, arguments, function* (e2 = li) {
      let t2 = this.getAVTrackSettings(e2);
      if (!t2)
        return [];
      let i2 = !!t2.audio, r2 = !!t2.video, s4 = [], { videoTrack: a2, audioTrack: c2 } = yield this.updateCurrentLocalTrackSettings(t2), l2 = (a2 == null ? void 0 : a2.stream) || (c2 == null ? void 0 : c2.stream), h2 = !!(a2 && this.store.getTrackById(a2.trackId)), u2 = !!(c2 && this.store.getTrackById(c2.trackId));
      if (h2 && u2)
        return [];
      let m2 = { audio: i2 && !c2 && (e2.isAudioMuted ? "empty" : true), video: r2 && !a2 && (e2.isVideoMuted ? "empty" : true) };
      m2.audio && this.analyticsTimer.start("local_audio_track_time"), m2.video && this.analyticsTimer.start("local_video_track_time");
      try {
        o$2.d(this.TAG, "Init Local Tracks", { fetchTrackOptions: m2 }), s4 = yield this.getLocalTracks(m2, t2, l2);
      } catch (S2) {
        s4 = yield this.retryGetLocalTracks(S2, t2, m2, l2);
      }
      return m2.audio && this.analyticsTimer.end("local_audio_track_time"), m2.video && this.analyticsTimer.end("local_video_track_time"), a2 && r2 && !h2 && s4.push(a2), c2 && i2 && !u2 && s4.push(c2), s4;
    });
  }
  getLocalTracks() {
    return d$3(this, arguments, function* (e2 = { audio: true, video: true }, t2, i2) {
      try {
        let r2 = yield this.getNativeLocalTracks(e2, t2);
        return this.createHMSLocalTracks(r2, t2, i2);
      } catch (r2) {
        throw this.eventBus.analytics.publish(E$3.publish({ devices: this.deviceManager.getDevices(), error: r2, settings: t2 })), r2;
      }
    });
  }
  getNativeLocalTracks() {
    return d$3(this, arguments, function* (e2 = { audio: false, video: false }, t2) {
      let i2 = new Ee$1(e2.video === true ? t2.video : null, e2.audio === true ? t2.audio : null, t2.simulcast), r2 = [];
      return (i2.audio || i2.video) && r2.push(...yield this.getAVTracks(i2)), r2.push(...this.getEmptyTracks(e2)), r2;
    });
  }
  getLocalScreen(e2) {
    return d$3(this, null, function* () {
      var m2;
      let t2 = yield this.getOrDefaultScreenshareConfig(e2), i2 = this.getScreenshareSettings(t2.videoOnly), r2 = { video: M$1(g$1({}, i2 == null ? void 0 : i2.video.toConstraints(true)), { displaySurface: t2.displaySurface }), preferCurrentTab: t2.preferCurrentTab, selfBrowserSurface: t2.selfBrowserSurface, surfaceSwitching: t2.surfaceSwitching, systemAudio: t2.systemAudio };
      if (i2 != null && i2.audio) {
        let S2 = (m2 = i2 == null ? void 0 : i2.audio) == null ? void 0 : m2.toConstraints();
        delete S2.advanced, r2.audio = M$1(g$1({}, S2), { autoGainControl: false, noiseSuppression: false, googAutoGainControl: false, echoCancellation: false });
      }
      let s4;
      try {
        o$2.d("retrieving screenshare with ", { config: t2 }, { constraints: r2 }), s4 = yield navigator.mediaDevices.getDisplayMedia(r2);
      } catch (S2) {
        o$2.w(this.TAG, "error in getting screenshare - ", S2);
        let T2 = V$1(S2, "screen");
        throw this.eventBus.analytics.publish(E$3.publish({ error: T2, devices: this.deviceManager.getDevices(), settings: new Ee$1(i2 == null ? void 0 : i2.video, i2 == null ? void 0 : i2.audio, false) })), T2;
      }
      let a2 = [], c2 = new se(s4), l2 = s4.getVideoTracks()[0], h2 = new F$2(c2, l2, "screen", this.eventBus, i2 == null ? void 0 : i2.video);
      h2.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(), "screen"));
      try {
        let S2 = this.validateCurrentTabCapture(h2, t2.forceCurrentTab);
        h2.isCurrentTab = S2, yield h2.cropTo(t2.cropTarget);
      } catch (S2) {
        throw s4.getTracks().forEach((T2) => T2.stop()), S2;
      }
      a2.push(h2);
      let u2 = s4.getAudioTracks()[0];
      if (u2) {
        let S2 = new pe(c2, u2, "screen", this.eventBus, i2 == null ? void 0 : i2.audio);
        a2.push(S2);
      }
      return o$2.v(this.TAG, "getLocalScreen", a2), a2;
    });
  }
  setScreenCaptureHandleConfig(e2) {
    var t2;
    !((t2 = navigator.mediaDevices) != null && t2.setCaptureHandleConfig) || this.isInIframe() || (e2 = e2 || {}, Object.assign(e2, { handle: v4(), exposeOrigin: false, permittedOrigins: [window.location.origin] }), o$2.d("setting capture handle - ", e2.handle), navigator.mediaDevices.setCaptureHandleConfig(e2), this.captureHandleIdentifier = e2.handle);
  }
  validateCurrentTabCapture(e2, t2) {
    let i2 = e2.getCaptureHandle(), r2 = !!(this.captureHandleIdentifier && (i2 == null ? void 0 : i2.handle) === this.captureHandleIdentifier);
    if (t2 && !r2)
      throw o$2.e(this.TAG, "current tab was not shared with forceCurrentTab as true"), p$3.TracksErrors.CurrentTabNotShared();
    return r2;
  }
  requestPermissions() {
    return d$3(this, null, function* () {
      try {
        (yield navigator.mediaDevices.getUserMedia({ audio: true, video: true })).getTracks().forEach((t2) => t2.stop());
      } catch (e2) {
        o$2.e(this.TAG, e2);
      }
    });
  }
  static getEmptyVideoTrack(e2) {
    var c2, l2, h2;
    let t2 = ((c2 = e2 == null ? void 0 : e2.getSettings()) == null ? void 0 : c2.width) || 320, i2 = ((l2 = e2 == null ? void 0 : e2.getSettings()) == null ? void 0 : l2.height) || 240, r2 = 1;
    $$1 || ($$1 = document.createElement("canvas"), $$1.width = t2, $$1.height = i2, (h2 = $$1.getContext("2d")) == null || h2.fillRect(0, 0, t2, i2)), ut$1 || (ut$1 = setInterval(() => {
      let u2 = $$1 == null ? void 0 : $$1.getContext("2d");
      u2 && u2.fillRect(0, 0, 1, 1);
    }, 1e3 / r2));
    let a2 = $$1.captureStream(r2).getVideoTracks()[0];
    return a2.enabled = false, a2;
  }
  static getEmptyAudioTrack() {
    let e2 = ee$1.getAudioContext(), t2 = e2.createOscillator(), i2 = e2.createMediaStreamDestination();
    t2.connect(i2), t2.start();
    let r2 = i2.stream.getAudioTracks()[0];
    return r2.enabled = false, r2;
  }
  static cleanup() {
    clearInterval(ut$1), ut$1 = void 0, $$1 = void 0;
  }
  getAVTracks(e2) {
    return d$3(this, null, function* () {
      try {
        let t2 = yield navigator.mediaDevices.getUserMedia({ audio: e2.audio ? e2.audio.toConstraints() : false, video: e2.video ? e2.video.toConstraints() : false });
        return t2.getVideoTracks().concat(t2.getAudioTracks());
      } catch (t2) {
        yield this.deviceManager.init();
        let i2 = !!(!this.deviceManager.hasWebcamPermission && e2.video), r2 = !!(!this.deviceManager.hasMicrophonePermission && e2.audio), s4 = this.getErrorType(i2, r2);
        throw V$1(t2, s4);
      }
    });
  }
  getAVTrackSettings(e2) {
    let t2 = this.getAudioSettings(e2), i2 = this.getVideoSettings(e2);
    return !t2 && !i2 ? null : new _e().video(i2).audio(t2).build();
  }
  isInIframe() {
    try {
      return window.self !== window.top;
    } catch (e2) {
      return true;
    }
  }
  retryGetLocalTracks(e2, t2, i2, r2) {
    return d$3(this, null, function* () {
      if (e2 instanceof v$3 && e2.action === "TRACK") {
        this.observer.onFailure(e2);
        let s4 = e2.code === f$3.TracksErrors.OVER_CONSTRAINED, a2 = e2.message.includes("audio"), c2 = e2.message.includes("video");
        if (s4) {
          let l2 = new _e().video(new he$1()).audio(new ue$1()).build();
          o$2.w(this.TAG, "Fetch AV Tracks failed with overconstrained error", { fetchTrackOptions: i2 }, { error: e2 });
          try {
            return yield this.getLocalTracks(i2, l2, r2);
          } catch (h2) {
            let u2 = h2 instanceof v$3 ? h2.nativeError : h2, m2 = h2;
            if ((u2 == null ? void 0 : u2.name) === "OverconstrainedError") {
              let S2 = p$3.TracksErrors.GenericTrack("TRACK", "Overconstrained error after dropping all constraints");
              S2.addNativeError(u2), m2 = S2;
            }
            return yield this.retryGetLocalTracks(m2, t2, i2, r2);
          }
        }
        i2.audio = a2 ? "empty" : i2.audio, i2.video = c2 ? "empty" : i2.video, o$2.w(this.TAG, "Fetch AV Tracks failed", { fetchTrackOptions: i2 }, e2);
        try {
          return yield this.getLocalTracks(i2, t2, r2);
        } catch (l2) {
          return o$2.w(this.TAG, "Fetch empty tacks failed", l2), i2.audio = i2.audio && "empty", i2.video = i2.video && "empty", this.observer.onFailure(l2), yield this.getLocalTracks(i2, t2, r2);
        }
      } else
        return o$2.w(this.TAG, "Fetch AV Tracks failed - unknown exception", e2), this.observer.onFailure(e2), [];
    });
  }
  getErrorType(e2, t2) {
    return e2 && t2 ? "audio, video" : e2 ? "video" : t2 ? "audio" : "unknown(video or audio)";
  }
  getEmptyTracks(e2) {
    let t2 = [];
    return e2.audio === "empty" && t2.push(n7.getEmptyAudioTrack()), e2.video === "empty" && t2.push(n7.getEmptyVideoTrack()), t2;
  }
  updateCurrentLocalTrackSettings(e2) {
    return d$3(this, null, function* () {
      let t2 = this.store.getLocalPeerTracks(), i2 = t2.find((c2) => c2.type === "video" && c2.source === "regular"), r2 = t2.find((c2) => c2.type === "audio" && c2.source === "regular"), s4 = t2.find((c2) => c2.type === "video" && c2.source === "screen");
      e2 != null && e2.video && (yield i2 == null ? void 0 : i2.setSettings(e2.video)), e2 != null && e2.audio && (yield r2 == null ? void 0 : r2.setSettings(e2.audio));
      let a2 = this.getScreenshareSettings(true);
      return a2 != null && a2.video && (yield s4 == null ? void 0 : s4.setSettings(a2 == null ? void 0 : a2.video)), { videoTrack: i2, audioTrack: r2 };
    });
  }
  getAudioSettings(e2) {
    var a2;
    let t2 = this.store.getPublishParams();
    if (!t2 || !((a2 = t2.allowed) != null && a2.includes("audio")))
      return null;
    let i2 = this.store.getLocalPeer(), r2 = i2 == null ? void 0 : i2.audioTrack, s4 = (r2 == null ? void 0 : r2.settings.deviceId) || e2.audioInputDeviceId;
    return new x$1().codec(t2.audio.codec).maxBitrate(t2.audio.bitRate).deviceId(s4 || li.audioInputDeviceId).build();
  }
  getVideoSettings(e2) {
    var c2;
    let t2 = this.store.getPublishParams();
    if (!t2 || !((c2 = t2.allowed) != null && c2.includes("video")))
      return null;
    let i2 = this.store.getLocalPeer(), r2 = i2 == null ? void 0 : i2.videoTrack, s4 = (r2 == null ? void 0 : r2.settings.deviceId) || e2.videoDeviceId, a2 = t2.video;
    return new N$3().codec(a2.codec).maxBitrate(a2.bitRate).maxFramerate(a2.frameRate).setWidth(a2.width).setHeight(a2.height).deviceId(s4 || li.videoDeviceId).build();
  }
  getScreenshareSettings(e2 = false) {
    var r2;
    let t2 = this.store.getPublishParams();
    if (!t2 || !((r2 = t2.allowed) != null && r2.includes("screen")))
      return null;
    let i2 = t2.screen;
    return { video: new N$3().maxBitrate(i2.bitRate, false).codec(i2.codec).maxFramerate(i2.frameRate).setWidth(i2.width).setHeight(i2.height).build(), audio: e2 ? void 0 : new x$1().build() };
  }
  getOrDefaultScreenshareConfig(e2) {
    return d$3(this, null, function* () {
      var i2;
      let t2 = Object.assign({ videoOnly: false, audioOnly: false, forceCurrentTab: false, preferCurrentTab: false, selfBrowserSurface: "exclude", surfaceSwitching: "include", systemAudio: "exclude", displaySurface: "monitor" }, e2 || {});
      return t2.forceCurrentTab && (t2.videoOnly = true, t2.preferCurrentTab = true, t2.selfBrowserSurface = "include", t2.surfaceSwitching = "exclude"), t2.preferCurrentTab && (t2.selfBrowserSurface = "include", t2.displaySurface = void 0), t2.cropElement && ((i2 = window.CropTarget) != null && i2.fromElement) && (t2.cropTarget = yield window.CropTarget.fromElement(t2.cropElement)), t2;
    });
  }
  createHMSLocalTracks(e2, t2, i2) {
    let r2 = e2.find((c2) => c2.kind === "video"), s4 = e2.find((c2) => c2.kind === "audio");
    i2 ? e2.forEach((c2) => i2 == null ? void 0 : i2.nativeStream.addTrack(c2)) : i2 = new se(new MediaStream(e2));
    let a2 = [];
    if (s4 && (t2 != null && t2.audio)) {
      let c2 = new pe(i2, s4, "regular", this.eventBus, t2.audio);
      a2.push(c2);
    }
    if (r2 && (t2 != null && t2.video)) {
      let c2 = new F$2(i2, r2, "regular", this.eventBus, t2.video);
      c2.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(), "regular")), a2.push(c2);
    }
    return a2;
  }
};
var ht$1 = class {
  constructor(e2, t2) {
    this.eventBus = e2;
    this.listener = t2;
    this.TAG = "[NetworkTestManager]";
    this.controller = new AbortController();
    this.start = (e3) => d$3(this, null, function* () {
      var h2;
      if (!e3)
        return;
      let { url: t3, timeout: i2, scoreMap: r2 } = e3, s4 = this.controller.signal, a2 = Date.now(), c2 = 0, l2 = R$2(i2).then(() => {
        this.controller.abort();
      });
      try {
        let m2 = (h2 = (yield fetch(`${t3}?${Date.now()}`, { signal: s4 })).body) == null ? void 0 : h2.getReader();
        if (!m2)
          throw Error("unable to process request");
        let S2 = () => d$3(this, null, function* () {
          if (m2)
            try {
              let T2 = false;
              for (; !T2; ) {
                let { value: y2, done: b2 } = yield m2.read();
                T2 = b2, y2 && (c2 += y2.byteLength, this.sendScore({ scoreMap: r2, downloadedSize: c2, startTime: a2 }));
              }
            } catch (T2) {
              T2.name !== "AbortError" && o$2.d(this.TAG, T2);
            }
        });
        return Promise.race([S2(), l2]).then(() => {
          this.sendScore({ scoreMap: r2, downloadedSize: c2, startTime: a2, finished: true });
        }).catch((T2) => {
          o$2.d(this.TAG, T2), this.updateScoreToListener(0), this.eventBus.analytics.publish(E$3.previewNetworkQuality({ error: T2.message }));
        });
      } catch (u2) {
        u2.name !== "AbortError" ? (o$2.d(this.TAG, u2), this.updateScoreToListener(0), this.eventBus.analytics.publish(E$3.previewNetworkQuality({ error: u2.message }))) : o$2.d(this.TAG, u2);
      }
    });
    this.stop = () => {
      this.controller.signal.aborted || this.controller.abort();
    };
    this.sendScore = ({ scoreMap: e3, downloadedSize: t3, startTime: i2, finished: r2 = false }) => {
      let s4 = (Date.now() - i2) / 1e3, c2 = t3 / 1024 / s4 * 8, l2 = -1;
      for (let h2 in e3) {
        let u2 = e3[h2];
        c2 >= u2.low && (!u2.high || c2 <= u2.high) && (l2 = Number(h2));
      }
      this.updateScoreToListener(l2), r2 && this.eventBus.analytics.publish(E$3.previewNetworkQuality({ score: l2, downLink: c2.toFixed(2) }));
    };
  }
  updateScoreToListener(e2) {
    var t2, i2;
    e2 !== this.score && (this.score = e2, (i2 = (t2 = this.listener) == null ? void 0 : t2.onNetworkQuality) == null || i2.call(t2, e2));
  }
};
var Ge$1 = class {
  constructor(e2, t2, i2, r2, s4, a2) {
    this.store = e2;
    this.transport = t2;
    this.deviceManager = i2;
    this.publish = r2;
    this.removeAuxiliaryTrack = s4;
    this.listener = a2;
    this.handleLocalPeerRoleUpdate = (i3) => d$3(this, [i3], function* ({ oldRole: e3, newRole: t3 }) {
      var s5;
      let r3 = this.store.getLocalPeer();
      r3 && (yield this.diffRolesAndPublishTracks({ oldRole: e3, newRole: t3 }), (s5 = this.listener) == null || s5.onPeerUpdate(8, r3));
    });
    this.diffRolesAndPublishTracks = (i3) => d$3(this, [i3], function* ({ oldRole: e3, newRole: t3 }) {
      var T2, y2, b2, G2, gi2, Si2, vi2;
      let r3 = new Set(e3.publishParams.allowed), s5 = new Set(t3.publishParams.allowed), a3 = this.removeTrack(r3, s5, "video"), c2 = this.removeTrack(r3, s5, "audio"), l2 = this.removeTrack(r3, s5, "screen"), h2 = this.hasSimulcastDifference((T2 = e3.publishParams.simulcast) == null ? void 0 : T2.video, (y2 = t3.publishParams.simulcast) == null ? void 0 : y2.video), u2 = this.hasSimulcastDifference((b2 = e3.publishParams.simulcast) == null ? void 0 : b2.screen, (G2 = t3.publishParams.simulcast) == null ? void 0 : G2.screen), m2 = (Si2 = (gi2 = this.store.getLocalPeer()) == null ? void 0 : gi2.videoTrack) == null ? void 0 : Si2.enabled;
      yield this.removeAudioTrack(c2), yield this.removeVideoTracks(a3 || h2), yield this.removeScreenTracks(l2 || u2);
      let S2 = ((vi2 = this.store.getConfig()) == null ? void 0 : vi2.settings) || { isAudioMuted: true, isVideoMuted: true, audioInputDeviceId: "default", videoDeviceId: "default", audioOutputDeviceId: "default" };
      h2 && (S2.isVideoMuted = !m2), yield this.publish(S2), yield this.syncDevices(S2, t3);
    });
  }
  syncDevices(e2, t2) {
    return d$3(this, null, function* () {
      (!e2.isAudioMuted || !e2.isVideoMuted) && t2.publishParams.allowed.length > 0 && (yield this.deviceManager.init(true));
    });
  }
  removeVideoTracks(e2) {
    return d$3(this, null, function* () {
      var i2;
      if (!e2)
        return;
      let t2 = this.store.getLocalPeer();
      t2 != null && t2.videoTrack && (t2.videoTrack.isPublished ? yield this.transport.unpublish([t2.videoTrack]) : yield t2.videoTrack.cleanup(), (i2 = this.listener) == null || i2.onTrackUpdate(1, t2.videoTrack, t2), t2.videoTrack = void 0), yield this.removeAuxTracks((r2) => r2.source !== "screen" && r2.type === "video");
    });
  }
  removeAudioTrack(e2) {
    return d$3(this, null, function* () {
      var i2;
      if (!e2)
        return;
      let t2 = this.store.getLocalPeer();
      t2 != null && t2.audioTrack && (t2.audioTrack.isPublished ? yield this.transport.unpublish([t2.audioTrack]) : yield t2.audioTrack.cleanup(), (i2 = this.listener) == null || i2.onTrackUpdate(1, t2.audioTrack, t2), t2.audioTrack = void 0), yield this.removeAuxTracks((r2) => r2.source !== "screen" && r2.type === "audio");
    });
  }
  removeScreenTracks(e2) {
    return d$3(this, null, function* () {
      e2 && (yield this.removeAuxTracks((t2) => t2.source === "screen"));
    });
  }
  removeAuxTracks(e2) {
    return d$3(this, null, function* () {
      let t2 = this.store.getLocalPeer();
      if (t2 != null && t2.auxiliaryTracks) {
        let i2 = [...t2.auxiliaryTracks];
        for (let r2 of i2)
          e2(r2) && (yield this.removeAuxiliaryTrack(r2.trackId));
      }
    });
  }
  removeTrack(e2, t2, i2) {
    return e2.has(i2) && !t2.has(i2);
  }
  hasSimulcastDifference(e2, t2) {
    var i2, r2, s4;
    return !e2 && !t2 ? false : ((i2 = e2 == null ? void 0 : e2.layers) == null ? void 0 : i2.length) !== ((r2 = t2 == null ? void 0 : t2.layers) == null ? void 0 : r2.length) ? true : !!((s4 = e2 == null ? void 0 : e2.layers) != null && s4.some((a2) => {
      var l2;
      let c2 = (l2 = t2 == null ? void 0 : t2.layers) == null ? void 0 : l2.find((h2) => h2.rid === a2.rid);
      return (c2 == null ? void 0 : c2.maxBitrate) !== a2.maxBitrate || (c2 == null ? void 0 : c2.maxFramerate) !== a2.maxFramerate;
    }));
  }
};
var ui = class {
  constructor() {
    this.TAG = "[HTTPAnalyticsTransport]";
    this.failedEvents = new U$1("client-events");
    this.isConnected = true;
    this.env = null;
    this.websocketURL = "";
  }
  setEnv(e2) {
    this.env = e2, this.flushFailedEvents();
  }
  setWebsocketEndpoint(e2) {
    this.websocketURL = e2;
  }
  sendEvent(e2) {
    if (!this.env || !this.websocketURL) {
      this.addEventToStorage(e2);
      return;
    }
    let t2 = { event: e2.name, payload: e2.properties, event_id: String(e2.timestamp), peer: e2.metadata.peer, timestamp: e2.timestamp, device_id: e2.device_id, cluster: { websocket_url: this.websocketURL } }, i2 = this.env === "prod" ? $i : Wi;
    fetch(i2, { method: "POST", headers: { "Content-Type": "application/json", Authorization: `Bearer ${e2.metadata.token}`, user_agent_v2: e2.metadata.userAgent }, body: JSON.stringify(t2) }).then((r2) => {
      if (r2.status === 401) {
        this.removeFromStorage(e2);
        return;
      }
      if (r2.status !== 200)
        throw Error(r2.statusText);
      this.removeFromStorage(e2);
    }).catch((r2) => {
      o$2.v(this.TAG, "Failed to send event", r2, e2), this.addEventToStorage(e2);
    });
  }
  flushFailedEvents() {
    let e2 = this.failedEvents.get();
    e2 == null || e2.forEach((t2) => this.sendEvent(t2));
  }
  addEventToStorage(e2) {
    let t2 = this.failedEvents.get() || [];
    t2.find((i2) => i2.timestamp === e2.timestamp) || (t2.length === 100 && t2.shift(), t2.push(e2), this.failedEvents.set(t2));
  }
  removeFromStorage(e2) {
    let t2 = this.failedEvents.get() || [], i2 = t2.findIndex((r2) => r2.timestamp === e2.timestamp);
    i2 > -1 && (t2.splice(i2, 1), this.failedEvents.set(t2));
  }
}, J$3 = new ui();
var Ue$1 = class {
  constructor() {
    this.knownRoles = {};
    this.peers = {};
    this.tracks = /* @__PURE__ */ new Map();
    this.peerTrackStates = {};
    this.speakers = [];
    this.roleDetailsArrived = false;
    this.env = "prod";
    this.simulcastEnabled = false;
    this.userAgent = Le$1(this.env);
    this.polls = /* @__PURE__ */ new Map();
  }
  getConfig() {
    return this.config;
  }
  setSimulcastEnabled(e2) {
    this.simulcastEnabled = e2;
  }
  getEnv() {
    return this.env;
  }
  getPublishParams() {
    let e2 = this.getLocalPeer(), t2 = (e2 == null ? void 0 : e2.asRole) || (e2 == null ? void 0 : e2.role);
    return t2 == null ? void 0 : t2.publishParams;
  }
  getRoom() {
    return this.room;
  }
  getPolicyForRole(e2) {
    return this.knownRoles[e2];
  }
  getKnownRoles() {
    return this.knownRoles;
  }
  getTemplateAppData() {
    return this.templateAppData;
  }
  getLocalPeer() {
    if (this.localPeerId && this.peers[this.localPeerId])
      return this.peers[this.localPeerId];
  }
  getRemotePeers() {
    return Object.values(this.peers).filter((e2) => !e2.isLocal);
  }
  getPeers() {
    return Object.values(this.peers);
  }
  getPeerMap() {
    return this.peers;
  }
  getPeerById(e2) {
    if (this.peers[e2])
      return this.peers[e2];
  }
  getTracksMap() {
    return this.tracks;
  }
  getTracks() {
    return Array.from(this.tracks.values());
  }
  getVideoTracks() {
    return this.getTracks().filter((e2) => e2.type === "video");
  }
  getRemoteVideoTracks() {
    return this.getTracks().filter((e2) => e2 instanceof H$2);
  }
  getAudioTracks() {
    return this.getTracks().filter((e2) => e2.type === "audio");
  }
  getPeerTracks(e2) {
    let t2 = e2 ? this.peers[e2] : void 0, i2 = [];
    return t2 != null && t2.videoTrack && i2.push(t2.videoTrack), t2 != null && t2.audioTrack && i2.push(t2.audioTrack), i2.concat((t2 == null ? void 0 : t2.auxiliaryTracks) || []);
  }
  getLocalPeerTracks() {
    return this.getPeerTracks(this.localPeerId);
  }
  hasTrack(e2) {
    return this.tracks.has(e2);
  }
  getTrackById(e2) {
    var r2, s4;
    let t2 = Array.from(this.tracks.values()).find((a2) => a2.trackId === e2);
    if (t2)
      return t2;
    let i2 = this.getLocalPeer();
    if (i2) {
      if ((r2 = i2.audioTrack) != null && r2.isPublishedTrackId(e2))
        return i2.audioTrack;
      if ((s4 = i2.videoTrack) != null && s4.isPublishedTrackId(e2))
        return i2.videoTrack;
    }
  }
  getPeerByTrackId(e2) {
    let t2 = Array.from(this.tracks.values()).find((i2) => i2.trackId === e2);
    return t2 != null && t2.peerId ? this.peers[t2.peerId] : void 0;
  }
  getSpeakers() {
    return this.speakers;
  }
  getSpeakerPeers() {
    return this.speakers.map((e2) => e2.peer);
  }
  getUserAgent() {
    return this.userAgent;
  }
  createAndSetUserAgent(e2) {
    this.userAgent = Le$1(this.env, e2);
  }
  setRoom(e2) {
    this.room = e2;
  }
  setKnownRoles(e2) {
    var i2, r2;
    if (this.knownRoles = e2.known_roles, this.roleDetailsArrived = true, this.templateAppData = e2.app_data, !this.simulcastEnabled)
      return;
    let t2 = (i2 = this.knownRoles[e2.name]) == null ? void 0 : i2.publishParams;
    this.videoLayers = this.convertSimulcastLayers((r2 = t2.simulcast) == null ? void 0 : r2.video), this.updatePeersPolicy();
  }
  hasRoleDetailsArrived() {
    return this.roleDetailsArrived;
  }
  setConfig(e2) {
    var t2, i2, r2;
    if (O$2.rememberDevices(!!e2.rememberDeviceSelection), e2.rememberDeviceSelection) {
      let s4 = O$2.getSelection();
      s4 && (e2.settings || (e2.settings = {}), (t2 = s4.audioInput) != null && t2.deviceId && (e2.settings.audioInputDeviceId = e2.settings.audioInputDeviceId || s4.audioInput.deviceId), (i2 = s4.audioOutput) != null && i2.deviceId && (e2.settings.audioOutputDeviceId = e2.settings.audioOutputDeviceId || s4.audioOutput.deviceId), (r2 = s4.videoInput) != null && r2.deviceId && (e2.settings.videoDeviceId = e2.settings.videoDeviceId || s4.videoInput.deviceId));
    }
    e2.autoManageVideo = e2.autoManageVideo !== false, e2.autoManageWakeLock = e2.autoManageWakeLock !== false, this.config = e2, this.setEnv();
  }
  addPeer(e2) {
    this.peers[e2.peerId] = e2, e2.isLocal && (this.localPeerId = e2.peerId);
  }
  addTrack(e2) {
    this.tracks.set(e2, e2);
  }
  getTrackState(e2) {
    return this.peerTrackStates[e2];
  }
  setTrackState(e2) {
    this.peerTrackStates[e2.trackInfo.track_id] = e2;
  }
  removePeer(e2) {
    this.localPeerId === e2 && (this.localPeerId = void 0), delete this.peers[e2];
  }
  removeTrack(e2) {
    this.tracks.delete(e2);
  }
  updateSpeakers(e2) {
    this.speakers = e2;
  }
  updateAudioOutputVolume(e2) {
    return d$3(this, null, function* () {
      for (let t2 of this.getAudioTracks())
        yield t2.setVolume(e2);
    });
  }
  updateAudioOutputDevice(e2) {
    return d$3(this, null, function* () {
      let t2 = [];
      this.getAudioTracks().forEach((i2) => {
        i2 instanceof re$1 && t2.push(i2.setOutputDevice(e2));
      }), yield Promise.all(t2);
    });
  }
  getSimulcastLayers(e2) {
    var t2;
    return !this.simulcastEnabled || !["screen", "regular"].includes(e2) ? [] : e2 === "screen" ? [] : ((t2 = this.videoLayers) == null ? void 0 : t2.layers) || [];
  }
  convertSimulcastLayers(e2) {
    if (e2)
      return M$1(g$1({}, e2), { layers: (e2.layers || []).map((t2) => M$1(g$1({}, t2), { maxBitrate: t2.maxBitrate * 1e3 })) });
  }
  getSimulcastDefinitionsForPeer(e2, t2) {
    var c2, l2, h2;
    if ([!e2 || !e2.role, t2 === "screen", !this.simulcastEnabled].some((u2) => !!u2))
      return [];
    let i2 = this.getPolicyForRole(e2.role.name).publishParams, r2, s4, a2;
    return t2 === "regular" ? (r2 = (c2 = i2.simulcast) == null ? void 0 : c2.video, s4 = i2.video.width, a2 = i2.video.height) : t2 === "screen" && (r2 = (l2 = i2.simulcast) == null ? void 0 : l2.screen, s4 = i2.screen.width, a2 = i2.screen.height), ((h2 = r2 == null ? void 0 : r2.layers) == null ? void 0 : h2.map((u2) => {
      let m2 = Yt[u2.rid], S2 = { width: Math.floor(s4 / u2.scaleResolutionDownBy), height: Math.floor(a2 / u2.scaleResolutionDownBy) };
      return { layer: m2, resolution: S2 };
    })) || [];
  }
  setPoll(e2) {
    this.polls.set(e2.id, e2);
  }
  getPoll(e2) {
    return this.polls.get(e2);
  }
  getErrorListener() {
    return this.errorListener;
  }
  cleanup() {
    let e2 = this.getTracks();
    for (let t2 of e2)
      t2.cleanup();
    this.room = void 0, this.config = void 0, this.localPeerId = void 0, this.roleDetailsArrived = false;
  }
  setErrorListener(e2) {
    this.errorListener = e2;
  }
  updatePeersPolicy() {
    this.getPeers().forEach((e2) => {
      var t2;
      if (!e2.role) {
        (t2 = this.errorListener) == null || t2.onError(p$3.GenericErrors.InvalidRole("VALIDATION", ""));
        return;
      }
      e2.role = this.getPolicyForRole(e2.role.name);
    });
  }
  setEnv() {
    var r2;
    let t2 = ((r2 = this.config) == null ? void 0 : r2.initEndpoint).split("https://")[1], i2 = "prod";
    t2.startsWith("prod") ? i2 = "prod" : t2.startsWith("qa") ? i2 = "qa" : t2.startsWith("dev") && (i2 = "dev"), this.env = i2, J$3.setEnv(i2);
  }
};
var pt$1 = class {
  constructor() {
    this.TAG = "[WakeLockManager]";
    this.wakeLock = null;
    this.acquireLock = () => d$3(this, null, function* () {
      yield this.requestWakeLock(), document == null || document.addEventListener("visibilitychange", this.visibilityHandler);
    });
    this.cleanup = () => d$3(this, null, function* () {
      if (this.wakeLock && !this.wakeLock.released)
        try {
          yield this.wakeLock.release(), o$2.d(this.TAG, "Wake lock released");
        } catch (e2) {
          let t2 = e2;
          o$2.w(this.TAG, "Error while releasing wake lock", `name=${t2.name}, message=${t2.message}`);
        }
      this.wakeLock = null;
    });
    this.visibilityHandler = () => d$3(this, null, function* () {
      (document == null ? void 0 : document.visibilityState) === "visible" && (!this.wakeLock || this.wakeLock.released) && (o$2.d(this.TAG, "Re-acquiring wake lock due to visibility change"), yield this.requestWakeLock());
    });
    this.requestWakeLock = () => d$3(this, null, function* () {
      try {
        if (!("wakeLock" in navigator)) {
          o$2.d(this.TAG, "Wake lock feature not supported");
          return;
        }
        this.wakeLock = yield navigator.wakeLock.request("screen"), o$2.d(this.TAG, "Wake lock acquired");
      } catch (e2) {
        let t2 = e2;
        o$2.w(this.TAG, "Error acquiring wake lock", `name=${t2.name}, message=${t2.message}`);
      }
    });
  }
};
var mt$1 = class {
  constructor(e2) {
    this.store = e2;
    this.bufferSize = 100;
    this.TAG = "[AnalyticsEventsService]";
    this.transport = null;
    this.pendingEvents = [];
    this.level = 1;
  }
  setTransport(e2) {
    this.transport = e2;
  }
  reset() {
    this.transport = null, this.pendingEvents = [];
  }
  queue(e2) {
    if (e2.level >= this.level && (this.pendingEvents.push(e2), this.pendingEvents.length > this.bufferSize)) {
      let t2 = this.pendingEvents.shift();
      o$2.d(this.TAG, "Max buffer size reached", "Removed event to accommodate new events", t2);
    }
    return this;
  }
  flushFailedClientEvents() {
    J$3.flushFailedEvents();
  }
  flush() {
    var e2;
    try {
      for (; this.pendingEvents.length > 0; ) {
        let t2 = this.pendingEvents.shift();
        t2 && (t2.metadata.peer.peer_id = (e2 = this.store.getLocalPeer()) == null ? void 0 : e2.peerId, t2.metadata.userAgent = this.store.getUserAgent(), this.transport && this.transport.transportProvider.isConnected ? this.transport.sendEvent(t2) : this.sendClientEventOnHTTP(t2));
      }
    } catch (t2) {
      o$2.w(this.TAG, "Flush Failed", t2);
    }
  }
  sendClientEventOnHTTP(e2) {
    var r2, s4, a2, c2;
    let t2 = this.store.getRoom(), i2 = this.store.getLocalPeer();
    e2.metadata.token = (r2 = this.store.getConfig()) == null ? void 0 : r2.authToken, e2.metadata.peer = { session_id: t2 == null ? void 0 : t2.sessionId, room_id: t2 == null ? void 0 : t2.id, room_name: t2 == null ? void 0 : t2.name, template_id: t2 == null ? void 0 : t2.templateId, joined_at: (s4 = t2 == null ? void 0 : t2.joinedAt) == null ? void 0 : s4.getTime(), session_started_at: (a2 = t2 == null ? void 0 : t2.startedAt) == null ? void 0 : a2.getTime(), role: (c2 = i2 == null ? void 0 : i2.role) == null ? void 0 : c2.name, user_name: i2 == null ? void 0 : i2.name, user_data: i2 == null ? void 0 : i2.metadata }, J$3.sendEvent(e2);
  }
};
var Xi = { autoplayFailed: void 0, initialized: false, autoplayCheckPromise: void 0 }, Ve = class {
  constructor(e2, t2, i2) {
    this.store = e2;
    this.deviceManager = t2;
    this.eventBus = i2;
    this.autoPausedTracks = /* @__PURE__ */ new Set();
    this.TAG = "[AudioSinkManager]:";
    this.volume = 100;
    this.state = g$1({}, Xi);
    this.handleAudioPaused = (e3) => d$3(this, null, function* () {
      var s4;
      let i3 = (s4 = e3.target.srcObject) == null ? void 0 : s4.getAudioTracks()[0];
      if (!(i3 != null && i3.enabled))
        return;
      o$2.d(this.TAG, "Audio Paused", e3.target.id);
      let r2 = this.store.getTrackById(e3.target.id);
      r2 && (Mi() ? (yield R$2(500), this.playAudioFor(r2)) : this.autoPausedTracks.add(r2));
    });
    this.handleTrackUpdate = ({ track: e3 }) => {
      o$2.d(this.TAG, "Track updated", `${e3}`);
    };
    this.handleTrackAdd = (r2) => d$3(this, [r2], function* ({ track: e3, peer: t3, callListener: i3 = true }) {
      var a2, c2;
      let s4 = document.createElement("audio");
      s4.style.display = "none", s4.id = e3.trackId, s4.addEventListener("pause", this.handleAudioPaused), s4.onerror = () => d$3(this, null, function* () {
        var h2, u2;
        o$2.e(this.TAG, "error on audio element", s4.error);
        let l2 = p$3.TracksErrors.AudioPlaybackError(`Audio playback error for track - ${e3.trackId} code - ${(h2 = s4 == null ? void 0 : s4.error) == null ? void 0 : h2.code}`);
        this.eventBus.analytics.publish(E$3.audioPlaybackError(l2)), ((u2 = s4 == null ? void 0 : s4.error) == null ? void 0 : u2.code) === MediaError.MEDIA_ERR_DECODE && (this.removeAudioElement(s4, e3), yield R$2(500), yield this.handleTrackAdd({ track: e3, peer: t3, callListener: false }));
      }), e3.setAudioElement(s4), e3.setVolume(this.volume), o$2.d(this.TAG, "Audio track added", `${e3}`), this.init(), (a2 = this.audioSink) == null || a2.append(s4), this.outputDevice && (yield e3.setOutputDevice(this.outputDevice)), s4.srcObject = new MediaStream([e3.nativeTrack]), i3 && ((c2 = this.listener) == null || c2.onTrackUpdate(0, e3, t3)), yield this.handleAutoplayError(e3);
    });
    this.handleAutoplayError = (e3) => d$3(this, null, function* () {
      if (this.state.autoplayFailed === void 0 && (this.state.autoplayCheckPromise || (this.state.autoplayCheckPromise = new Promise((t3) => {
        this.playAudioFor(e3).then(t3);
      })), yield this.state.autoplayCheckPromise), this.state.autoplayFailed) {
        this.autoPausedTracks.add(e3);
        return;
      }
      yield this.playAudioFor(e3);
    });
    this.handleAudioDeviceChange = (e3) => {
      e3.error || !e3.selection || e3.type === "video" || this.unpauseAudioTracks();
    };
    this.handleTrackRemove = (e3) => {
      this.autoPausedTracks.delete(e3);
      let t3 = document.getElementById(e3.trackId);
      t3 && this.removeAudioElement(t3, e3), this.audioSink && this.audioSink.childElementCount === 0 && (this.state.autoplayCheckPromise = void 0, this.state.autoplayFailed = void 0), o$2.d(this.TAG, "Audio track removed", `${e3}`);
    };
    this.unpauseAudioTracks = () => d$3(this, null, function* () {
      let e3 = [];
      this.autoPausedTracks.forEach((t3) => {
        e3.push(this.playAudioFor(t3));
      }), yield Promise.all(e3);
    });
    this.removeAudioElement = (e3, t3) => {
      e3 && (o$2.d(this.TAG, "removing audio element", `${t3}`), e3.removeEventListener("pause", this.handleAudioPaused), e3.srcObject = null, e3.remove(), t3.setAudioElement(null));
    };
    this.eventBus.audioTrackAdded.subscribe(this.handleTrackAdd), this.eventBus.audioTrackRemoved.subscribe(this.handleTrackRemove), this.eventBus.audioTrackUpdate.subscribe(this.handleTrackUpdate), this.eventBus.deviceChange.subscribe(this.handleAudioDeviceChange);
  }
  setListener(e2) {
    this.listener = e2;
  }
  get outputDevice() {
    return this.deviceManager.outputDevice;
  }
  getVolume() {
    return this.volume;
  }
  setVolume(e2) {
    return d$3(this, null, function* () {
      yield this.store.updateAudioOutputVolume(e2), this.volume = e2;
    });
  }
  unblockAutoplay() {
    return d$3(this, null, function* () {
      this.autoPausedTracks.size > 0 && this.unpauseAudioTracks();
    });
  }
  init(e2) {
    if (this.state.initialized || this.audioSink)
      return;
    this.state.initialized = true;
    let t2 = document.createElement("div");
    t2.id = `HMS-SDK-audio-sink-${v4()}`, (e2 && document.getElementById(e2) || document.body).append(t2), this.audioSink = t2, o$2.d(this.TAG, "audio sink created", this.audioSink);
  }
  cleanup() {
    var e2;
    (e2 = this.audioSink) == null || e2.remove(), this.audioSink = void 0, this.eventBus.audioTrackAdded.unsubscribe(this.handleTrackAdd), this.eventBus.audioTrackRemoved.unsubscribe(this.handleTrackRemove), this.eventBus.audioTrackUpdate.unsubscribe(this.handleTrackUpdate), this.eventBus.deviceChange.unsubscribe(this.handleAudioDeviceChange), this.autoPausedTracks = /* @__PURE__ */ new Set(), this.state = g$1({}, Xi);
  }
  playAudioFor(e2) {
    return d$3(this, null, function* () {
      let t2 = e2.getAudioElement();
      if (!t2) {
        o$2.w(this.TAG, "No audio element found on track", e2.trackId);
        return;
      }
      try {
        yield t2.play(), this.state.autoplayFailed = false, this.autoPausedTracks.delete(e2), o$2.d(this.TAG, "Played track", `${e2}`);
      } catch (i2) {
        this.autoPausedTracks.add(e2), o$2.w(this.TAG, "Failed to play track", `${e2}`, i2);
        let r2 = i2;
        if (!this.state.autoplayFailed && r2.name === "NotAllowedError") {
          this.state.autoplayFailed = true;
          let s4 = p$3.TracksErrors.AutoplayBlocked("AUTOPLAY", "");
          s4.addNativeError(r2), this.eventBus.analytics.publish(E$3.autoplayError()), this.eventBus.autoplayError.publish(s4);
        }
      }
    });
  }
};
var Be$1 = class {
  constructor(e2, t2) {
    this.store = e2;
    this.eventBus = t2;
    this.audioInput = [];
    this.audioOutput = [];
    this.videoInput = [];
    this.hasWebcamPermission = false;
    this.hasMicrophonePermission = false;
    this.TAG = "[Device Manager]:";
    this.initialized = false;
    this.videoInputChanged = false;
    this.audioInputChanged = false;
    this.updateOutputDevice = (e3) => d$3(this, null, function* () {
      let t3 = this.audioOutput.find((i3) => i3.deviceId === e3);
      return t3 && (this.outputDevice = t3, yield this.store.updateAudioOutputDevice(t3), O$2.updateSelection("audioOutput", { deviceId: t3.deviceId, groupId: t3.groupId })), t3;
    });
    this.getCurrentSelection = () => {
      var a2, c2;
      let e3 = this.store.getLocalPeer(), t3 = this.createIdentifier((a2 = e3 == null ? void 0 : e3.audioTrack) == null ? void 0 : a2.getMediaTrackSettings()), i3 = this.createIdentifier((c2 = e3 == null ? void 0 : e3.videoTrack) == null ? void 0 : c2.getMediaTrackSettings()), r2 = this.audioInput.find((l2) => this.createIdentifier(l2) === t3), s4 = this.videoInput.find((l2) => this.createIdentifier(l2) === i3);
      return { audioInput: r2, videoInput: s4, audioOutput: this.outputDevice };
    };
    this.computeChange = (e3, t3) => e3.length !== t3.length ? true : t3.some((i3) => !e3.includes(this.createIdentifier(i3)));
    this.enumerateDevices = () => d$3(this, null, function* () {
      try {
        let e3 = yield navigator.mediaDevices.enumerateDevices(), t3 = this.videoInput.map(this.createIdentifier), i3 = this.audioInput.map(this.createIdentifier);
        this.audioInput = [], this.audioOutput = [], this.videoInput = [], e3.forEach((r2) => {
          r2.kind === "audioinput" && r2.label ? (this.hasMicrophonePermission = true, this.audioInput.push(r2)) : r2.kind === "audiooutput" ? this.audioOutput.push(r2) : r2.kind === "videoinput" && r2.label && (this.hasWebcamPermission = true, this.videoInput.push(r2));
        }), this.videoInputChanged = this.computeChange(t3, this.videoInput), this.audioInputChanged = this.computeChange(i3, this.audioInput), O$2.setDevices({ videoInput: [...this.videoInput], audioInput: [...this.audioInput], audioOutput: [...this.audioOutput] }), this.logDevices("Enumerate Devices");
      } catch (e3) {
        o$2.e(this.TAG, "Failed enumerating devices", e3);
      }
    });
    this.handleDeviceChange = nt$1(() => d$3(this, null, function* () {
      yield this.enumerateDevices(), this.logDevices("After Device Change");
      let e3 = this.store.getLocalPeer();
      yield this.setOutputDevice(true), yield this.handleAudioInputDeviceChange(e3 == null ? void 0 : e3.audioTrack), yield this.handleVideoInputDeviceChange(e3 == null ? void 0 : e3.videoTrack), this.eventBus.analytics.publish(E$3.deviceChange({ selection: this.getCurrentSelection(), type: "change", devices: this.getDevices() }));
    }), 500).bind(this);
    this.handleAudioInputDeviceChange = (e3) => d$3(this, null, function* () {
      if (!e3) {
        o$2.d(this.TAG, "No Audio track on local peer");
        return;
      }
      if (!this.audioInputChanged) {
        o$2.d(this.TAG, "No Change in AudioInput Device");
        return;
      }
      let t3 = this.getNewAudioInputDevice();
      if (!t3 || !t3.deviceId) {
        this.eventBus.analytics.publish(E$3.deviceChange({ selection: { audioInput: t3 }, error: new Error("Audio device not found"), devices: this.getDevices(), type: "audioInput" })), o$2.w(this.TAG, "Audio device not found");
        return;
      }
      let { settings: i3 } = e3, r2 = new x$1().codec(i3.codec).maxBitrate(i3.maxBitrate).deviceId(t3.deviceId).build();
      try {
        yield e3.setSettings(r2, true), this.eventBus.deviceChange.publish({ devices: this.getDevices(), selection: t3, type: "audioInput" }), this.logDevices("Audio Device Change Success");
      } catch (s4) {
        o$2.e(this.TAG, "[Audio Device Change]", s4), this.eventBus.analytics.publish(E$3.deviceChange({ selection: { audioInput: t3 }, devices: this.getDevices(), type: "audioInput", error: s4 })), this.eventBus.deviceChange.publish({ error: s4, selection: t3, type: "audioInput", devices: this.getDevices() });
      }
    });
    this.handleVideoInputDeviceChange = (e3) => d$3(this, null, function* () {
      if (!e3) {
        o$2.d(this.TAG, "No video track on local peer");
        return;
      }
      if (!this.videoInputChanged) {
        o$2.d(this.TAG, "No Change in VideoInput Device");
        return;
      }
      let t3 = this.videoInput[0];
      if (!t3 || !t3.deviceId) {
        this.eventBus.analytics.publish(E$3.deviceChange({ selection: { videoInput: t3 }, error: new Error("Video device not found"), devices: this.getDevices(), type: "video" })), o$2.w(this.TAG, "Video device not found");
        return;
      }
      let { settings: i3 } = e3, r2 = new N$3().codec(i3.codec).maxBitrate(i3.maxBitrate).maxFramerate(i3.maxFramerate).setWidth(i3.width).setHeight(i3.height).deviceId(t3.deviceId).build();
      try {
        yield e3.setSettings(r2, true), this.eventBus.deviceChange.publish({ devices: this.getDevices(), selection: t3, type: "video" }), this.logDevices("Video Device Change Success");
      } catch (s4) {
        o$2.e(this.TAG, "[Video Device Change]", s4), this.eventBus.analytics.publish(E$3.deviceChange({ selection: { videoInput: t3 }, devices: this.getDevices(), type: "video", error: s4 })), this.eventBus.deviceChange.publish({ error: s4, type: "video", selection: t3, devices: this.getDevices() });
      }
    });
    let i2 = ({ enabled: r2, track: s4 }) => r2 && s4.source === "regular";
    this.eventBus.localVideoEnabled.waitFor(i2).then(() => d$3(this, null, function* () {
      yield this.enumerateDevices(), this.videoInputChanged && this.eventBus.deviceChange.publish({ devices: this.getDevices() });
    })), this.eventBus.localAudioEnabled.waitFor(i2).then(() => d$3(this, null, function* () {
      yield this.enumerateDevices(), this.audioInputChanged && this.eventBus.deviceChange.publish({ devices: this.getDevices() });
    }));
  }
  init(e2 = false) {
    return d$3(this, null, function* () {
      this.initialized && !e2 || (!this.initialized && navigator.mediaDevices.addEventListener("devicechange", this.handleDeviceChange), this.initialized = true, yield this.enumerateDevices(), this.logDevices("Init"), yield this.setOutputDevice(), this.eventBus.deviceChange.publish({ devices: this.getDevices() }), this.eventBus.analytics.publish(E$3.deviceChange({ selection: this.getCurrentSelection(), type: "list", devices: this.getDevices() })));
    });
  }
  getDevices() {
    return { audioInput: this.audioInput, audioOutput: this.audioOutput, videoInput: this.videoInput };
  }
  cleanup() {
    this.initialized = false, this.audioInput = [], this.audioOutput = [], this.videoInput = [], this.outputDevice = void 0, navigator.mediaDevices.removeEventListener("devicechange", this.handleDeviceChange);
  }
  createIdentifier(e2) {
    return e2 ? `${e2.deviceId}${e2.groupId}` : "";
  }
  getNewAudioInputDevice() {
    let e2 = this.audioInput.find((t2) => t2.deviceId === "default");
    return e2 ? this.audioInput.find((i2) => i2.deviceId !== "default" && e2.label.includes(i2.label)) : this.audioInput[0];
  }
  setOutputDevice(e2 = false) {
    return d$3(this, null, function* () {
      let t2 = this.getNewAudioInputDevice(), i2 = this.createIdentifier(this.outputDevice);
      this.outputDevice = this.getAudioOutputDeviceMatchingInput(t2), this.outputDevice || (this.outputDevice = this.audioOutput.find((r2) => this.createIdentifier(r2) === i2), this.outputDevice || (this.outputDevice = this.audioOutput.find((r2) => r2.deviceId === "default") || this.audioOutput[0])), yield this.store.updateAudioOutputDevice(this.outputDevice), e2 && i2 !== this.createIdentifier(this.outputDevice) && (this.eventBus.analytics.publish(E$3.deviceChange({ selection: { audioOutput: this.outputDevice }, devices: this.getDevices(), type: "audioOutput" })), this.eventBus.deviceChange.publish({ selection: this.outputDevice, type: "audioOutput", devices: this.getDevices() }));
    });
  }
  getAudioOutputDeviceMatchingInput(e2) {
    var r2, s4;
    let t2 = ((s4 = (r2 = this.store.getConfig()) == null ? void 0 : r2.settings) == null ? void 0 : s4.speakerAutoSelectionBlacklist) || [];
    if (t2 === "all")
      return;
    let i2 = (e2 == null ? void 0 : e2.label.toLowerCase()) || "";
    if (!t2.some((a2) => i2.includes(a2.toLowerCase())) && e2 != null && e2.groupId)
      return this.audioOutput.find((a2) => e2.deviceId !== "default" && a2.label === e2.label);
  }
  logDevices(e2 = "") {
    o$2.d(this.TAG, e2, JSON.stringify({ videoInput: [...this.videoInput], audioInput: [...this.audioInput], audioOutput: [...this.audioOutput], selected: this.getCurrentSelection() }, null, 4));
  }
};
var gt$1 = class {
  constructor(e2, t2) {
    this.deviceManager = e2;
    this.audioSinkManager = t2;
  }
  getVolume() {
    return this.audioSinkManager.getVolume();
  }
  setVolume(e2) {
    if (e2 < 0 || e2 > 100)
      throw Error("Please pass a valid number between 0-100");
    this.audioSinkManager.setVolume(e2);
  }
  getDevice() {
    return this.deviceManager.outputDevice;
  }
  setDevice(e2) {
    return this.deviceManager.updateOutputDevice(e2);
  }
  unblockAutoplay() {
    return d$3(this, null, function* () {
      yield this.audioSinkManager.unblockAutoplay(), yield ee$1.resumeContext();
    });
  }
};
var C$2 = class {
  constructor(e2, t2) {
    this.eventName = e2;
    this.eventEmitter = t2;
    this.publish = (e3) => {
      this.eventEmitter.emit(this.eventName, e3);
    };
    this.subscribe = (e3) => {
      this.eventEmitter.on(this.eventName, e3);
    };
    this.subscribeOnce = (e3) => {
      this.eventEmitter.once(this.eventName, e3);
    };
    this.unsubscribe = (e3) => {
      this.eventEmitter.off(this.eventName, e3);
    };
    this.waitFor = (e3) => this.eventEmitter.waitFor(this.eventName, { filter: e3 });
    this.removeAllListeners = () => {
      this.eventEmitter.removeAllListeners(this.eventName);
    };
  }
};
var St$1 = class {
  constructor() {
    this.eventEmitter = new eventemitter2.exports.EventEmitter2();
    this.deviceChange = new C$2(L$2.DEVICE_CHANGE, this.eventEmitter);
    this.localAudioEnabled = new C$2(L$2.LOCAL_AUDIO_ENABLED, this.eventEmitter);
    this.localVideoEnabled = new C$2(L$2.LOCAL_VIDEO_ENABLED, this.eventEmitter);
    this.statsUpdate = new C$2(L$2.STATS_UPDATE, this.eventEmitter);
    this.trackDegraded = new C$2(L$2.TRACK_DEGRADED, this.eventEmitter);
    this.trackRestored = new C$2(L$2.TRACK_RESTORED, this.eventEmitter);
    this.trackAudioLevelUpdate = new C$2(L$2.TRACK_AUDIO_LEVEL_UPDATE, this.eventEmitter);
    this.audioPluginFailed = new C$2(L$2.AUDIO_PLUGIN_FAILED, this.eventEmitter);
    this.localAudioSilence = new C$2(L$2.LOCAL_AUDIO_SILENCE, this.eventEmitter);
    this.analytics = new C$2(L$2.ANALYTICS, this.eventEmitter);
    this.policyChange = new C$2(L$2.POLICY_CHANGE, this.eventEmitter);
    this.localRoleUpdate = new C$2(L$2.LOCAL_ROLE_UPDATE, this.eventEmitter);
    this.audioTrackUpdate = new C$2(L$2.AUDIO_TRACK_UPDATE, this.eventEmitter);
    this.audioTrackAdded = new C$2(L$2.AUDIO_TRACK_ADDED, this.eventEmitter);
    this.audioTrackRemoved = new C$2(L$2.AUDIO_TRACK_REMOVED, this.eventEmitter);
    this.autoplayError = new C$2(L$2.AUTOPLAY_ERROR, this.eventEmitter);
    this.leave = new C$2(L$2.LEAVE, this.eventEmitter);
  }
};
var $e$1 = class {
  constructor(e2) {
    this.type = e2.type, this.source = e2.source || "regular", this.description = "", e2 instanceof Z$2 ? (this.mute = !e2.enabled, this.track_id = e2.publishedTrackId, this.stream_id = e2.stream.id) : (this.mute = e2.mute, this.track_id = e2.track_id, this.stream_id = e2.stream_id);
  }
};
var vt$1 = class {
  constructor(e2, t2, i2) {
    this.store = e2;
    this.listener = t2;
    this.audioListener = i2;
  }
  handleActiveSpeakers(e2) {
    var s4, a2, c2;
    let t2 = e2["speaker-list"], i2 = t2.map((l2) => ({ audioLevel: l2.level, peer: this.store.getPeerById(l2.peer_id), track: this.store.getTrackById(l2.track_id) }));
    (s4 = this.audioListener) == null || s4.onAudioLevelUpdate(i2), this.store.updateSpeakers(i2);
    let r2 = t2[0];
    if (r2) {
      let l2 = this.store.getPeerById(r2.peer_id);
      (a2 = this.listener) == null || a2.onPeerUpdate(4, l2);
    } else
      (c2 = this.listener) == null || c2.onPeerUpdate(5, null);
  }
};
var Tt = class {
  constructor(e2, t2) {
    this.store = e2;
    this.listener = t2;
    this.TAG = "[BroadcastManager]";
  }
  handleNotification(e2, t2) {
    e2 === "on-broadcast" && this.handleBroadcast(t2);
  }
  handleBroadcast(e2) {
    var h2;
    let t2 = e2.peer, i2 = e2.info, r2 = e2.roles, s4 = this.getSender(t2), a2 = e2.private ? this.store.getLocalPeer() : void 0, c2 = [];
    if (r2 != null && r2.length) {
      let u2 = this.store.getKnownRoles();
      for (let m2 of r2)
        u2[m2] && c2.push(u2[m2]);
    }
    let l2 = new ne$1(M$1(g$1({}, i2), { sender: s4, recipientRoles: c2, recipientPeer: a2, time: new Date(e2.timestamp), id: e2.message_id }));
    o$2.d(this.TAG, `Received Message from sender=${t2 == null ? void 0 : t2.peer_id}: ${l2}`), (h2 = this.listener) == null || h2.onMessageReceived(l2);
  }
  getSender(e2) {
    let t2 = e2 ? this.store.getPeerById(e2.peer_id) : void 0;
    return !t2 && e2 && (t2 = new W$3({ peerId: e2.peer_id, name: e2.info.name, isLocal: false, customerUserId: e2.info.user_id, metadata: e2.info.data })), t2;
  }
};
var ft = class {
  constructor(e2) {
    this.listener = e2;
  }
  handleQualityUpdate(e2) {
    var r2;
    let i2 = e2.peers.map((s4) => ({ peerID: s4.peer_id, downlinkQuality: s4.downlink_score }));
    (r2 = this.listener) == null || r2.onConnectionQualityUpdate(i2);
  }
};
var Ae$1 = class {
  constructor(e2, t2, i2) {
    this.store = e2;
    this.eventBus = t2;
    this.listener = i2;
    this.TAG = "[TrackManager]";
    this.tracksToProcess = /* @__PURE__ */ new Map();
    this.handleTrackAdd = (e3) => {
      o$2.d(this.TAG, "ONTRACKADD", `${e3}`), this.tracksToProcess.set(e3.trackId, e3), this.processPendingTracks();
    };
    this.handleTrackRemovedPermanently = (e3) => {
      o$2.d(this.TAG, "ONTRACKREMOVE", e3), Object.keys(e3.tracks).forEach((i3) => {
        var c2;
        let r2 = this.store.getTrackState(i3);
        if (!r2)
          return;
        let s4 = this.store.getTrackById(i3);
        if (!s4) {
          o$2.d(this.TAG, "Track not found in store");
          return;
        }
        s4.type === "audio" && this.eventBus.audioTrackRemoved.publish(s4), this.store.removeTrack(s4);
        let a2 = this.store.getPeerById(r2.peerId);
        a2 && (this.removePeerTracks(a2, s4), (c2 = this.listener) == null || c2.onTrackUpdate(1, s4, a2));
      });
    };
    this.handleTrackLayerUpdate = (e3) => {
      for (let t3 in e3.tracks) {
        let i3 = e3.tracks[t3], r2 = this.store.getTrackById(t3);
        !r2 || !this.store.getPeerByTrackId(t3) || r2 instanceof H$2 && this.setLayer(r2, i3);
      }
    };
    this.handleTrackUpdate = (e3, t3 = true) => {
      var r2, s4;
      let i3 = this.store.getPeerById(e3.peer.peer_id);
      if (!i3) {
        o$2.d(this.TAG, "Track Update ignored - Peer not added to store");
        return;
      }
      for (let a2 in e3.tracks) {
        let c2 = Object.assign({}, (r2 = this.store.getTrackState(a2)) == null ? void 0 : r2.trackInfo), l2 = e3.tracks[a2], h2 = this.store.getTrackById(a2);
        if (this.store.setTrackState({ peerId: e3.peer.peer_id, trackInfo: g$1(g$1({}, c2), l2) }), !h2 || this.tracksToProcess.has(a2))
          this.processTrackInfo(l2, e3.peer.peer_id, t3), this.processPendingTracks();
        else {
          h2.setEnabled(!l2.mute);
          let u2 = this.processTrackUpdate(h2, c2, l2);
          u2 && ((s4 = this.listener) == null || s4.onTrackUpdate(u2, h2, i3));
        }
      }
    };
    this.processTrackInfo = (e3, t3, i3) => {
    };
    this.processPendingTracks = () => {
      new Map(this.tracksToProcess).forEach((t3) => {
        var s4;
        let i3 = this.store.getTrackState(t3.trackId);
        if (!i3) {
          o$2.d(this.TAG, "TrackState not added to store", `peerId - ${t3.peerId}`, `trackId -${t3.trackId}`);
          return;
        }
        let r2 = this.store.getPeerById(i3.peerId);
        if (!r2) {
          o$2.d(this.TAG, "Peer not added to store, peerId", i3.peerId);
          return;
        }
        t3.source = i3.trackInfo.source, t3.peerId = r2.peerId, t3.logIdentifier = r2.name, t3.setEnabled(!i3.trackInfo.mute), this.addAudioTrack(r2, t3), this.addVideoTrack(r2, t3), t3.type === "audio" ? this.eventBus.audioTrackAdded.publish({ track: t3, peer: r2 }) : (s4 = this.listener) == null || s4.onTrackUpdate(0, t3, r2), this.tracksToProcess.delete(t3.trackId);
      });
    };
  }
  handleTrackMetadataAdd(e2) {
    o$2.d(this.TAG, "TRACK_METADATA_ADD", JSON.stringify(e2, null, 2));
    for (let t2 in e2.tracks) {
      let i2 = e2.tracks[t2];
      this.store.setTrackState({ peerId: e2.peer.peer_id, trackInfo: i2 });
    }
    this.processPendingTracks();
  }
  handleTrackRemove(e2) {
    if (o$2.d(this.TAG, "ONTRACKREMOVE", `${e2}`), !this.store.getTrackState(e2.trackId))
      return;
    if (!this.store.hasTrack(e2)) {
      o$2.d(this.TAG, "Track not found in store");
      return;
    }
    e2.type === "audio" && this.eventBus.audioTrackRemoved.publish(e2);
  }
  setLayer(e2, t2) {
    var s4, a2;
    let i2 = this.store.getPeerByTrackId(e2.trackId);
    if (!i2)
      return;
    e2.setLayerFromServer(t2) ? (s4 = this.listener) == null || s4.onTrackUpdate(5, e2, i2) : (a2 = this.listener) == null || a2.onTrackUpdate(6, e2, i2);
  }
  removePeerTracks(e2, t2) {
    let i2 = e2.auxiliaryTracks.indexOf(t2);
    i2 > -1 ? (e2.auxiliaryTracks.splice(i2, 1), o$2.d(this.TAG, "auxiliary track removed", `${t2}`)) : t2.type === "audio" && e2.audioTrack === t2 ? (e2.audioTrack = void 0, o$2.d(this.TAG, "audio track removed", `${t2}`)) : t2.type === "video" && e2.videoTrack === t2 && (e2.videoTrack = void 0, o$2.d(this.TAG, "video track removed", `${t2}`));
  }
  addAudioTrack(e2, t2) {
    var i2;
    t2.type === "audio" && (t2.source === "regular" && (!e2.audioTrack || ((i2 = e2.audioTrack) == null ? void 0 : i2.trackId) === t2.trackId) ? e2.audioTrack = t2 : e2.auxiliaryTracks.push(t2), this.store.addTrack(t2), o$2.d(this.TAG, "audio track added", `${t2}`));
  }
  addVideoTrack(e2, t2) {
    if (t2.type !== "video")
      return;
    let i2 = t2, r2 = this.store.getSimulcastDefinitionsForPeer(e2, i2.source);
    if (i2.setSimulcastDefinitons(r2), this.addAsPrimaryVideoTrack(e2, i2))
      e2.videoTrack ? e2.videoTrack.replaceTrack(i2) : e2.videoTrack = i2, this.store.addTrack(e2.videoTrack);
    else {
      let s4 = e2.auxiliaryTracks.findIndex((a2) => a2.trackId === i2.trackId);
      s4 === -1 ? (e2.auxiliaryTracks.push(i2), this.store.addTrack(i2)) : (e2.auxiliaryTracks[s4].replaceTrack(i2), this.store.addTrack(e2.auxiliaryTracks[s4]));
    }
    o$2.d(this.TAG, "video track added", `${t2}`);
  }
  addAsPrimaryVideoTrack(e2, t2) {
    var i2;
    return t2.source === "regular" && (!e2.videoTrack || ((i2 = e2.videoTrack) == null ? void 0 : i2.trackId) === t2.trackId);
  }
  processTrackUpdate(e2, t2, i2) {
    let r2;
    return t2.mute !== i2.mute ? (r2 = i2.mute ? 2 : 3, e2.type === "audio" && this.eventBus.audioTrackUpdate.publish({ track: e2, enabled: !i2.mute })) : t2.description !== i2.description && (r2 = 4), r2;
  }
};
var Et = class extends Ae$1 {
  constructor(t2, i2, r2, s4) {
    super(t2, i2, s4);
    this.transport = r2;
    this.TAG = "[OnDemandTrackManager]";
    this.processTrackInfo = (t3, i3, r3 = true) => {
      var h2;
      if (t3.type !== "video")
        return;
      let s5 = this.store.getPeerById(i3);
      if (!s5 || !this.isPeerRoleSubscribed(i3)) {
        o$2.d(this.TAG, `no peer in store for peerId: ${i3}`);
        return;
      }
      let a2 = new K$2(new MediaStream(), this.transport.getSubscribeConnection()), c2 = j$2.getEmptyVideoTrack();
      c2.enabled = !t3.mute;
      let l2 = new H$2(a2, c2, t3.source);
      l2.setTrackId(t3.track_id), l2.peerId = s5.peerId, l2.logIdentifier = s5.name, this.addVideoTrack(s5, l2), r3 && ((h2 = this.listener) == null || h2.onTrackUpdate(0, s5.videoTrack, s5));
    };
  }
  handleTrackMetadataAdd(t2) {
    super.handleTrackMetadataAdd(t2);
    for (let i2 in t2.tracks)
      t2.tracks[i2].type === "video" && this.processTrackInfo(t2.tracks[i2], t2.peer.peer_id);
  }
  handleTrackRemove(t2) {
    super.handleTrackRemove(t2), t2.type === "video" && t2.source === "regular" && this.processTrackInfo({ track_id: t2.trackId, mute: !t2.enabled, type: t2.type, source: t2.source, stream_id: t2.stream.id }, t2.peerId, false);
  }
  addAsPrimaryVideoTrack(t2, i2) {
    return i2.source !== "regular" ? false : !t2.videoTrack || t2.videoTrack.trackId === i2.trackId ? true : t2.videoTrack.enabled && B$2(t2.videoTrack.nativeTrack);
  }
  isPeerRoleSubscribed(t2) {
    var s4, a2, c2, l2;
    if (!t2)
      return true;
    let i2 = this.store.getLocalPeer(), r2 = this.store.getPeerById(t2);
    return r2 && ((l2 = (a2 = (s4 = i2 == null ? void 0 : i2.role) == null ? void 0 : s4.subscribeParams) == null ? void 0 : a2.subscribeToRoles) == null ? void 0 : l2.includes((c2 = r2.role) == null ? void 0 : c2.name));
  }
};
var kt$1 = class {
  constructor(e2, t2, i2, r2) {
    this.store = e2;
    this.peerManager = t2;
    this.trackManager = i2;
    this.listener = r2;
    this.TAG = "[PeerListManager]";
    this.handleInitialPeerList = (e3) => {
      let t3 = Object.values(e3.peers);
      this.peerManager.handlePeerList(t3);
    };
    this.handleReconnectPeerList = (e3) => {
      this.handleRepeatedPeerList(e3.peers);
    };
    this.handlePreviewRoomState = (e3) => {
      if (!this.store.hasRoleDetailsArrived())
        return;
      let t3 = e3.peers;
      if (t3 == null) {
        e3.peer_count === 0 && this.handleRepeatedPeerList({});
        return;
      }
      Object.keys(t3).forEach((i3) => {
        t3[i3].tracks = {}, t3[i3].is_from_room_state = true;
      }), this.handleRepeatedPeerList(t3);
    };
    this.handleRepeatedPeerList = (e3) => {
      let t3 = this.store.getRemotePeers(), i3 = Object.values(e3), r3 = t3.filter((a2) => !e3[a2.peerId]);
      r3.length > 0 && o$2.d(this.TAG, `${r3}`), r3.forEach((a2) => {
        var l2;
        let c2 = { peer_id: a2.peerId, role: ((l2 = a2.role) == null ? void 0 : l2.name) || "", info: { name: a2.name, data: a2.metadata || "", user_id: a2.customerUserId || "" }, tracks: {} };
        this.peerManager.handlePeerLeave(c2);
      });
      let s4 = [];
      i3.forEach((a2) => {
        let c2 = this.store.getPeerById(a2.peer_id), l2 = Object.values(a2.tracks);
        c2 && (this.store.getPeerTracks(c2.peerId).forEach((u2) => {
          var m2;
          a2.tracks[u2.trackId] || (this.removePeerTrack(c2, u2.trackId), (m2 = this.listener) == null || m2.onTrackUpdate(1, u2, c2));
        }), l2.forEach((u2) => {
          this.store.getTrackById(u2.track_id) || this.store.setTrackState({ peerId: c2.peerId, trackInfo: u2 });
        }), this.trackManager.handleTrackUpdate({ peer: { info: a2.info, peer_id: a2.peer_id }, tracks: a2.tracks }, false), this.peerManager.handlePeerUpdate(a2)), s4.push(a2);
      }), s4.length > 0 && this.peerManager.handlePeerList(s4);
    };
  }
  handleNotification(e2, t2, i2) {
    if (e2 === "peer-list") {
      let r2 = t2;
      i2 ? (o$2.d(this.TAG, "RECONNECT_PEER_LIST event", JSON.stringify(r2, null, 2)), this.handleReconnectPeerList(r2)) : (o$2.d(this.TAG, "PEER_LIST event", JSON.stringify(r2, null, 2)), this.handleInitialPeerList(r2));
    } else if (e2 === "room-state") {
      let r2 = t2;
      this.handlePreviewRoomState(r2);
    }
  }
  removePeerTrack(e2, t2) {
    var i2, r2;
    if (o$2.d(this.TAG, `removing track - ${t2} from ${e2}`), ((i2 = e2.audioTrack) == null ? void 0 : i2.trackId) === t2)
      e2.audioTrack = void 0;
    else if (((r2 = e2.videoTrack) == null ? void 0 : r2.trackId) === t2)
      e2.videoTrack = void 0;
    else {
      let s4 = e2.auxiliaryTracks.findIndex((a2) => a2.trackId === t2);
      s4 >= 0 && e2.auxiliaryTracks.splice(s4, 1);
    }
  }
};
var A$1 = (n9) => n9 ? new Date(n9) : void 0;
var Mt = class {
  constructor(e2, t2, i2) {
    this.store = e2;
    this.trackManager = t2;
    this.listener = i2;
    this.TAG = "[PeerManager]";
    this.handlePeerList = (e3) => {
      var r2, s4;
      if (e3.length === 0) {
        (r2 = this.listener) == null || r2.onPeerUpdate(9, []);
        return;
      }
      let t3 = [], i3 = new Set(e3.map((a2) => a2.peer_id));
      this.store.getRemotePeers().forEach(({ peerId: a2, fromRoomState: c2 }) => {
        !i3.has(a2) && c2 && this.store.removePeer(a2);
      });
      for (let a2 of e3)
        t3.push(this.makePeer(a2));
      (s4 = this.listener) == null || s4.onPeerUpdate(9, t3), this.trackManager.processPendingTracks();
    };
    this.handlePeerJoin = (e3) => {
      var i3;
      let t3 = this.makePeer(e3);
      (i3 = this.listener) == null || i3.onPeerUpdate(0, t3), this.trackManager.processPendingTracks();
    };
    this.handlePeerLeave = (e3) => {
      var i3, r2, s4, a2;
      let t3 = this.store.getPeerById(e3.peer_id);
      this.store.removePeer(e3.peer_id), o$2.d(this.TAG, "PEER_LEAVE", e3.peer_id, `remainingPeers=${this.store.getPeers().length}`), t3 && (t3.audioTrack && ((i3 = this.listener) == null || i3.onTrackUpdate(1, t3.audioTrack, t3)), t3.videoTrack && ((r2 = this.listener) == null || r2.onTrackUpdate(1, t3.videoTrack, t3)), (s4 = t3.auxiliaryTracks) == null || s4.forEach((c2) => {
        var l2;
        (l2 = this.listener) == null || l2.onTrackUpdate(1, c2, t3);
      }), (a2 = this.listener) == null || a2.onPeerUpdate(1, t3));
    };
  }
  handleNotification(e2, t2) {
    switch (e2) {
      case "on-peer-join": {
        let i2 = t2;
        this.handlePeerJoin(i2);
        break;
      }
      case "on-peer-leave": {
        let i2 = t2;
        this.handlePeerLeave(i2);
        break;
      }
      case "on-peer-update":
        this.handlePeerUpdate(t2);
        break;
    }
  }
  handlePeerUpdate(e2) {
    var i2;
    let t2 = this.store.getPeerById(e2.peer_id);
    if (t2) {
      if (t2.role && t2.role.name !== e2.role) {
        let r2 = this.store.getPolicyForRole(e2.role);
        t2.updateRole(r2), this.updateSimulcastLayersForPeer(t2), (i2 = this.listener) == null || i2.onPeerUpdate(8, t2);
      }
      this.handlePeerInfoUpdate(g$1({ peer: t2 }, e2.info));
    }
  }
  handlePeerInfoUpdate({ peer: e2, name: t2, data: i2 }) {
    var r2, s4;
    e2 && (t2 && e2.name !== t2 && (e2.updateName(t2), (r2 = this.listener) == null || r2.onPeerUpdate(10, e2)), i2 && e2.metadata !== i2 && (e2.updateMetadata(i2), (s4 = this.listener) == null || s4.onPeerUpdate(11, e2)));
  }
  makePeer(e2) {
    let t2 = this.store.getPeerById(e2.peer_id);
    t2 || (t2 = new we$1({ peerId: e2.peer_id, name: e2.info.name, customerUserId: e2.info.user_id, metadata: e2.info.data, role: this.store.getPolicyForRole(e2.role), joinedAt: A$1(e2.joined_at), fromRoomState: !!e2.is_from_room_state }), this.store.addPeer(t2), o$2.d(this.TAG, "adding to the peerList", `${t2}`));
    for (let i2 in e2.tracks) {
      let r2 = e2.tracks[i2];
      this.store.setTrackState({ peerId: e2.peer_id, trackInfo: r2 }), r2.type === "video" && this.trackManager.processTrackInfo(r2, e2.peer_id, false);
    }
    return t2;
  }
  updateSimulcastLayersForPeer(e2) {
    this.store.getPeerTracks(e2.peerId).forEach((t2) => {
      if (t2.type === "video" && ["regular", "screen"].includes(t2.source)) {
        let i2 = t2, r2 = this.store.getSimulcastDefinitionsForPeer(e2, i2.source);
        i2.setSimulcastDefinitons(r2);
      }
    });
  }
};
var yt$1 = class {
  constructor(e2, t2) {
    this.store = e2;
    this.eventBus = t2;
  }
  handlePolicyChange(e2) {
    let t2 = this.store.getLocalPeer();
    if (t2 && !t2.role) {
      let r2 = e2.known_roles[e2.name];
      t2.updateRole(r2);
    }
    this.store.setKnownRoles(e2);
    let i2 = this.store.getRoom();
    if (i2 ? i2.templateId = e2.template_id : o$2.w("[PolicyChangeManager]", "on policy change - room not present"), t2 != null && t2.role && t2.role.name !== e2.name) {
      let r2 = this.store.getPolicyForRole(e2.name), s4 = t2.role;
      t2.updateRole(r2), this.eventBus.localRoleUpdate.publish({ oldRole: s4, newRole: r2 });
    }
    this.eventBus.policyChange.publish(e2);
  }
};
var Pt$1 = class {
  constructor(e2, t2, i2) {
    this.store = e2;
    this.transport = t2;
    this.listener = i2;
  }
  handleNotification(e2, t2) {
    switch (e2) {
      case "on-poll-start": {
        this.handlePollStart(t2);
        break;
      }
      case "on-poll-stop": {
        this.handlePollStop(t2);
        break;
      }
      case "on-poll-stats":
        this.handlePollStats(t2);
        break;
    }
  }
  handlePollStart(e2) {
    return d$3(this, null, function* () {
      var i2;
      let t2 = [];
      for (let r2 of e2.polls) {
        let s4 = yield this.transport.getPollQuestions({ poll_id: r2.poll_id, index: 0, count: 50 }), a2 = { id: r2.poll_id, title: r2.title, startedBy: r2.started_by, createdBy: r2.created_by, anonymous: r2.anonymous, type: r2.type, duration: r2.duration, locked: r2.locked, mode: r2.mode, visibility: r2.visibility, rolesThatCanVote: r2.vote || [], rolesThatCanViewResponses: r2.responses || [], state: r2.state, stoppedBy: r2.stopped_by, startedAt: A$1(r2.started_at), stoppedAt: A$1(r2.stopped_at), createdAt: A$1(r2.created_at), questions: s4.questions.map(({ question: c2, options: l2, answer: h2 }) => M$1(g$1({}, c2), { options: l2, answer: h2 })) };
        t2.push(a2), this.store.setPoll(a2);
      }
      (i2 = this.listener) == null || i2.onPollsUpdate(1, t2);
    });
  }
  handlePollStop(e2) {
    return d$3(this, null, function* () {
      var i2;
      let t2 = [];
      for (let r2 of e2.polls) {
        let s4 = this.store.getPoll(r2.poll_id);
        if (s4) {
          s4.state = "stopped", s4.stoppedAt = A$1(r2.stopped_at), s4.stoppedBy = r2.stopped_by;
          let a2 = yield this.transport.getPollResult({ poll_id: r2.poll_id });
          this.updatePollResult(s4, a2), t2.push(s4);
        }
      }
      t2.length > 0 && ((i2 = this.listener) == null || i2.onPollsUpdate(2, t2));
    });
  }
  handlePollStats(e2) {
    return d$3(this, null, function* () {
      var i2, r2;
      let t2 = [];
      for (let s4 of e2.polls) {
        let a2 = this.store.getPoll(s4.poll_id);
        if (!a2)
          return;
        this.updatePollResult(a2, s4), (i2 = (yield this.transport.getPollResponses({ poll_id: s4.poll_id, index: 0, count: 50, self: false })).responses) == null || i2.forEach(({ response: l2, peer: h2, final: u2 }) => {
          var T2;
          let m2 = (T2 = a2 == null ? void 0 : a2.questions) == null ? void 0 : T2.find((y2) => y2.index === l2.question);
          if (!m2)
            return;
          let S2 = { id: l2.response_id, questionIndex: l2.question, option: l2.option, options: l2.options, text: l2.text, responseFinal: u2, peer: { peerid: h2.peerid, userHash: h2.hash, userid: h2.userid, username: h2.username }, skipped: l2.skipped, type: l2.type, update: l2.update };
          Array.isArray(m2.responses) && m2.responses.length > 0 ? m2.responses.find(({ id: y2 }) => y2 === S2.id) || m2.responses.push(S2) : m2.responses = [S2];
        }), t2.push(a2);
      }
      t2.length > 0 && ((r2 = this.listener) == null || r2.onPollsUpdate(3, t2));
    });
  }
  updatePollResult(e2, t2) {
    var i2;
    e2.result = g$1({}, e2.result), e2.result.totalUsers = t2.user_count, e2.result.maxUsers = t2.max_user, e2.result.totalResponses = t2.total_response, (i2 = t2.questions) == null || i2.forEach((r2) => {
      var a2, c2;
      let s4 = (a2 = e2.questions) == null ? void 0 : a2.find((l2) => l2.index === r2.question);
      s4 && (s4.result = g$1({}, s4.result), s4.result.correctResponses = r2.correct, s4.result.skippedCount = r2.skipped, s4.result.totalResponses = r2.total, (c2 = r2.options) == null || c2.forEach((l2, h2) => {
        var m2;
        let u2 = (m2 = s4.options) == null ? void 0 : m2[h2];
        u2 && u2.voteCount !== l2 && (u2.voteCount = l2);
      }));
    });
  }
};
var At$1 = class {
  constructor(e2, t2) {
    this.store = e2;
    this.listener = t2;
  }
  handleNotification(e2, t2) {
    switch (e2) {
      case "on-role-change-request":
        this.handleRoleChangeRequest(t2);
        break;
      case "on-track-update-request":
        this.handleTrackUpdateRequest(t2);
        break;
      case "on-change-track-mute-state-request":
        this.handleChangeTrackStateRequest(t2);
        break;
      default:
        return;
    }
  }
  handleRoleChangeRequest(e2) {
    var i2;
    let t2 = { requestedBy: e2.requested_by ? this.store.getPeerById(e2.requested_by) : void 0, role: this.store.getPolicyForRole(e2.role), token: e2.token };
    (i2 = this.listener) == null || i2.onRoleChangeRequest(t2);
  }
  handleTrackUpdateRequest(e2) {
    let { requested_by: t2, track_id: i2, mute: r2 } = e2, s4 = t2 ? this.store.getPeerById(t2) : void 0, a2 = this.store.getLocalPeerTracks().find((l2) => l2.publishedTrackId === i2);
    if (!a2)
      return;
    let c2 = () => {
      var l2;
      (l2 = this.listener) == null || l2.onChangeTrackStateRequest({ requestedBy: s4, track: a2, enabled: !r2 });
    };
    if (r2) {
      if (a2.enabled === !r2)
        return;
      a2.setEnabled(!r2).then(c2);
    } else
      c2();
  }
  handleChangeTrackStateRequest(e2) {
    var h2;
    let { type: t2, source: i2, value: r2, requested_by: s4 } = e2, a2 = s4 ? this.store.getPeerById(s4) : void 0, c2 = !r2, l2 = this.getTracksToBeUpdated({ type: t2, source: i2, enabled: c2 });
    if (l2.length !== 0)
      if (c2)
        (h2 = this.listener) == null || h2.onChangeMultiTrackStateRequest({ requestedBy: a2, tracks: l2, type: t2, source: i2, enabled: true });
      else {
        let u2 = [];
        for (let m2 of l2)
          u2.push(m2.setEnabled(false));
        Promise.all(u2).then(() => {
          var m2;
          (m2 = this.listener) == null || m2.onChangeMultiTrackStateRequest({ requestedBy: a2, tracks: l2, enabled: false });
        });
      }
  }
  getTracksToBeUpdated({ type: e2, source: t2, enabled: i2 }) {
    let s4 = this.store.getLocalPeerTracks();
    return e2 && (s4 = s4.filter((a2) => a2.type === e2)), t2 && (s4 = s4.filter((a2) => a2.source === t2)), s4.filter((a2) => a2.enabled !== i2);
  }
};
var bt = class {
  constructor(e2, t2) {
    this.store = e2;
    this.listener = t2;
    this.TAG = "[RoomUpdateManager]";
  }
  handleNotification(e2, t2) {
    switch (e2) {
      case "peer-list":
        this.onRoomState(t2.room);
        break;
      case "on-rtmp-start":
        this.onRTMPStart(t2);
        break;
      case "on-rtmp-stop":
        this.onRTMPStop(t2);
        break;
      case "on-record-start":
        this.onRecordingStart(t2);
        break;
      case "on-record-stop":
        this.onRecordingStop(t2);
        break;
      case "room-state":
        this.handlePreviewRoomState(t2);
        break;
      default:
        this.onHLS(e2, t2);
        break;
    }
  }
  handlePreviewRoomState(e2) {
    let { room: t2 } = e2;
    this.onRoomState(t2, e2.peer_count);
  }
  onRoomState(e2, t2) {
    var h2, u2, m2;
    let { recording: i2, streaming: r2, session_id: s4, started_at: a2, name: c2 } = e2, l2 = this.store.getRoom();
    if (!l2) {
      o$2.w(this.TAG, "on room state - room not present");
      return;
    }
    l2.peerCount = t2, l2.name = c2, l2.recording.server.running = !!(i2 != null && i2.sfu.enabled), l2.recording.browser.running = !!(i2 != null && i2.browser.enabled), l2.rtmp.running = !!((h2 = r2 == null ? void 0 : r2.rtmp) != null && h2.enabled), l2.rtmp.startedAt = A$1((u2 = r2 == null ? void 0 : r2.rtmp) == null ? void 0 : u2.started_at), l2.recording.server.startedAt = A$1(i2 == null ? void 0 : i2.sfu.started_at), l2.recording.browser.startedAt = A$1(i2 == null ? void 0 : i2.browser.started_at), l2.recording.hls = this.getPeerListHLSRecording(i2), l2.hls = this.convertHls(r2 == null ? void 0 : r2.hls), l2.sessionId = s4, l2.startedAt = A$1(a2), (m2 = this.listener) == null || m2.onRoomUpdate("RECORDING_STATE_UPDATED", l2);
  }
  onRTMPStart(e2) {
    var t2;
    this.setRTMPStatus(!((t2 = e2.error) != null && t2.code), e2);
  }
  onRTMPStop(e2) {
    this.setRTMPStatus(false, e2);
  }
  onRecordingStart(e2) {
    var t2;
    this.setRecordingStatus(!((t2 = e2.error) != null && t2.code), e2);
  }
  onRecordingStop(e2) {
    this.setRecordingStatus(false, e2);
  }
  onHLS(e2, t2) {
    var r2, s4;
    if (!["on-hls-start", "on-hls-stop"].includes(e2))
      return;
    let i2 = this.store.getRoom();
    if (!i2) {
      o$2.w(this.TAG, "on hls - room not present");
      return;
    }
    t2.enabled = e2 === "on-hls-start" && !((r2 = t2.error) != null && r2.code), i2.hls = this.convertHls(t2), i2.recording.hls = this.getHLSRecording(t2), (s4 = this.listener) == null || s4.onRoomUpdate("HLS_STREAMING_STATE_UPDATED", i2);
  }
  convertHls(e2) {
    var i2;
    let t2 = { running: !!(e2 != null && e2.enabled), variants: [], error: this.toSdkError(e2 == null ? void 0 : e2.error) };
    return (i2 = e2 == null ? void 0 : e2.variants) == null || i2.forEach((r2) => {
      t2.variants.push({ meetingURL: r2.meeting_url, url: r2.url, metadata: r2.metadata, startedAt: A$1(r2.started_at) });
    }), t2;
  }
  getHLSRecording(e2) {
    var i2, r2, s4;
    let t2 = { running: false };
    return e2 != null && e2.hls_recording && (t2 = { running: !!(e2 != null && e2.enabled), singleFilePerLayer: !!((i2 = e2.hls_recording) != null && i2.single_file_per_layer), hlsVod: !!((r2 = e2.hls_recording) != null && r2.hls_vod), startedAt: A$1((s4 = e2 == null ? void 0 : e2.variants) == null ? void 0 : s4[0].started_at), error: this.toSdkError(e2.error) }), t2;
  }
  getPeerListHLSRecording(e2) {
    var i2, r2;
    let t2 = e2 == null ? void 0 : e2.hls;
    return { running: !!(t2 != null && t2.enabled), startedAt: A$1(t2 == null ? void 0 : t2.started_at), singleFilePerLayer: !!((i2 = t2 == null ? void 0 : t2.config) != null && i2.single_file_per_layer), hlsVod: !!((r2 = t2 == null ? void 0 : t2.config) != null && r2.hls_vod) };
  }
  setRecordingStatus(e2, t2) {
    var s4;
    let i2 = this.store.getRoom();
    if (!i2) {
      o$2.w(this.TAG, `set recording status running=${e2} - room not present`);
      return;
    }
    let r2;
    t2.type === "sfu" ? (i2.recording.server = { running: e2, startedAt: e2 ? A$1(t2.started_at) : void 0, error: this.toSdkError(t2.error) }, r2 = "SERVER_RECORDING_STATE_UPDATED") : (i2.recording.browser = { running: e2, startedAt: e2 ? A$1(t2.started_at) : void 0, error: this.toSdkError(t2.error) }, r2 = "BROWSER_RECORDING_STATE_UPDATED"), (s4 = this.listener) == null || s4.onRoomUpdate(r2, i2);
  }
  setRTMPStatus(e2, t2) {
    var r2;
    let i2 = this.store.getRoom();
    if (!i2) {
      o$2.w(this.TAG, "on policy change - room not present");
      return;
    }
    i2.rtmp = { running: e2, startedAt: e2 ? A$1(t2.started_at) : void 0, error: this.toSdkError(t2.error) }, (r2 = this.listener) == null || r2.onRoomUpdate("RTMP_STREAMING_STATE_UPDATED", i2);
  }
  toSdkError(e2) {
    if (!(e2 != null && e2.code))
      return;
    let t2 = e2.message || "error in streaming/recording", i2 = new v$3(e2.code, "ServerErrors", "NONE", t2, t2);
    return o$2.e(this.TAG, "error in streaming/recording", i2), i2;
  }
};
var It$1 = class {
  constructor(e2, t2) {
    this.store = e2;
    this.listener = t2;
  }
  handleNotification(e2, t2) {
    e2 === "on-metadata-change" && this.handleMetadataChange(t2);
  }
  handleMetadataChange(e2) {
    var i2;
    let t2 = e2.values.map((r2) => ({ key: r2.key, value: r2.data, updatedAt: A$1(r2.updated_at), updatedBy: r2.updated_by ? this.store.getPeerById(r2.updated_by) : void 0 }));
    (i2 = this.listener) == null || i2.onSessionStoreUpdate(t2);
  }
};
var Rt$1 = class {
  constructor(e2, t2, i2, r2, s4, a2) {
    this.store = e2;
    this.transport = i2;
    this.listener = r2;
    this.audioListener = s4;
    this.connectionQualityListener = a2;
    this.TAG = "[HMSNotificationManager]";
    this.hasConsistentRoomStateArrived = false;
    this.ignoreNotification = (e3) => {
      if (e3 === "peer-list")
        this.hasConsistentRoomStateArrived = true;
      else if (e3 === "room-state")
        return this.hasConsistentRoomStateArrived;
      return false;
    };
    this.handleTrackAdd = (e3) => {
      this.trackManager.handleTrackAdd(e3);
    };
    this.handleTrackRemove = (e3) => {
      this.trackManager.handleTrackRemove(e3);
    };
    this.updateLocalPeer = ({ name: e3, metadata: t3 }) => {
      let i3 = this.store.getLocalPeer();
      this.peerManager.handlePeerInfoUpdate({ peer: i3, name: e3, data: t3 });
    };
    let c2 = this.transport.isFlagEnabled("onDemandTracks");
    this.trackManager = c2 ? new Et(this.store, t2, this.transport, this.listener) : new Ae$1(this.store, t2, this.listener), this.peerManager = new Mt(this.store, this.trackManager, this.listener), this.peerListManager = new kt$1(this.store, this.peerManager, this.trackManager, this.listener), this.broadcastManager = new Tt(this.store, this.listener), this.policyChangeManager = new yt$1(this.store, t2), this.requestManager = new At$1(this.store, this.listener), this.activeSpeakerManager = new vt$1(this.store, this.listener, this.audioListener), this.connectionQualityManager = new ft(this.connectionQualityListener), this.roomUpdateManager = new bt(this.store, this.listener), this.sessionMetadataManager = new It$1(this.store, this.listener), this.pollsManager = new Pt$1(this.store, this.transport, this.listener);
  }
  setListener(e2) {
    this.listener = e2, this.trackManager.listener = e2, this.peerManager.listener = e2, this.peerListManager.listener = e2, this.broadcastManager.listener = e2, this.requestManager.listener = e2, this.activeSpeakerManager.listener = e2, this.roomUpdateManager.listener = e2, this.sessionMetadataManager.listener = e2, this.pollsManager.listener = e2;
  }
  setAudioListener(e2) {
    this.audioListener = e2, this.activeSpeakerManager.audioListener = e2;
  }
  setConnectionQualityListener(e2) {
    this.connectionQualityListener = e2, this.connectionQualityManager.listener = e2;
  }
  handleNotification(e2, t2 = false) {
    var s4, a2;
    let i2 = e2.method, r2 = e2.params;
    ["active-speakers", "sfu-stats", "on-connection-quality-update", void 0].includes(i2) || o$2.d(this.TAG, `Received notification - ${i2}`, { notification: r2 }), i2 === "sfu-stats" && (s4 = window.HMS) != null && s4.ON_SFU_STATS && typeof ((a2 = window.HMS) == null ? void 0 : a2.ON_SFU_STATS) == "function" && window.HMS.ON_SFU_STATS(e2.params), !this.ignoreNotification(i2) && (this.roomUpdateManager.handleNotification(i2, r2), this.peerManager.handleNotification(i2, r2), this.requestManager.handleNotification(i2, r2), this.peerListManager.handleNotification(i2, r2, t2), this.broadcastManager.handleNotification(i2, r2), this.sessionMetadataManager.handleNotification(i2, r2), this.pollsManager.handleNotification(i2, r2), this.handleIsolatedMethods(i2, r2));
  }
  handleIsolatedMethods(e2, t2) {
    switch (e2) {
      case "on-track-add": {
        this.trackManager.handleTrackMetadataAdd(t2);
        break;
      }
      case "on-track-update": {
        this.trackManager.handleTrackUpdate(t2);
        break;
      }
      case "on-track-remove": {
        if (!t2.peer) {
          o$2.d(this.TAG, `Ignoring sfu notification - ${e2}`, { notification: t2 });
          return;
        }
        this.trackManager.handleTrackRemovedPermanently(t2);
        break;
      }
      case "on-track-layer-update": {
        this.trackManager.handleTrackLayerUpdate(t2);
        break;
      }
      case "active-speakers":
        this.activeSpeakerManager.handleActiveSpeakers(t2);
        break;
      case "on-connection-quality-update":
        this.connectionQualityManager.handleQualityUpdate(t2);
        break;
      case "on-policy-change":
        this.policyChangeManager.handlePolicyChange(t2);
        break;
    }
  }
};
var be$1 = class {
  constructor(e2) {
    this.TAG = "[AudioContextManager]";
    this.audioContext = new AudioContext(), this.source = this.audioContext.createMediaElementSource(e2), this.source.connect(this.audioContext.destination);
  }
  resumeContext() {
    return d$3(this, null, function* () {
      this.audioContext.state === "suspended" && (yield this.audioContext.resume(), o$2.d(this.TAG, "AudioContext is resumed"));
    });
  }
  getAudioTrack() {
    return this.destinationNode && this.source.disconnect(this.destinationNode), this.destinationNode = this.audioContext.createMediaStreamDestination(), this.source.connect(this.destinationNode), this.destinationNode.stream.getAudioTracks()[0];
  }
  cleanup() {
    this.audioContext.state !== "closed" && this.audioContext.close().catch((e2) => {
      o$2.d(this.TAG, "AudioContext close error", e2.message);
    });
  }
};
var ae$1 = class extends eventemitter2.exports.EventEmitter2 {
  on(e2, t2) {
    return super.on(e2, t2);
  }
  off(e2, t2) {
    return super.off(e2, t2);
  }
  emit(e2, t2) {
    return super.emit(e2, t2);
  }
  listeners(e2) {
    return super.listeners(e2);
  }
};
var Ct$1 = class extends ae$1 {
  constructor() {
    super(...arguments);
    this.audioElement = null;
    this.TAG = "[PlaylistAudioManager]";
    this.seeked = false;
  }
  play(t2) {
    return d$3(this, null, function* () {
      return this.audioElement = this.getAudioElement(), new Promise((i2, r2) => {
        this.audioElement = this.getAudioElement(), this.audioElement.src = t2, this.seeked = false, this.audioElement.onerror = () => {
          let s4 = `Error loading ${t2}`;
          o$2.e(this.TAG, s4), this.stop(), r2(s4);
        }, this.audioElement.oncanplaythrough = () => d$3(this, null, function* () {
          try {
            if (!this.audioElement)
              return;
            if (this.audioContextManager.resumeContext(), this.track)
              this.seeked ? this.seeked = false : (yield this.audioElement.play(), i2([this.track]));
            else {
              yield this.audioElement.play();
              let s4 = this.audioContextManager.getAudioTrack();
              this.track = s4, i2([s4]);
            }
          } catch (s4) {
            o$2.e(this.TAG, "Error playing audio", t2, s4.message), r2(s4);
          }
        }), this.audioElement.onseeked = () => {
          this.seeked = true;
        };
      });
    });
  }
  getTracks() {
    return this.track ? [this.track.id] : [];
  }
  getElement() {
    return this.audioElement || (this.audioElement = this.getAudioElement()), this.audioElement;
  }
  stop() {
    var t2, i2, r2;
    (t2 = this.audioElement) == null || t2.pause(), (i2 = this.audioElement) == null || i2.removeAttribute("src"), this.audioElement = null, (r2 = this.audioContextManager) == null || r2.cleanup(), this.track = void 0;
  }
  getAudioElement() {
    if (this.audioElement)
      return this.audioElement;
    let t2 = document.createElement("audio");
    return t2.crossOrigin = "anonymous", t2.addEventListener("timeupdate", (i2) => this.emit("progress", i2)), t2.addEventListener("ended", () => {
      this.emit("ended", null);
    }), this.audioContextManager = new be$1(t2), t2;
  }
};
var wt$1 = class extends ae$1 {
  constructor() {
    super(...arguments);
    this.TAG = "[PlaylistVideoManager]";
    this.videoElement = null;
    this.canvasContext = null;
    this.tracks = [];
    this.DEFAUL_FPS = 24;
    this.seeked = false;
    this.drawImage = () => {
      var t2, i2, r2;
      this.videoElement && !this.videoElement.paused && !this.videoElement.ended && ((r2 = this.canvasContext) == null || r2.drawImage(this.videoElement, 0, 0, (t2 = this.canvas) == null ? void 0 : t2.width, (i2 = this.canvas) == null ? void 0 : i2.height), this.timer = setTimeout(() => {
        this.drawImage();
      }, 1e3 / this.DEFAUL_FPS));
    };
  }
  play(t2) {
    return this.videoElement = this.getVideoElement(), this.createCanvas(), new Promise((i2, r2) => {
      this.videoElement = this.getVideoElement(), this.videoElement.src = t2, this.seeked = false, this.videoElement.onerror = () => {
        let s4 = `Error loading ${t2}`;
        o$2.e(this.TAG, s4), this.stop(), r2(s4);
      }, this.videoElement.oncanplaythrough = () => d$3(this, null, function* () {
        var s4, a2, c2;
        try {
          if (!this.videoElement)
            return;
          if (this.canvas.width = this.videoElement.videoWidth, this.canvas.height = this.videoElement.videoHeight, this.tracks.length === 0) {
            this.clearCanvasAndTracks();
            let l2 = this.canvas.captureStream();
            if (!l2) {
              o$2.e(this.TAG, "Browser does not support captureStream");
              return;
            }
            this.videoElement.onplay = this.drawImage, yield this.audioContextManager.resumeContext(), yield this.videoElement.play();
            let h2 = this.audioContextManager.getAudioTrack();
            l2.addTrack(h2), l2.getTracks().forEach((u2) => {
              this.tracks.push(u2);
            }), i2(this.tracks);
          } else
            this.seeked ? (this.seeked = false, (c2 = this.canvasContext) == null || c2.drawImage(this.videoElement, 0, 0, (s4 = this.canvas) == null ? void 0 : s4.width, (a2 = this.canvas) == null ? void 0 : a2.height)) : (yield this.videoElement.play(), i2(this.tracks));
        } catch (l2) {
          o$2.e(this.TAG, "Error playing video", t2, l2.message), r2(l2);
        }
      }), this.videoElement.onseeked = () => {
        this.seeked = true;
      };
    });
  }
  getTracks() {
    return this.tracks.map((t2) => t2.id);
  }
  getElement() {
    return this.videoElement || (this.videoElement = this.getVideoElement()), this.videoElement;
  }
  stop() {
    var t2, i2, r2;
    (t2 = this.videoElement) == null || t2.pause(), (i2 = this.videoElement) == null || i2.removeAttribute("src"), this.videoElement = null, (r2 = this.audioContextManager) == null || r2.cleanup(), this.clearCanvasAndTracks();
  }
  clearCanvasAndTracks() {
    var t2;
    this.tracks = [], (t2 = this.canvasContext) == null || t2.clearRect(0, 0, this.canvas.width, this.canvas.height), clearTimeout(this.timer);
  }
  getVideoElement() {
    if (this.videoElement)
      return this.videoElement;
    let t2 = document.createElement("video");
    return t2.crossOrigin = "anonymous", t2.addEventListener("timeupdate", (i2) => this.emit("progress", i2)), t2.addEventListener("ended", () => {
      this.emit("ended", null);
    }), this.audioContextManager = new be$1(t2), t2;
  }
  createCanvas() {
    this.canvas || (this.canvas = document.createElement("canvas"), this.canvasContext = this.canvas.getContext("2d"));
  }
};
var Lt$1 = { audio: { list: [], currentIndex: -1, isAutoplayOn: true }, video: { list: [], currentIndex: -1, isAutoplayOn: true } }, We$1 = class extends ae$1 {
  constructor(t2, i2) {
    super();
    this.sdk = t2;
    this.eventBus = i2;
    this.state = { audio: g$1({}, Lt$1.audio), video: g$1({}, Lt$1.video) };
    this.TAG = "[PlaylistManager]";
    this.handlePausePlaylist = (r2) => d$3(this, [r2], function* ({ enabled: t3, track: i3 }) {
      var a2;
      if (t3)
        return;
      let s4;
      i3.source === "audioplaylist" && (s4 = "audio"), i3.source === "videoplaylist" && (s4 = "video"), s4 && ((a2 = this.getElement(s4)) == null || a2.pause());
    });
    this.addTrack = (t3, i3) => d$3(this, null, function* () {
      yield this.sdk.addTrack(t3, i3), o$2.d(this.TAG, "Playlist track added", X$2(t3));
    });
    this.removeTrack = (t3) => d$3(this, null, function* () {
      yield this.sdk.removeTrack(t3, true), o$2.d(this.TAG, "Playlist track removed", t3);
    });
    this.audioManager = new Ct$1(), this.videoManager = new wt$1(), this.addListeners();
  }
  getList(t2 = "audio") {
    return this.state[t2].list;
  }
  setList(t2) {
    if (!t2 || t2.length === 0) {
      o$2.w(this.TAG, "Please pass in a list of HMSPlaylistItem's");
      return;
    }
    t2.forEach((i2) => {
      this.state[i2.type].list.find((r2) => r2.id === i2.id) || this.state[i2.type].list.push(i2);
    });
  }
  clearList(t2) {
    return d$3(this, null, function* () {
      this.isPlaying(t2) && (yield this.stop(t2)), this.state[t2].list = [];
    });
  }
  removeItem(t2, i2) {
    return d$3(this, null, function* () {
      let { list: r2, currentIndex: s4 } = this.state[i2], a2 = r2.findIndex((c2) => t2 === c2.id);
      return a2 > -1 ? (s4 === a2 && this.isPlaying(i2) && (yield this.stop(i2)), r2.splice(a2, 1), true) : false;
    });
  }
  seek(t2, i2 = "audio") {
    let { currentIndex: r2 } = this.state[i2];
    if (r2 === -1)
      throw p$3.PlaylistErrors.NoEntryToPlay("PLAYLIST", "No item is currently playing");
    let s4 = this.getElement(i2);
    if (s4) {
      let a2 = Math.max(s4.currentTime + t2, 0);
      s4.currentTime = Math.min(a2, s4.duration);
    }
  }
  seekTo(t2, i2 = "audio") {
    let { currentIndex: r2 } = this.state[i2];
    if (r2 === -1)
      throw p$3.PlaylistErrors.NoEntryToPlay("PLAYLIST", "No item is currently playing");
    if (t2 < 0)
      throw Error("value cannot be negative");
    let s4 = this.getElement(i2);
    s4 && (s4.currentTime = Math.min(t2, s4.duration));
  }
  setVolume(t2, i2 = "audio") {
    if (t2 < 0 || t2 > 100)
      throw Error("Please pass a valid number between 0-100");
    let r2 = this.getElement(i2);
    r2 && (r2.volume = t2 * 0.01);
  }
  getVolume(t2 = "audio") {
    let i2 = this.getElement(t2);
    return i2 ? Math.floor(i2.volume * 100) : 0;
  }
  getCurrentTime(t2 = "audio") {
    let i2 = this.getElement(t2);
    return (i2 == null ? void 0 : i2.currentTime) || 0;
  }
  getCurrentIndex(t2 = "audio") {
    return this.state[t2].currentIndex;
  }
  getCurrentProgress(t2 = "audio") {
    var c2;
    let { list: i2, currentIndex: r2 } = this.state[t2], s4 = (c2 = i2[r2]) == null ? void 0 : c2.url, a2 = this.getElement(t2);
    return !s4 || !a2 ? 0 : Math.floor(100 * (a2.currentTime / a2.duration));
  }
  getCurrentSelection(t2 = "audio") {
    let { list: i2, currentIndex: r2 } = this.state[t2];
    if (r2 !== -1)
      return i2[r2];
  }
  isPlaying(t2 = "audio") {
    let i2 = this.getElement(t2);
    return !!i2 && !i2.paused;
  }
  setIsAutoplayOn(t2 = "audio", i2) {
    this.state[t2].isAutoplayOn = i2;
  }
  getPlaybackRate(t2 = "audio") {
    let i2 = this.getElement(t2);
    return i2 ? i2.playbackRate : 1;
  }
  setPlaybackRate(t2 = "audio", i2) {
    if (i2 < 0.25 || i2 > 2)
      throw Error("Please pass a value between 0.25 and 2.0");
    let r2 = this.getElement(t2);
    r2 && (r2.playbackRate = i2);
  }
  setEnabled(s4, a2) {
    return d$3(this, arguments, function* (t2, { id: i2, type: r2 = "audio" }) {
      let l2 = this.state[r2].list.findIndex((u2) => u2.id === i2);
      if (!i2 || l2 === -1) {
        o$2.w(this.TAG, "Pass a valid id");
        return;
      }
      let h2 = this.state[r2].list[l2].url;
      t2 ? yield this.play(h2, r2) : yield this.pause(h2, r2), this.state[r2].currentIndex = l2, this.setDuration(r2);
    });
  }
  playNext() {
    return d$3(this, arguments, function* (t2 = "audio") {
      let { list: i2, currentIndex: r2 } = this.state[t2];
      if (r2 >= i2.length - 1)
        throw p$3.PlaylistErrors.NoEntryToPlay("PLAYLIST", "Reached end of playlist");
      yield this.play(i2[r2 + 1].url, t2), this.state[t2].currentIndex = r2 + 1, this.setDuration(t2);
    });
  }
  playPrevious() {
    return d$3(this, arguments, function* (t2 = "audio") {
      let { list: i2, currentIndex: r2 } = this.state[t2];
      if (r2 <= 0)
        throw p$3.PlaylistErrors.NoEntryToPlay("PLAYLIST", "Reached start of playlist");
      yield this.play(i2[r2 - 1].url, t2), this.state[t2].currentIndex = r2 - 1, this.setDuration(t2);
    });
  }
  stop() {
    return d$3(this, arguments, function* (t2 = "audio") {
      var r2;
      let i2 = t2 === "audio" ? this.audioManager : this.videoManager;
      (r2 = i2.getElement()) == null || r2.pause(), yield this.removeTracks(t2), i2.stop(), this.state[t2].currentIndex = -1;
    });
  }
  cleanup() {
    this.state = { audio: g$1({}, Lt$1.audio), video: g$1({}, Lt$1.video) }, this.eventBus.localAudioEnabled.unsubscribe(this.handlePausePlaylist), this.eventBus.localVideoEnabled.unsubscribe(this.handlePausePlaylist), this.audioManager.stop(), this.videoManager.stop();
  }
  onProgress(t2) {
    this.videoManager.on("progress", () => {
      try {
        t2({ type: "video", progress: this.getCurrentProgress("video") });
      } catch (i2) {
        o$2.e(this.TAG, "Error in onProgress callback");
      }
    }), this.audioManager.on("progress", () => {
      try {
        t2({ type: "audio", progress: this.getCurrentProgress("audio") });
      } catch (i2) {
        o$2.e(this.TAG, "Error in onProgress callback");
      }
    });
  }
  onNewTrackStart(t2) {
    this.on("newTrackStart", t2);
  }
  onPlaylistEnded(t2) {
    this.on("playlistEnded", t2);
  }
  onCurrentTrackEnded(t2) {
    this.on("currentTrackEnded", t2);
  }
  getElement(t2 = "audio") {
    return t2 === "audio" ? this.audioManager.getElement() : this.videoManager.getElement();
  }
  removeTracks() {
    return d$3(this, arguments, function* (t2 = "audio") {
      let r2 = (t2 === "audio" ? this.audioManager : this.videoManager).getTracks();
      for (let s4 of r2)
        yield this.removeTrack(s4);
    });
  }
  play(r2) {
    return d$3(this, arguments, function* (t2, i2 = "audio") {
      let s4 = i2 === "audio" ? this.audioManager : this.videoManager, a2 = s4.getElement();
      if (this.isItemCurrentlyPlaying(t2, i2)) {
        o$2.w(this.TAG, `The ${i2} is currently playing`);
        return;
      }
      if (a2 != null && a2.src.includes(t2))
        yield a2.play();
      else {
        a2 == null || a2.pause();
        let c2 = yield s4.play(t2);
        for (let l2 of c2)
          yield this.addTrack(l2, i2 === "audio" ? "audioplaylist" : "videoplaylist");
      }
    });
  }
  isItemCurrentlyPlaying(t2, i2) {
    let r2 = this.getElement(i2);
    return !!(r2 && !r2.paused && r2.src.includes(t2));
  }
  setDuration(t2 = "audio") {
    let i2 = this.getElement(t2), { list: r2, currentIndex: s4 } = this.state[t2];
    r2[s4] && (r2[s4].duration = (i2 == null ? void 0 : i2.duration) || 0), this.emit("newTrackStart", r2[s4]);
  }
  pause(r2) {
    return d$3(this, arguments, function* (t2, i2 = "audio") {
      let s4 = this.getElement(i2);
      s4 && !s4.paused && s4.src.includes(t2) ? (s4.pause(), o$2.d(this.TAG, "paused url", t2)) : o$2.w(this.TAG, "The passed in url is not currently playing");
    });
  }
  addListeners() {
    this.audioManager.on("ended", () => this.handleEnded("audio")), this.videoManager.on("ended", () => this.handleEnded("video")), this.eventBus.localAudioEnabled.subscribe(this.handlePausePlaylist), this.eventBus.localVideoEnabled.subscribe(this.handlePausePlaylist);
  }
  handleEnded() {
    return d$3(this, arguments, function* (t2 = "audio") {
      let { list: i2, currentIndex: r2, isAutoplayOn: s4 } = this.state[t2];
      r2 === i2.length - 1 ? (yield this.stop(t2), this.emit("playlistEnded", t2)) : s4 ? this.playNext(t2) : yield this.pause(i2[r2].url, t2), this.emit("currentTrackEnded", i2[r2]);
    });
  }
};
var Ht = class {
  constructor(e2) {
    this.transport = e2;
    this.observedKeys = /* @__PURE__ */ new Set();
  }
  get(e2) {
    return d$3(this, null, function* () {
      let { data: t2, updated_at: i2 } = yield this.transport.getSessionMetadata(e2);
      return { value: t2, updatedAt: A$1(i2) };
    });
  }
  set(e2, t2) {
    return d$3(this, null, function* () {
      let { data: i2, updated_at: r2 } = yield this.transport.setSessionMetadata({ key: e2, data: t2 }), s4 = A$1(r2);
      return { value: i2, updatedAt: s4 };
    });
  }
  observe(e2) {
    return d$3(this, null, function* () {
      let t2 = new Set(this.observedKeys);
      if (e2.forEach((i2) => this.observedKeys.add(i2)), this.observedKeys.size !== t2.size)
        try {
          yield this.transport.listenMetadataChange(Array.from(this.observedKeys));
        } catch (i2) {
          throw this.observedKeys = t2, i2;
        }
    });
  }
  unobserve(e2) {
    return d$3(this, null, function* () {
      let t2 = new Set(this.observedKeys);
      if (this.observedKeys = new Set([...this.observedKeys].filter((i2) => !e2.includes(i2))), this.observedKeys.size !== t2.size)
        try {
          yield this.transport.listenMetadataChange(Array.from(this.observedKeys));
        } catch (i2) {
          throw this.observedKeys = t2, i2;
        }
    });
  }
};
var Ke$1 = class {
  constructor(e2, t2, i2) {
    this.transport = e2;
    this.store = t2;
    this.listener = i2;
  }
  setListener(e2) {
    this.listener = e2;
  }
  createPoll(e2) {
    return d$3(this, null, function* () {
      var s4, a2;
      let { poll_id: t2 } = yield this.transport.setPollInfo(M$1(g$1({}, e2), { poll_id: e2.id, vote: e2.rolesThatCanVote, responses: e2.rolesThatCanViewResponses }));
      e2.id || (e2.id = t2), Array.isArray(e2.questions) && (yield this.addQuestionsToPoll(e2.id, e2.questions));
      let i2 = yield this.transport.getPollQuestions({ poll_id: e2.id, index: 0, count: 50 }), r2 = { id: e2.id, title: e2.title, anonymous: e2.anonymous, type: e2.type, duration: e2.duration, locked: e2.locked, mode: e2.mode, visibility: e2.visibility, rolesThatCanVote: e2.rolesThatCanVote || [], rolesThatCanViewResponses: e2.rolesThatCanViewResponses || [], state: "created", createdBy: (s4 = this.store.getLocalPeer()) == null ? void 0 : s4.peerId, questions: i2.questions.map(({ question: c2, options: l2, answer: h2 }) => M$1(g$1({}, c2), { options: l2, answer: h2 })) };
      (a2 = this.listener) == null || a2.onPollsUpdate(0, [r2]);
    });
  }
  startPoll(e2) {
    return d$3(this, null, function* () {
      typeof e2 == "string" ? yield this.transport.startPoll({ poll_id: e2 }) : (yield this.createPoll(e2), yield this.transport.startPoll({ poll_id: e2.id }));
    });
  }
  addQuestionsToPoll(e2, t2) {
    return d$3(this, null, function* () {
      t2.length > 0 && (yield this.transport.setPollQuestions({ poll_id: e2, questions: t2.map((i2, r2) => this.createQuestionSetParams(i2, r2)) }));
    });
  }
  stopPoll(e2) {
    return d$3(this, null, function* () {
      yield this.transport.stopPoll({ poll_id: e2 });
    });
  }
  addResponsesToPoll(e2, t2) {
    return d$3(this, null, function* () {
      let i2 = this.store.getPoll(e2);
      if (!i2)
        throw new Error("Invalid poll ID - Poll not found");
      let r2 = t2.map((s4) => {
        var c2, l2;
        let a2 = this.getQuestionInPoll(i2, s4.questionIndex);
        return a2.type === "single-choice" ? (s4.option = s4.option || ((c2 = s4.options) == null ? void 0 : c2[0]) || -1, delete s4.text, delete s4.options) : a2.type === "multiple-choice" ? ((l2 = s4.options) == null || l2.sort(), delete s4.text, delete s4.option) : (delete s4.option, delete s4.options), s4.skipped && (delete s4.option, delete s4.options, delete s4.text), g$1({ duration: 0, type: a2.type, question: s4.questionIndex }, s4);
      });
      yield this.transport.setPollResponses({ poll_id: e2, responses: r2 });
    });
  }
  getPolls() {
    return d$3(this, null, function* () {
      let e2 = yield this.transport.getPollsList({ count: 50 }), t2 = [];
      for (let i2 of e2.polls) {
        let r2 = yield this.transport.getPollQuestions({ poll_id: i2.poll_id, index: 0, count: 50 }), s4 = { id: i2.poll_id, title: i2.title, startedBy: i2.started_by, createdBy: i2.created_by, anonymous: i2.anonymous, type: i2.type, duration: i2.duration, locked: i2.locked, mode: i2.mode, visibility: i2.visibility, rolesThatCanVote: i2.vote || [], rolesThatCanViewResponses: i2.responses || [], state: i2.state, stoppedBy: i2.stopped_by, startedAt: A$1(i2.started_at), stoppedAt: A$1(i2.stopped_at), createdAt: A$1(i2.created_at), questions: r2.questions.map(({ question: a2, options: c2, answer: l2 }) => M$1(g$1({}, a2), { options: c2, answer: l2 })) };
        t2.push(s4), this.store.setPoll(s4);
      }
      return t2;
    });
  }
  getResponses(e2) {
    throw new Error("Method not implemented.");
  }
  createQuestionSetParams(e2, t2) {
    var a2;
    let i2 = M$1(g$1({}, e2), { index: t2 + 1 }), r2, s4 = e2.answer || { hidden: false };
    return Array.isArray(e2.options) && ["single-choice", "multiple-choice"].includes(e2.type) ? (r2 = (a2 = e2.options) == null ? void 0 : a2.map((c2, l2) => ({ index: l2 + 1, text: c2.text, weight: c2.weight })), s4 == null || delete s4.text, e2.type === "single-choice" ? s4.option = e2.options.findIndex((c2) => c2.isCorrectAnswer) + 1 || void 0 : s4.options = e2.options.map((c2, l2) => c2.isCorrectAnswer ? l2 + 1 : void 0).filter((c2) => !!c2)) : (s4 == null || delete s4.options, s4 == null || delete s4.option), { question: i2, options: r2, answer: s4 };
  }
  getQuestionInPoll(e2, t2) {
    var r2;
    let i2 = (r2 = e2 == null ? void 0 : e2.questions) == null ? void 0 : r2.find((s4) => s4.index === t2);
    if (!i2)
      throw new Error("Invalid question index - Question not found in poll");
    return i2;
  }
};
var _t$1 = class {
  constructor(e2, t2, i2 = "", r2 = "", s4 = "https://prod-init.100ms.live/init", a2 = false) {
    this.authToken = e2;
    this.peerId = t2;
    this.peerName = i2;
    this.data = r2;
    this.endpoint = s4;
    this.autoSubscribeVideo = a2;
  }
};
var _$2 = ((s4) => (s4[s4.ConnectFailed = 0] = "ConnectFailed", s4[s4.SignalDisconnect = 1] = "SignalDisconnect", s4[s4.JoinWSMessageFailed = 2] = "JoinWSMessageFailed", s4[s4.PublishIceConnectionFailed = 3] = "PublishIceConnectionFailed", s4[s4.SubscribeIceConnectionFailed = 4] = "SubscribeIceConnectionFailed", s4))(_$2 || {}), er = { 0: [], 1: [], 2: [1], 3: [1], 4: [1] };
var Ie$1 = ((c2) => (c2.Disconnected = "Disconnected", c2.Connecting = "Connecting", c2.Joined = "Joined", c2.Preview = "Preview", c2.Failed = "Failed", c2.Reconnecting = "Reconnecting", c2.Leaving = "Leaving", c2))(Ie$1 || {});
var Dt$1 = class {
  constructor(e2) {
    this.promise = new Promise((t2, i2) => {
      this.resolve = t2, this.reject = i2, e2(t2, i2);
    });
  }
};
var Nt$1 = class {
  constructor(e2, t2) {
    this.onStateChange = e2;
    this.sendEvent = t2;
    this.TAG = "[RetryScheduler]";
    this.inProgress = /* @__PURE__ */ new Map();
    this.retryTaskIds = [];
  }
  schedule(c2) {
    return d$3(this, arguments, function* ({ category: e2, error: t2, task: i2, originalState: r2, maxFailedRetries: s4 = 5, changeState: a2 = true }) {
      yield this.scheduleTask({ category: e2, error: t2, changeState: a2, task: i2, originalState: r2, maxFailedRetries: s4 });
    });
  }
  reset() {
    this.retryTaskIds.forEach((e2) => clearTimeout(e2)), this.retryTaskIds = [], this.inProgress.clear();
  }
  isTaskInProgress(e2) {
    return !!this.inProgress.get(e2);
  }
  scheduleTask(l2) {
    return d$3(this, arguments, function* ({ category: e2, error: t2, changeState: i2, task: r2, originalState: s4, maxFailedRetries: a2 = 5, failedRetryCount: c2 = 0 }) {
      if (o$2.d(this.TAG, "schedule: ", { category: _$2[e2], error: t2 }), c2 === 0) {
        let T2 = this.inProgress.get(e2);
        if (T2) {
          o$2.d(this.TAG, `schedule: Already a task for ${_$2[e2]} scheduled, waiting for its completion`), yield T2.promise;
          return;
        }
        let y2 = new Dt$1((b2, G2) => {
        });
        this.inProgress.set(e2, y2), this.sendEvent(t2, e2);
      }
      let h2 = false, u2 = er[e2];
      for (let T2 in u2) {
        let y2 = u2[parseInt(T2)];
        try {
          let b2 = this.inProgress.get(y2);
          b2 && (o$2.d(this.TAG, `schedule: Suspending retry task of ${_$2[e2]}, waiting for ${_$2[y2]} to recover`), yield b2.promise, o$2.d(this.TAG, `schedule: Resuming retry task ${_$2[e2]} as it's dependency ${_$2[y2]} is recovered`));
        } catch (b2) {
          o$2.d(this.TAG, `schedule: Stopping retry task of ${_$2[e2]} as it's dependency ${_$2[y2]} failed to recover`), h2 = true;
          break;
        }
      }
      if (c2 >= a2 || h2) {
        if (t2.description += `. [${_$2[e2]}] Could not recover after ${c2} tries`, h2 && (t2.description += ` Could not recover all of it's required dependencies - [${u2.map((T2) => _$2[T2]).toString()}]`), t2.isTerminal = true, this.inProgress.delete(e2), this.sendEvent(t2, e2), this.reset(), i2)
          this.onStateChange("Failed", t2);
        else
          throw t2;
        return;
      }
      i2 && this.onStateChange("Reconnecting", t2);
      let m2 = this.getDelayForRetryCount(e2, c2);
      o$2.d(this.TAG, `schedule: [${_$2[e2]}] [failedRetryCount=${c2}] Scheduling retry task in ${m2}ms`);
      let S2;
      try {
        S2 = yield this.setTimeoutPromise(r2, m2);
      } catch (T2) {
        S2 = false, o$2.w(this.TAG, `[${_$2[e2]}] Un-caught exception ${T2.name} in retry-task, initiating retry`, T2);
      }
      if (S2) {
        let T2 = this.inProgress.get(e2);
        this.inProgress.delete(e2), T2 == null || T2.resolve(c2), i2 && this.inProgress.size === 0 && this.onStateChange(s4), o$2.d(this.TAG, `schedule: [${_$2[e2]}] [failedRetryCount=${c2}] Recovered \u267B\uFE0F`);
      } else
        yield this.scheduleTask({ category: e2, error: t2, changeState: i2, task: r2, originalState: s4, maxFailedRetries: a2, failedRetryCount: c2 + 1 });
    });
  }
  getBaseDelayForTask(e2, t2) {
    return e2 === 2 ? 2 : Math.pow(2, t2);
  }
  getDelayForRetryCount(e2, t2) {
    let i2 = this.getBaseDelayForTask(e2, t2), r2 = e2 === 2 ? Math.random() * 2 : Math.random();
    return Math.round(Math.min(i2 + r2, 60) * 1e3);
  }
  setTimeoutPromise(e2, t2) {
    return d$3(this, null, function* () {
      return new Promise((i2, r2) => {
        let s4 = window.setTimeout(() => d$3(this, null, function* () {
          try {
            let a2 = yield e2();
            a2 && this.retryTaskIds.splice(this.retryTaskIds.indexOf(s4), 1), i2(a2);
          } catch (a2) {
            r2(a2);
          }
        }), t2);
        this.retryTaskIds.push(s4);
      });
    });
  }
};
var xt$1 = class {
  constructor(e2, t2, i2 = 30, r2 = 300) {
    this.store = e2;
    this.eventBus = t2;
    this.sampleWindowSize = i2;
    this.pushInterval = r2;
    this.shouldSendEvent = false;
    this.sequenceNum = 1;
    this.trackAnalytics = /* @__PURE__ */ new Map();
    this.stop = () => {
      this.shouldSendEvent && this.sendEvent(), this.eventBus.statsUpdate.unsubscribe(this.handleStatsUpdate), this.shouldSendEvent = false;
    };
    this.sendEvent = () => {
      this.eventBus.analytics.publish(E$3.publishStats(this.toAnalytics()));
    };
    this.handleStatsUpdate = (e3) => {
      let t3 = e3.getLocalTrackStats();
      Object.keys(t3).forEach((i3) => {
        let r3 = t3[i3], s4 = this.store.getLocalPeerTracks().find((a2) => a2.getTrackIDBeingSent() === i3);
        Object.keys(r3).forEach((a2) => {
          var h2, u2, m2, S2, T2;
          let c2 = r3[a2], l2 = s4 && this.getTrackIdentifier(s4 == null ? void 0 : s4.trackId, c2);
          if (l2 && this.trackAnalytics.has(l2))
            (m2 = this.trackAnalytics.get(l2)) == null || m2.push(M$1(g$1({}, c2), { availableOutgoingBitrate: (u2 = (h2 = e3.getLocalPeerStats()) == null ? void 0 : h2.publish) == null ? void 0 : u2.availableOutgoingBitrate }));
          else if (s4) {
            let y2 = new mi({ track: s4, sampleWindowSize: this.sampleWindowSize, rid: c2.rid, ssrc: c2.ssrc.toString(), kind: c2.kind });
            y2.push(M$1(g$1({}, c2), { availableOutgoingBitrate: (T2 = (S2 = e3.getLocalPeerStats()) == null ? void 0 : S2.publish) == null ? void 0 : T2.availableOutgoingBitrate })), this.trackAnalytics.set(this.getTrackIdentifier(s4 == null ? void 0 : s4.trackId, c2), y2);
          }
        });
      });
    };
    this.start();
  }
  start() {
    this.shouldSendEvent || (this.stop(), this.shouldSendEvent = true, this.eventBus.statsUpdate.subscribe(this.handleStatsUpdate), this.startLoop().catch((e2) => o$2.e("[PublishStatsAnalytics]", e2.message)));
  }
  startLoop() {
    return d$3(this, null, function* () {
      for (; this.shouldSendEvent; )
        yield R$2(this.pushInterval * 1e3), this.sendEvent();
    });
  }
  toAnalytics() {
    var i2, r2;
    let e2 = [], t2 = [];
    return this.trackAnalytics.forEach((s4) => {
      s4.track.type === "audio" ? e2.push(s4.toAnalytics()) : s4.track.type === "video" && t2.push(s4.toAnalytics());
    }), { audio: e2, video: t2, joined_at: (r2 = (i2 = this.store.getRoom()) == null ? void 0 : i2.joinedAt) == null ? void 0 : r2.getTime(), sequence_num: this.sequenceNum++, max_window_sec: 30 };
  }
  getTrackIdentifier(e2, t2) {
    return t2.rid ? `${e2}:${t2.rid}` : e2;
  }
}, mi = class {
  constructor({ track: e2, ssrc: t2, rid: i2, kind: r2, sampleWindowSize: s4 }) {
    this.samples = [];
    this.tempStats = [];
    this.track = e2, this.ssrc = t2, this.rid = i2, this.kind = r2, this.track_id = this.track.trackId, this.source = this.track.source, this.sampleWindowSize = s4;
  }
  push(e2) {
    this.tempStats.push(e2), this.shouldCreateSample() && (this.samples.push(this.createSample()), this.tempStats.length = 0);
  }
  toAnalytics() {
    return { track_id: this.track_id, ssrc: this.ssrc, source: this.source, rid: this.rid, samples: this.samples };
  }
  createSample() {
    let e2 = this.getLatestStat(), t2 = e2.qualityLimitationDurations, i2 = t2 && { bandwidth_sec: t2.bandwidth, cpu_sec: t2.cpu, other_sec: t2.other }, r2 = e2.frameHeight ? { height_px: this.getLatestStat().frameHeight, width_px: this.getLatestStat().frameWidth } : void 0, s4 = this.calculateAverage("jitter", false), a2 = s4 ? Math.round(s4 * 1e3) : void 0, c2 = this.calculateAverage("roundTripTime", false), l2 = c2 ? Math.round(c2 * 1e3) : void 0;
    return ts({ timestamp: Date.now(), avg_available_outgoing_bitrate_bps: this.calculateAverage("availableOutgoingBitrate"), avg_bitrate_bps: this.calculateAverage("bitrate"), avg_fps: this.calculateAverage("framesPerSecond"), total_packets_lost: this.calculateDifferenceForSample("packetsLost"), total_packets_sent: this.calculateDifferenceForSample("packetsSent"), total_packet_sent_delay_sec: parseFloat(this.calculateDifferenceForSample("totalPacketSendDelay").toFixed(4)), total_fir_count: this.calculateDifferenceForSample("firCount"), total_pli_count: this.calculateDifferenceForSample("pliCount"), total_nack_count: this.calculateDifferenceForSample("nackCount"), avg_jitter_ms: a2, avg_round_trip_time_ms: l2, total_quality_limitation: i2, resolution: r2 });
  }
  getLatestStat() {
    return this.tempStats[this.tempStats.length - 1];
  }
  shouldCreateSample() {
    let e2 = this.tempStats.length, t2 = this.tempStats[e2 - 1], i2 = this.tempStats[e2 - 2];
    return e2 === 30 || es$1(t2, i2) || t2.kind === "video" && Zr(t2, i2);
  }
  calculateSum(e2) {
    if (typeof this.getLatestStat()[e2] == "number")
      return this.tempStats.reduce((i2, r2) => i2 + (r2[e2] || 0), 0);
  }
  calculateAverage(e2, t2 = true) {
    let i2 = this.calculateSum(e2), r2 = i2 !== void 0 ? i2 / this.tempStats.length : void 0;
    return r2 ? t2 ? Math.round(r2) : r2 : void 0;
  }
  calculateDifferenceForSample(e2) {
    let t2 = Number(this.tempStats[0][e2]) || 0;
    return (Number(this.getLatestStat()[e2]) || 0) - t2;
  }
}, Zr = (n9, e2) => n9 && e2 && (n9.frameWidth !== e2.frameWidth || n9.frameHeight !== e2.frameHeight), es$1 = (n9, e2) => n9 && e2 && n9.enabled !== e2.enabled, ts = (n9) => Object.entries(n9).filter(([, e2]) => e2 !== void 0).reduce((e2, [t2, i2]) => (e2[t2] = i2, e2), {});
var Ft$1 = class extends te$1 {
  constructor() {
    super(100);
    this.localStorage = new U$1("hms-analytics");
    this.localStorage.clear(), this.initLocalStorageQueue();
  }
  enqueue(t2) {
    super.enqueue(t2), this.localStorage.set(this.storage);
  }
  dequeue() {
    let t2 = super.dequeue();
    return this.localStorage.set(this.storage), t2;
  }
  initLocalStorageQueue() {
    var t2;
    (t2 = this.localStorage.get()) == null || t2.forEach((i2) => {
      let r2 = new P$2(i2);
      super.enqueue(r2);
    });
  }
};
var Gt$1 = class {
  constructor() {
    this.TAG = "[AnalyticsTransport]";
  }
  sendEvent(e2) {
    try {
      this.sendSingleEvent(e2), this.flushFailedEvents();
    } catch (t2) {
      o$2.w(this.TAG, "sendEvent failed", t2);
    }
  }
  flushFailedEvents(e2) {
    var t2;
    try {
      for (o$2.d(this.TAG, "Flushing failed events", this.failedEvents); this.failedEvents.size() > 0; ) {
        let i2 = this.failedEvents.dequeue();
        i2 && (((t2 = i2.metadata) == null ? void 0 : t2.peer.peer_id) === e2 || !i2.metadata.peer.peer_id ? this.sendSingleEvent(i2) : J$3.sendEvent(i2));
      }
    } catch (i2) {
      o$2.w(this.TAG, "flushFailedEvents failed", i2);
    }
  }
  sendSingleEvent(e2) {
    try {
      this.transportProvider.sendEvent(e2), o$2.d(this.TAG, "Sent event", e2.name, e2);
    } catch (t2) {
      throw o$2.w(this.TAG, `${this.transportProvider.TAG}.sendEvent failed, adding to local storage events`, { event: e2, error: t2 }), this.failedEvents.enqueue(e2), t2;
    }
  }
};
var Ut$1 = class extends Gt$1 {
  constructor(t2) {
    super();
    this.transportProvider = t2;
    this.failedEvents = new Ft$1();
  }
};
var me$1 = ((t2) => (t2[t2.Publish = 0] = "Publish", t2[t2.Subscribe = 1] = "Subscribe", t2))(me$1 || {});
function tr(n9, e2) {
  var r2;
  let t2 = parse$1(n9.sdp);
  if (!((r2 = t2.origin) != null && r2.username.startsWith("mozilla")))
    return n9;
  let i2 = e2 ? Array.from(e2.values()) : [];
  return t2.media.forEach((s4) => {
    var l2, h2, u2;
    let a2 = (l2 = s4.msid) == null ? void 0 : l2.split(" ")[0], c2 = (h2 = i2.find((m2) => m2.type === s4.type && m2.stream_id === a2)) == null ? void 0 : h2.track_id;
    c2 && (s4.msid = (u2 = s4.msid) == null ? void 0 : u2.replace(/\s(.+)/, ` ${c2}`));
  }), { type: n9.type, sdp: write(t2) };
}
function ir(n9, e2) {
  var s4;
  if (!(n9 != null && n9.sdp) || !e2)
    return;
  let i2 = parse$1(n9.sdp).media.find((a2) => Q$2(a2.mid) && parseInt(a2.mid) === parseInt(e2));
  return (s4 = i2 == null ? void 0 : i2.msid) == null ? void 0 : s4.split(" ")[1];
}
function rr(n9) {
  return n9.sdp.includes("usedtx=1") ? n9 : { type: n9.type, sdp: n9.sdp.replace("useinbandfec=1", "useinbandfec=1;usedtx=1") };
}
var Y$1 = "[HMSConnection]", ge$1 = class {
  constructor(e2, t2) {
    this.candidates = new Array();
    this.role = e2, this.signal = t2;
  }
  get iceConnectionState() {
    return this.nativeConnection.iceConnectionState;
  }
  get connectionState() {
    return this.nativeConnection.connectionState;
  }
  get action() {
    return this.role === 0 ? "PUBLISH" : "SUBSCRIBE";
  }
  addTransceiver(e2, t2) {
    return this.nativeConnection.addTransceiver(e2, t2);
  }
  createOffer(e2, t2) {
    return d$3(this, null, function* () {
      try {
        let i2 = yield this.nativeConnection.createOffer(t2);
        return o$2.d(Y$1, `[role=${this.role}] createOffer offer=${JSON.stringify(i2, null, 1)}`), rr(tr(i2, e2));
      } catch (i2) {
        throw p$3.WebrtcErrors.CreateOfferFailed(this.action, i2.message);
      }
    });
  }
  createAnswer(e2 = void 0) {
    return d$3(this, null, function* () {
      try {
        let t2 = yield this.nativeConnection.createAnswer(e2);
        return o$2.d(Y$1, `[role=${this.role}] createAnswer answer=${JSON.stringify(t2, null, 1)}`), t2;
      } catch (t2) {
        throw p$3.WebrtcErrors.CreateAnswerFailed(this.action, t2.message);
      }
    });
  }
  setLocalDescription(e2) {
    return d$3(this, null, function* () {
      try {
        o$2.d(Y$1, `[role=${this.role}] setLocalDescription description=${JSON.stringify(e2, null, 1)}`), yield this.nativeConnection.setLocalDescription(e2);
      } catch (t2) {
        throw p$3.WebrtcErrors.SetLocalDescriptionFailed(this.action, t2.message);
      }
    });
  }
  setRemoteDescription(e2) {
    return d$3(this, null, function* () {
      try {
        o$2.d(Y$1, `[role=${this.role}] setRemoteDescription description=${JSON.stringify(e2, null, 1)}`), yield this.nativeConnection.setRemoteDescription(e2);
      } catch (t2) {
        throw p$3.WebrtcErrors.SetRemoteDescriptionFailed(this.action, t2.message);
      }
    });
  }
  addIceCandidate(e2) {
    return d$3(this, null, function* () {
      if (this.nativeConnection.signalingState === "closed") {
        o$2.d(Y$1, `[role=${this.role}] addIceCandidate signalling state closed`);
        return;
      }
      o$2.d(Y$1, `[role=${this.role}] addIceCandidate candidate=${JSON.stringify(e2, null, 1)}`), yield this.nativeConnection.addIceCandidate(e2);
    });
  }
  get remoteDescription() {
    return this.nativeConnection.remoteDescription;
  }
  getSenders() {
    return this.nativeConnection.getSenders();
  }
  logSelectedIceCandidatePairs() {
    try {
      (this.role === 0 ? this.getSenders() : this.getReceivers()).forEach((t2) => {
        var r2;
        let i2 = (r2 = t2.track) == null ? void 0 : r2.kind;
        if (t2.transport) {
          let s4 = t2.transport.iceTransport, a2 = () => {
            typeof s4.getSelectedCandidatePair == "function" && (this.selectedCandidatePair = s4.getSelectedCandidatePair(), o$2.d(Y$1, `${me$1[this.role]} connection`, `selected ${i2 || "unknown"} candidate pair`, JSON.stringify(this.selectedCandidatePair, null, 2)));
          };
          typeof s4.onselectedcandidatepairchange == "function" && (s4.onselectedcandidatepairchange = a2), a2();
        }
      });
    } catch (e2) {
      o$2.w(Y$1, `Error in logging selected ice candidate pair for ${me$1[this.role]} connection`, e2);
    }
  }
  removeTrack(e2) {
    this.nativeConnection.signalingState !== "closed" && this.nativeConnection.removeTrack(e2);
  }
  setMaxBitrateAndFramerate(e2) {
    return d$3(this, null, function* () {
      let t2 = e2.settings.maxBitrate, i2 = e2 instanceof F$2 && e2.settings.maxFramerate, r2 = this.getSenders().find((s4) => {
        var a2;
        return ((a2 = s4 == null ? void 0 : s4.track) == null ? void 0 : a2.id) === e2.getTrackIDBeingSent();
      });
      if (r2) {
        let s4 = r2.getParameters();
        s4.encodings.length > 0 && (t2 && (s4.encodings[0].maxBitrate = t2 * 1e3), i2 && (s4.encodings[0].maxFramerate = i2)), yield r2.setParameters(s4);
      } else
        o$2.w(Y$1, `no sender found to setMaxBitrate for track - ${e2.trackId}, sentTrackId - ${e2.getTrackIDBeingSent()}`);
    });
  }
  getStats() {
    return d$3(this, null, function* () {
      return yield this.nativeConnection.getStats();
    });
  }
  close() {
    return d$3(this, null, function* () {
      this.nativeConnection.close();
    });
  }
  getReceivers() {
    return this.nativeConnection.getReceivers();
  }
};
var je$1 = class extends ge$1 {
  constructor(t2, i2, r2) {
    super(0, t2);
    this.TAG = "[HMSPublishConnection]";
    this.observer = r2, this.nativeConnection = new RTCPeerConnection(i2), this.nativeConnection.createDataChannel(lt, { protocol: "SCTP" }), this.nativeConnection.onicecandidate = ({ candidate: s4 }) => {
      s4 && t2.trickle(this.role, s4);
    }, this.nativeConnection.oniceconnectionstatechange = () => {
      this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState);
    }, this.nativeConnection.onconnectionstatechange = () => {
      this.observer.onConnectionStateChange(this.nativeConnection.connectionState);
    };
  }
  initAfterJoin() {
    this.nativeConnection.onnegotiationneeded = () => d$3(this, null, function* () {
      o$2.d(this.TAG, "onnegotiationneeded"), yield this.observer.onRenegotiationNeeded();
    });
  }
};
var Qe$1 = class {
  constructor(e2, t2, i2 = "") {
    this.TAG = "[HMSDataChannel]";
    this.nativeChannel = e2, this.observer = t2, this.metadata = i2, e2.onmessage = (r2) => {
      this.observer.onMessage(r2.data);
    };
  }
  get id() {
    return this.nativeChannel.id;
  }
  get label() {
    return this.nativeChannel.label;
  }
  get readyState() {
    return this.nativeChannel.readyState;
  }
  send(e2) {
    o$2.d(this.TAG, `[${this.metadata}] Sending [size=${e2.length}] message=${e2}`), this.nativeChannel.send(e2);
  }
  close() {
    this.nativeChannel.close();
  }
};
var Je$1 = class n8 extends ge$1 {
  constructor(t2, i2, r2, s4) {
    super(1, t2);
    this.isFlagEnabled = r2;
    this.TAG = "[HMSSubscribeConnection]";
    this.remoteStreams = /* @__PURE__ */ new Map();
    this.MAX_RETRIES = 3;
    this.pendingMessageQueue = [];
    this.eventEmitter = new is({ maxListeners: 60 });
    this.handlePendingApiMessages = () => {
      this.eventEmitter.emit("open", true), this.pendingMessageQueue.length > 0 && (o$2.d(this.TAG, "Found pending message queue, sending messages"), this.pendingMessageQueue.forEach((t3) => this.sendOverApiDataChannel(t3)), this.pendingMessageQueue.length = 0);
    };
    this.sendMessage = (t3, i3) => d$3(this, null, function* () {
      var s5;
      ((s5 = this.apiChannel) == null ? void 0 : s5.readyState) !== "open" && (yield this.eventEmitter.waitFor("open"));
      let r3;
      for (let a2 = 0; a2 < this.MAX_RETRIES; a2++) {
        this.apiChannel.send(t3), r3 = yield this.waitForResponse(i3);
        let c2 = r3.error;
        if (c2) {
          if (c2.code === 404) {
            o$2.d(this.TAG, `Track not found ${i3}`, { request: t3, try: a2 + 1, error: c2 });
            break;
          }
          if (o$2.d(this.TAG, `Failed sending ${i3}`, { request: t3, try: a2 + 1, error: c2 }), !(c2.code / 100 === 5 || c2.code === 429))
            throw Error(`code=${c2.code}, message=${c2.message}`);
          let h2 = (2 + Math.random() * 2) * 1e3;
          yield R$2(h2);
        } else
          break;
      }
      return r3;
    });
    this.waitForResponse = (t3) => d$3(this, null, function* () {
      let i3 = yield this.eventEmitter.waitFor("message", function(s5) {
        return s5.includes(t3);
      }), r3 = JSON.parse(i3[0]);
      return o$2.d(this.TAG, `response for ${t3} -`, JSON.stringify(r3, null, 2)), r3;
    });
    this.observer = s4, this.nativeConnection = new RTCPeerConnection(i2), this.initNativeConnectionCallbacks();
  }
  initNativeConnectionCallbacks() {
    this.nativeConnection.oniceconnectionstatechange = () => {
      this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState);
    }, this.nativeConnection.onconnectionstatechange = () => {
      this.observer.onConnectionStateChange(this.nativeConnection.connectionState);
    }, this.nativeConnection.ondatachannel = (t2) => {
      t2.channel.label === lt && (this.apiChannel = new Qe$1(t2.channel, { onMessage: (i2) => {
        this.eventEmitter.emit("message", i2), this.observer.onApiChannelMessage(i2);
      } }, `role=${this.role}`), t2.channel.onopen = this.handlePendingApiMessages);
    }, this.nativeConnection.onicecandidate = (t2) => {
      t2.candidate !== null && this.signal.trickle(this.role, t2.candidate);
    }, this.nativeConnection.ontrack = (t2) => {
      var h2;
      let i2 = t2.streams[0], r2 = i2.id;
      if (!this.remoteStreams.has(r2)) {
        let u2 = new K$2(i2, this);
        this.remoteStreams.set(r2, u2);
      }
      i2.addEventListener("removetrack", (u2) => {
        if (u2.track.id !== t2.track.id)
          return;
        let m2 = s4.tracks.findIndex((S2) => {
          var T2;
          return S2.nativeTrack.id === u2.track.id && t2.transceiver.mid === ((T2 = S2.transceiver) == null ? void 0 : T2.mid);
        });
        if (m2 >= 0) {
          let S2 = s4.tracks[m2];
          this.observer.onTrackRemove(S2), s4.tracks.splice(m2, 1), s4.tracks.length === 0 && this.remoteStreams.delete(r2);
        }
      });
      let s4 = this.remoteStreams.get(r2), a2 = t2.track.kind === "audio" ? re$1 : H$2, c2 = new a2(s4, t2.track);
      c2.transceiver = t2.transceiver;
      let l2 = ir(this.remoteDescription, (h2 = t2.transceiver) == null ? void 0 : h2.mid);
      l2 && c2.setSdpTrackId(l2), s4.tracks.push(c2), this.observer.onTrackAdd(c2);
    };
  }
  sendOverApiDataChannel(t2) {
    this.apiChannel && this.apiChannel.readyState === "open" ? this.apiChannel.send(t2) : (o$2.w(this.TAG, `API Data channel not ${this.apiChannel ? "open" : "present"}, queueing`, t2), this.pendingMessageQueue.push(t2));
  }
  sendOverApiDataChannelWithResponse(t2, i2) {
    return d$3(this, null, function* () {
      let r2 = v4();
      if (t2.method === "prefer-video-track-state" && this.isFlagEnabled("disableVideoTrackAutoUnsubscribe") && t2.params.max_spatial_layer === "none")
        return o$2.d(this.TAG, "video auto unsubscribe is disabled, request is ignored"), { id: r2 };
      let s4 = JSON.stringify(g$1({ id: i2 || r2, jsonrpc: "2.0" }, t2));
      return this.sendMessage(s4, r2);
    });
  }
  close() {
    return d$3(this, null, function* () {
      var t2;
      yield D$3(n8.prototype, this, "close").call(this), (t2 = this.apiChannel) == null || t2.close();
    });
  }
};
var Vt$1 = "[InitService]", ze$1 = class {
  static handleError(e2, t2) {
    switch (e2.status) {
      case 404:
        throw p$3.APIErrors.EndpointUnreachable("INIT", t2.message || e2.statusText);
      case 200:
        break;
      default:
        throw p$3.APIErrors.ServerErrors(t2.code || e2.status, "INIT", t2.message || (e2 == null ? void 0 : e2.statusText));
    }
  }
  static fetchInitConfig(a2) {
    return d$3(this, arguments, function* ({ token: e2, peerId: t2, userAgent: i2, initEndpoint: r2 = "https://prod-init.100ms.live", region: s4 = "" }) {
      o$2.d(Vt$1, `fetchInitConfig: initEndpoint=${r2} token=${e2} peerId=${t2} region=${s4} `);
      let c2 = ss(r2, t2, i2, s4);
      try {
        let l2 = yield fetch(c2, { headers: { Authorization: `Bearer ${e2}` } });
        try {
          let h2 = yield l2.clone().json();
          return this.handleError(l2, h2), o$2.d(Vt$1, `config is ${JSON.stringify(h2, null, 2)}`), as$1(h2);
        } catch (h2) {
          let u2 = yield l2.text();
          throw o$2.e(Vt$1, "json error", h2.message, u2), p$3.APIErrors.ServerErrors(l2.status, "INIT", u2);
        }
      } catch (l2) {
        let h2 = l2;
        throw ["Failed to fetch", "NetworkError", "ECONNRESET"].some((u2) => h2.message.includes(u2)) ? p$3.APIErrors.EndpointUnreachable("INIT", h2.message) : h2;
      }
    });
  }
};
function ss(n9, e2, t2, i2) {
  try {
    let r2 = new URL("/init", n9);
    return i2 && i2.trim().length > 0 && r2.searchParams.set("region", i2.trim()), r2.searchParams.set("peer_id", e2), r2.searchParams.set("user_agent_v2", t2), r2.toString();
  } catch (r2) {
    let s4 = r2;
    throw o$2.e(Vt$1, s4.name, s4.message), s4;
  }
}
function as$1(n9) {
  var e2;
  return M$1(g$1({}, n9), { rtcConfiguration: M$1(g$1({}, n9.rtcConfiguration), { iceServers: (e2 = n9.rtcConfiguration) == null ? void 0 : e2.ice_servers }) });
}
var Ye$1 = class {
  constructor(e2) {
    this.TAG = "[SIGNAL]: ";
    this.pongResponseTimes = new te$1(5);
    this.isJoinCompleted = false;
    this.pendingTrickle = [];
    this.socket = null;
    this.callbacks = /* @__PURE__ */ new Map();
    this._isConnected = false;
    this.id = 0;
    this.onCloseHandler = () => {
    };
    this.resolvePingOnAnyResponse = () => {
      this.callbacks.forEach((e3, t2) => {
        var i2;
        ((i2 = e3.metadata) == null ? void 0 : i2.method) === "ping" && (e3.resolve({ timestamp: Date.now() }), this.callbacks.delete(t2));
      });
    };
    this.offlineListener = () => {
      o$2.d(this.TAG, "Window network offline"), this.setIsConnected(false, "Window network offline");
    };
    this.onlineListener = () => {
      o$2.d(this.TAG, "Window network online"), this.observer.onNetworkOnline();
    };
    this.observer = e2, window.addEventListener("offline", this.offlineListener), window.addEventListener("online", this.onlineListener), this.onMessageHandler = this.onMessageHandler.bind(this);
  }
  get isConnected() {
    return this._isConnected;
  }
  setIsConnected(e2, t2 = "") {
    o$2.d(this.TAG, `isConnected set id: ${this.id}, oldValue: ${this._isConnected}, newValue: ${e2}`), this._isConnected !== e2 && (this._isConnected && !e2 ? (this._isConnected = e2, this.rejectPendingCalls(t2), this.observer.onOffline(t2)) : !this._isConnected && e2 && (this._isConnected = e2, this.observer.onOnline()));
  }
  getPongResponseTimes() {
    return this.pongResponseTimes.toList();
  }
  internalCall(e2, t2) {
    return d$3(this, null, function* () {
      var s4;
      let i2 = v4(), r2 = { method: e2, params: t2, id: i2, jsonrpc: "2.0" };
      (s4 = this.socket) == null || s4.send(JSON.stringify(r2));
      try {
        return yield new Promise((c2, l2) => {
          this.callbacks.set(i2, { resolve: c2, reject: l2, metadata: { method: e2 } });
        });
      } catch (a2) {
        if (a2 instanceof v$3)
          throw a2;
        let c2 = a2;
        throw p$3.WebsocketMethodErrors.ServerErrors(Number(c2.code), Qt$1(e2), c2.message);
      }
    });
  }
  notify(e2, t2) {
    var r2, s4;
    let i2 = { method: e2, params: t2 };
    ((r2 = this.socket) == null ? void 0 : r2.readyState) === WebSocket.OPEN && ((s4 = this.socket) == null || s4.send(JSON.stringify(i2)));
  }
  open(e2) {
    return new Promise((t2, i2) => {
      let r2 = false;
      this.socket && (this.socket.close(), this.socket.removeEventListener("close", this.onCloseHandler), this.socket.removeEventListener("message", this.onMessageHandler)), this.socket = new WebSocket(e2);
      let s4 = () => {
        o$2.e(this.TAG, "Error from websocket"), r2 = true, i2(p$3.WebSocketConnectionErrors.FailedToConnect("JOIN", "Error opening websocket connection"));
      };
      this.onCloseHandler = (c2) => {
        o$2.w(`Websocket closed code=${c2.code}`), r2 ? this.setIsConnected(false, `code: ${c2.code}${c2.code !== 1e3 ? ", unexpected websocket close" : ""}`) : (r2 = true, i2(p$3.WebSocketConnectionErrors.AbnormalClose("JOIN", `Error opening websocket connection - websocket closed unexpectedly with code=${c2.code}`)));
      }, this.socket.addEventListener("error", s4);
      let a2 = () => {
        var c2, l2;
        r2 = true, t2(), this.setIsConnected(true), this.id++, (c2 = this.socket) == null || c2.removeEventListener("open", a2), (l2 = this.socket) == null || l2.removeEventListener("error", s4), this.pingPongLoop(this.id);
      };
      this.socket.addEventListener("open", a2), this.socket.addEventListener("close", this.onCloseHandler), this.socket.addEventListener("message", this.onMessageHandler);
    });
  }
  close() {
    return d$3(this, null, function* () {
      window.removeEventListener("offline", this.offlineListener), window.removeEventListener("online", this.onlineListener), this.socket ? (this.socket.close(1e3, "Normal Close"), this.setIsConnected(false, "code: 1000, normal websocket close"), this.socket.removeEventListener("close", this.onCloseHandler), this.socket.removeEventListener("message", this.onMessageHandler)) : this.setIsConnected(false, "websocket not connected yet");
    });
  }
  join(e2, t2, i2, r2, s4, a2, c2) {
    return d$3(this, null, function* () {
      if (!this.isConnected)
        throw p$3.WebSocketConnectionErrors.WebSocketConnectionLost("JOIN", "Failed to send join over WS connection");
      let l2 = { name: e2, disableVidAutoSub: i2, data: t2, offer: c2, server_sub_degrade: r2, simulcast: s4, onDemandTracks: a2 }, h2 = yield this.internalCall("join", l2);
      return this.isJoinCompleted = true, this.pendingTrickle.forEach(({ target: u2, candidate: m2 }) => this.trickle(u2, m2)), this.pendingTrickle.length = 0, o$2.d(this.TAG, `join: response=${JSON.stringify(h2, null, 1)}`), h2;
    });
  }
  trickle(e2, t2) {
    this.isJoinCompleted ? this.notify("trickle", { target: e2, candidate: t2 }) : this.pendingTrickle.push({ target: e2, candidate: t2 });
  }
  offer(e2, t2) {
    return d$3(this, null, function* () {
      return yield this.call("offer", { desc: e2, tracks: Object.fromEntries(t2) });
    });
  }
  answer(e2) {
    this.notify("answer", { desc: e2 });
  }
  trackUpdate(e2) {
    this.notify("track-update", { version: "1.0", tracks: Object.fromEntries(e2) });
  }
  broadcast(e2) {
    return d$3(this, null, function* () {
      return yield this.call("broadcast", g$1({ version: "1.0" }, e2.toSignalParams()));
    });
  }
  leave() {
    this.notify("leave", { version: "1.0" });
  }
  endRoom(e2, t2) {
    return d$3(this, null, function* () {
      yield this.call("end-room", { lock: e2, reason: t2 });
    });
  }
  sendEvent(e2) {
    if (!this.isConnected)
      throw Error(`${this.TAG} not connected. Could not send event ${e2}`);
    this.notify("analytics", e2.toSignalParams());
  }
  ping(e2) {
    let t2 = Date.now(), i2 = new Promise((s4) => {
      setTimeout(() => {
        s4(Date.now() - t2);
      }, e2 + 1);
    }), r2 = this.internalCall("ping", { timestamp: t2 }).then(() => Date.now() - t2).catch(() => Date.now() - t2);
    return Promise.race([i2, r2]);
  }
  requestRoleChange(e2) {
    return d$3(this, null, function* () {
      yield this.call("role-change-request", e2);
    });
  }
  requestBulkRoleChange(e2) {
    return d$3(this, null, function* () {
      yield this.call("role-change-request", e2);
    });
  }
  acceptRoleChangeRequest(e2) {
    return d$3(this, null, function* () {
      yield this.call("role-change", e2);
    });
  }
  requestTrackStateChange(e2) {
    return d$3(this, null, function* () {
      yield this.call("track-update-request", e2);
    });
  }
  requestMultiTrackStateChange(e2) {
    return d$3(this, null, function* () {
      yield this.call("change-track-mute-state-request", e2);
    });
  }
  removePeer(e2) {
    return d$3(this, null, function* () {
      yield this.call("peer-leave-request", e2);
    });
  }
  startRTMPOrRecording(e2) {
    return d$3(this, null, function* () {
      yield this.call("rtmp-start", g$1({ version: "1.0" }, e2));
    });
  }
  stopRTMPAndRecording() {
    return d$3(this, null, function* () {
      yield this.call("rtmp-stop", { version: "1.0" });
    });
  }
  startHLSStreaming(e2) {
    return d$3(this, null, function* () {
      yield this.call("hls-start", g$1({ version: "1.0" }, e2));
    });
  }
  stopHLSStreaming(e2) {
    return d$3(this, null, function* () {
      yield this.call("hls-stop", g$1({ version: "1.0" }, e2));
    });
  }
  sendHLSTimedMetadata(e2) {
    return d$3(this, null, function* () {
      yield this.call("hls-timed-metadata", g$1({ version: "1.0" }, e2));
    });
  }
  updatePeer(e2) {
    return d$3(this, null, function* () {
      yield this.call("peer-update", g$1({ version: "1.0" }, e2));
    });
  }
  setSessionMetadata(e2) {
    if (!this.isConnected)
      throw p$3.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to set session store value due to network disconnection");
    return this.call("set-metadata", g$1({ version: "1.1" }, e2));
  }
  listenMetadataChange(e2) {
    if (!this.isConnected)
      throw p$3.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to observe session store key due to network disconnection");
    return this.call("listen-metadata-change", { version: "1.1", keys: e2 });
  }
  getSessionMetadata(e2) {
    if (!this.isConnected)
      throw p$3.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to set session store value due to network disconnection");
    return this.call("get-metadata", { key: e2, version: "1.1" });
  }
  setPollInfo(e2) {
    return this.valiateConnection(), this.call("poll-info-set", g$1({ version: "1.0" }, e2));
  }
  getPollInfo(e2) {
    return this.valiateConnection(), this.call("poll-info-get", g$1({ version: "1.0" }, e2));
  }
  setPollQuestions(e2) {
    return this.valiateConnection(), this.call("poll-questions-set", g$1({ version: "1.0" }, e2));
  }
  startPoll(e2) {
    return this.valiateConnection(), this.call("poll-start", g$1({ version: "1.0" }, e2));
  }
  stopPoll(e2) {
    return this.valiateConnection(), this.call("poll-stop", g$1({ version: "1.0" }, e2));
  }
  getPollQuestions(e2) {
    return this.valiateConnection(), this.call("poll-questions-get", g$1({ version: "1.0" }, e2));
  }
  setPollResponses(e2) {
    return this.valiateConnection(), this.call("poll-response", g$1({ version: "1.0" }, e2));
  }
  getPollResponses(e2) {
    return this.valiateConnection(), this.call("poll-responses", g$1({ version: "1.0" }, e2));
  }
  getPollsList(e2) {
    return this.valiateConnection(), this.call("poll-list", g$1({ version: "1.0" }, e2));
  }
  getPollResult(e2) {
    return this.valiateConnection(), this.call("poll-result", g$1({ version: "1.0" }, e2));
  }
  valiateConnection() {
    if (!this.isConnected)
      throw p$3.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to send message due to network disconnection");
  }
  onMessageHandler(e2) {
    let t2 = e2.data, i2 = JSON.parse(t2);
    if (this.resolvePingOnAnyResponse(), i2.id)
      this.handleResponseWithId(i2);
    else if (i2.method)
      this.handleResponseWithMethod(i2);
    else
      throw Error(`WebSocket message has no 'method' or 'id' field, message=${i2}`);
  }
  handleResponseWithId(e2) {
    let t2 = e2, i2 = t2.id;
    if (this.callbacks.has(i2)) {
      let r2 = this.callbacks.get(i2);
      this.callbacks.delete(i2), t2.result ? r2.resolve(t2.result) : r2.reject(t2.error);
    } else
      this.observer.onNotification(t2);
  }
  handleResponseWithMethod(e2) {
    switch (e2.method) {
      case "offer":
        this.observer.onOffer(e2.params);
        break;
      case "trickle":
        this.observer.onTrickle(e2.params);
        break;
      case "on-error":
        this.observer.onServerError(p$3.WebsocketMethodErrors.ServerErrors(Number(e2.params.code), "on-error", e2.params.message));
        break;
      case "on-warning":
        o$2.w(this.TAG, e2.params);
        break;
      default:
        this.observer.onNotification(e2);
        break;
    }
  }
  rejectPendingCalls(e2 = "") {
    this.callbacks.forEach((t2, i2) => {
      var r2, s4, a2, c2;
      ((r2 = t2.metadata) == null ? void 0 : r2.method) !== "ping" && (o$2.e(this.TAG, `rejecting pending callback ${(s4 = t2.metadata) == null ? void 0 : s4.method}, id=${i2}`), t2.reject(p$3.WebSocketConnectionErrors.WebSocketConnectionLost((a2 = t2.metadata) != null && a2.method ? Qt$1((c2 = t2.metadata) == null ? void 0 : c2.method) : "RECONNECT_SIGNAL", e2)), this.callbacks.delete(i2));
    });
  }
  pingPongLoop(e2) {
    return d$3(this, null, function* () {
      var i2, r2;
      let t2 = ((i2 = window.HMS) == null ? void 0 : i2.PING_TIMEOUT) || 12e3;
      if (this.isConnected) {
        let s4 = yield this.ping(t2);
        this.pongResponseTimes.enqueue(s4), s4 > t2 ? (o$2.d(this.TAG, `Pong timeout ${e2}, pageHidden=${yi()}`), this.id === e2 && this.setIsConnected(false, "ping pong failure")) : setTimeout(() => this.pingPongLoop(e2), ((r2 = window.HMS) == null ? void 0 : r2.PING_INTERVAL) || 3e3);
      }
    });
  }
  call(e2, t2) {
    return d$3(this, null, function* () {
      let r2 = p$3.WebsocketMethodErrors.ServerErrors(500, e2, `Default ${e2} error`), s4;
      for (s4 = 1; s4 <= 3; s4++)
        try {
          return o$2.d(this.TAG, `Try number ${s4} sending ${e2}`, t2), yield this.internalCall(e2, t2);
        } catch (a2) {
          if (r2 = a2, o$2.e(this.TAG, `Failed sending ${e2} try: ${s4}`, { method: e2, params: t2, error: r2 }), !(parseInt(`${r2.code / 100}`) === 5 || r2.code === 429))
            break;
          let l2 = (2 + Math.random() * 2) * 1e3;
          yield R$2(l2);
        }
      throw o$2.e(`Sending ${e2} over WS failed after ${Math.min(s4, 3)} retries`, { method: e2, params: t2, error: r2 }), r2;
    });
  }
};
var sr = () => {
  if (!w$2 || typeof navigator.connection == "undefined")
    return;
  let n9 = navigator.connection;
  return { downlink: n9.downlink, downlinkMax: n9.downlinkMax, effectiveType: n9.effectiveType, rtt: n9.rtt, saveData: n9.saveData, type: n9.type };
};
var k$2 = "[HMSTransport]:", Xe$1 = class {
  constructor(e2, t2, i2, r2, s4, a2) {
    this.observer = e2;
    this.deviceManager = t2;
    this.store = i2;
    this.eventBus = r2;
    this.analyticsEventsService = s4;
    this.analyticsTimer = a2;
    this.state = "Disconnected";
    this.trackStates = /* @__PURE__ */ new Map();
    this.publishConnection = null;
    this.subscribeConnection = null;
    this.maxSubscribeBitrate = 0;
    this.joinRetryCount = 0;
    this.callbacks = /* @__PURE__ */ new Map();
    this.signalObserver = { onOffer: (e3) => d$3(this, null, function* () {
      try {
        if (!this.subscribeConnection)
          return;
        yield this.subscribeConnection.setRemoteDescription(e3), o$2.d(k$2, `[SUBSCRIBE] Adding ${this.subscribeConnection.candidates.length} ice-candidates`, this.subscribeConnection.candidates);
        for (let i3 of this.subscribeConnection.candidates)
          yield this.subscribeConnection.addIceCandidate(i3);
        this.subscribeConnection.candidates.length = 0;
        let t3 = yield this.subscribeConnection.createAnswer();
        yield this.subscribeConnection.setLocalDescription(t3), this.signal.answer(t3), o$2.d(k$2, "[role=SUBSCRIBE] onOffer renegotiation DONE \u2705");
      } catch (t3) {
        o$2.d(k$2, "[role=SUBSCRIBE] onOffer renegotiation FAILED \u274C", t3), this.state = "Failed";
        let i3;
        t3 instanceof v$3 ? i3 = t3 : i3 = p$3.GenericErrors.Unknown("PUBLISH", t3.message), this.observer.onFailure(i3), this.eventBus.analytics.publish(E$3.subscribeFail(i3));
      }
    }), onTrickle: (e3) => d$3(this, null, function* () {
      let t3 = e3.target === 0 ? this.publishConnection : this.subscribeConnection;
      t3 != null && t3.remoteDescription ? yield t3.addIceCandidate(e3.candidate) : t3 == null || t3.candidates.push(e3.candidate);
    }), onNotification: (e3) => this.observer.onNotification(e3), onServerError: (e3) => d$3(this, null, function* () {
      yield this.observer.onStateChange("Failed", e3);
    }), onFailure: (e3) => {
      this.joinParameters && this.retryScheduler.schedule({ category: 1, error: e3, task: this.retrySignalDisconnectTask, originalState: this.state });
    }, onOffline: (e3) => d$3(this, null, function* () {
      o$2.d(k$2, "socket offline", Ie$1[this.state]);
      try {
        this.state !== "Leaving" && this.joinParameters && this.retryScheduler.schedule({ category: 1, error: p$3.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", e3), task: this.retrySignalDisconnectTask, originalState: this.state });
      } catch (t3) {
        console.error(t3);
      }
    }), onOnline: () => {
      var e3;
      o$2.d(k$2, "socket online", Ie$1[this.state]), this.analyticsSignalTransport.flushFailedEvents((e3 = this.store.getLocalPeer()) == null ? void 0 : e3.peerId);
    }, onNetworkOnline: () => {
      this.analyticsEventsService.flushFailedClientEvents();
    } };
    this.signal = new Ye$1(this.signalObserver);
    this.analyticsSignalTransport = new Ut$1(this.signal);
    this.publishConnectionObserver = { onRenegotiationNeeded: () => d$3(this, null, function* () {
      yield this.performPublishRenegotiation();
    }), onIceConnectionChange: (e3) => d$3(this, null, function* () {
      (e3 === "disconnected" ? o$2.w.bind(o$2) : o$2.d.bind(o$2))(k$2, `Publish ice connection state change: ${e3}`);
    }), onConnectionStateChange: (e3) => d$3(this, null, function* () {
      var i3, r3, s5, a3, c3;
      (e3 === "disconnected" ? o$2.w.bind(o$2) : o$2.d.bind(o$2))(k$2, `Publish connection state change: ${e3}`), e3 === "connected" && ((i3 = this.publishConnection) == null || i3.logSelectedIceCandidatePairs()), e3 === "disconnected" && setTimeout(() => {
        var l3, h3, u2, m2, S2;
        ((l3 = this.publishConnection) == null ? void 0 : l3.connectionState) === "disconnected" && this.handleIceConnectionFailure(0, p$3.WebrtcErrors.ICEDisconnected("PUBLISH", `local candidate - ${(u2 = (h3 = this.publishConnection) == null ? void 0 : h3.selectedCandidatePair) == null ? void 0 : u2.local.candidate}; remote candidate - ${(S2 = (m2 = this.publishConnection) == null ? void 0 : m2.selectedCandidatePair) == null ? void 0 : S2.remote.candidate}`));
      }, 5e3), e3 === "failed" && (yield this.handleIceConnectionFailure(0, p$3.WebrtcErrors.ICEFailure("PUBLISH", `local candidate - ${(s5 = (r3 = this.publishConnection) == null ? void 0 : r3.selectedCandidatePair) == null ? void 0 : s5.local.candidate}; remote candidate - ${(c3 = (a3 = this.publishConnection) == null ? void 0 : a3.selectedCandidatePair) == null ? void 0 : c3.remote.candidate}`)));
    }) };
    this.subscribeConnectionObserver = { onApiChannelMessage: (e3) => {
      this.observer.onNotification(JSON.parse(e3));
    }, onTrackAdd: (e3) => {
      o$2.d(k$2, "[Subscribe] onTrackAdd", `${e3}`), this.observer.onTrackAdd(e3);
    }, onTrackRemove: (e3) => {
      o$2.d(k$2, "[Subscribe] onTrackRemove", `${e3}`), this.observer.onTrackRemove(e3);
    }, onIceConnectionChange: (e3) => d$3(this, null, function* () {
      if ((e3 === "disconnected" ? o$2.w.bind(o$2) : o$2.d.bind(o$2))(k$2, `Subscribe ice connection state change: ${e3}`), e3 === "connected") {
        let i3 = this.callbacks.get(Pe$1);
        this.callbacks.delete(Pe$1), i3 && i3.promise.resolve(true);
      }
    }), onConnectionStateChange: (e3) => d$3(this, null, function* () {
      var i3, r3, s5, a3;
      (e3 === "disconnected" ? o$2.w.bind(o$2) : o$2.d.bind(o$2))(k$2, `Subscribe connection state change: ${e3}`), e3 === "failed" && (yield this.handleIceConnectionFailure(1, p$3.WebrtcErrors.ICEFailure("SUBSCRIBE", `local candidate - ${(r3 = (i3 = this.subscribeConnection) == null ? void 0 : i3.selectedCandidatePair) == null ? void 0 : r3.local.candidate}; remote candidate - ${(a3 = (s5 = this.subscribeConnection) == null ? void 0 : s5.selectedCandidatePair) == null ? void 0 : a3.remote.candidate}`))), e3 === "disconnected" && setTimeout(() => {
        var c3, l3, h3, u2, m2;
        ((c3 = this.subscribeConnection) == null ? void 0 : c3.connectionState) === "disconnected" && this.handleIceConnectionFailure(1, p$3.WebrtcErrors.ICEDisconnected("SUBSCRIBE", `local candidate - ${(h3 = (l3 = this.subscribeConnection) == null ? void 0 : l3.selectedCandidatePair) == null ? void 0 : h3.local.candidate}; remote candidate - ${(m2 = (u2 = this.subscribeConnection) == null ? void 0 : u2.selectedCandidatePair) == null ? void 0 : m2.remote.candidate}`));
      }, 5e3), e3 === "connected" && this.handleSubscribeConnectionConnected();
    }) };
    this.handleLocalRoleUpdate = (i3) => d$3(this, [i3], function* ({ oldRole: e3, newRole: t3 }) {
      !this.doesRoleNeedWebRTC(e3) && this.doesRoleNeedWebRTC(t3) && (o$2.d(k$2, "Local peer role updated to webrtc role, creating PeerConnections and performing inital publish negotiation \u23F3"), this.createPeerConnections(), yield this.negotiateOnFirstPublish());
    });
    this.retryPublishIceFailedTask = () => d$3(this, null, function* () {
      if (this.publishConnection) {
        let e3 = new Promise((t3, i3) => {
          this.callbacks.set(ye$1, { promise: { resolve: t3, reject: i3 }, action: "RESTART_ICE", extra: {} });
        });
        yield this.performPublishRenegotiation({ iceRestart: this.publishConnection.connectionState !== "connected" }), yield e3;
      }
      return true;
    });
    this.retrySubscribeIceFailedTask = () => d$3(this, null, function* () {
      if (this.subscribeConnection && this.subscribeConnection.connectionState !== "connected") {
        let e3 = new Promise((i3, r3) => {
          this.callbacks.set(Pe$1, { promise: { resolve: i3, reject: r3 }, action: "RESTART_ICE", extra: {} });
        }), t3 = new Promise((i3) => {
          setTimeout(i3, 6e4, false);
        });
        return Promise.race([e3, t3]);
      }
      return true;
    });
    this.retrySignalDisconnectTask = () => d$3(this, null, function* () {
      var t3;
      o$2.d(k$2, "retrySignalDisconnectTask", { signalConnected: this.signal.isConnected }), this.signal.isConnected || (yield this.internalConnect(this.joinParameters.authToken, this.joinParameters.endpoint, this.joinParameters.peerId));
      let e3 = (t3 = this.store.getRoom()) != null && t3.joinedAt ? this.signal.isConnected && (yield this.retryPublishIceFailedTask()) : this.signal.isConnected;
      return this.signal.trackUpdate(this.trackStates), e3;
    });
    var l2, h2;
    this.webrtcInternals = new Fe$1(this.store, this.eventBus, (l2 = this.publishConnection) == null ? void 0 : l2.nativeConnection, (h2 = this.subscribeConnection) == null ? void 0 : h2.nativeConnection);
    let c2 = (u2, m2) => d$3(this, null, function* () {
      u2 !== this.state && (this.state = u2, yield this.observer.onStateChange(this.state, m2));
    });
    this.retryScheduler = new Nt$1(c2, this.sendErrorAnalyticsEvent.bind(this)), this.eventBus.statsUpdate.subscribe((u2) => {
      var S2, T2;
      let m2 = ((T2 = (S2 = u2.getLocalPeerStats()) == null ? void 0 : S2.subscribe) == null ? void 0 : T2.bitrate) || 0;
      this.maxSubscribeBitrate = Math.max(this.maxSubscribeBitrate, m2);
    }), this.eventBus.localAudioEnabled.subscribe(({ track: u2 }) => this.trackUpdate(u2)), this.eventBus.localVideoEnabled.subscribe(({ track: u2 }) => this.trackUpdate(u2));
  }
  getWebrtcInternals() {
    return this.webrtcInternals;
  }
  isFlagEnabled(e2) {
    var r2;
    let t2 = (r2 = this.initConfig) == null ? void 0 : r2.config;
    return ((t2 == null ? void 0 : t2.enabledFlags) || []).includes(e2);
  }
  preview(e2, t2, i2, r2, s4 = false) {
    return d$3(this, null, function* () {
      let a2 = yield this.connect(e2, t2, i2, r2, s4);
      return this.state = "Preview", this.observer.onStateChange(this.state), a2;
    });
  }
  join(e2, t2, i2, r2, s4 = false) {
    return d$3(this, null, function* () {
      o$2.d(k$2, "join: started \u23F0");
      try {
        (!this.signal.isConnected || !this.initConfig) && (yield this.connect(e2, r2, t2, i2, s4)), this.validateNotDisconnected("connect"), this.initConfig && (yield this.waitForLocalRoleAvailability(), yield this.createConnectionsAndNegotiateJoin(i2, s4), yield this.initRtcStatsMonitor(), o$2.d(k$2, "\u2705 join: Negotiated over PUBLISH connection"));
      } catch (a2) {
        o$2.e(k$2, `join: failed \u274C [token=${e2}]`, a2), this.state = "Failed";
        let c2 = a2;
        throw c2.isTerminal = c2.isTerminal || c2.code === 500, yield this.observer.onStateChange(this.state, c2), c2;
      }
      o$2.d(k$2, "\u2705 join: successful"), this.state = "Joined", this.observer.onStateChange(this.state);
    });
  }
  connect(e2, t2, i2, r2, s4 = false) {
    return d$3(this, null, function* () {
      this.setTransportStateForConnect(), this.joinParameters = new _t$1(e2, i2, r2.name, r2.metaData, t2, s4);
      try {
        return yield this.internalConnect(e2, t2, i2);
      } catch (a2) {
        if (a2 instanceof v$3 && ([f$3.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, f$3.WebSocketConnectionErrors.FAILED_TO_CONNECT, f$3.WebSocketConnectionErrors.ABNORMAL_CLOSE, f$3.APIErrors.ENDPOINT_UNREACHABLE].includes(a2.code) || a2.code.toString().startsWith("5") || a2.code.toString().startsWith("429"))) {
          let l2 = () => d$3(this, null, function* () {
            return yield this.internalConnect(e2, t2, i2), !!(this.initConfig && this.initConfig.endpoint);
          });
          yield this.retryScheduler.schedule({ category: 0, error: a2, task: l2, originalState: this.state, maxFailedRetries: 5, changeState: false });
        } else
          throw a2;
      }
    });
  }
  leave(e2) {
    return d$3(this, null, function* () {
      var t2, i2, r2, s4;
      this.retryScheduler.reset(), this.joinParameters = void 0, o$2.d(k$2, "leaving in transport");
      try {
        if (this.state = "Leaving", (t2 = this.publishStatsAnalytics) == null || t2.stop(), (i2 = this.webrtcInternals) == null || i2.cleanup(), yield (r2 = this.publishConnection) == null ? void 0 : r2.close(), yield (s4 = this.subscribeConnection) == null ? void 0 : s4.close(), e2)
          try {
            this.signal.leave(), o$2.d(k$2, "signal leave done");
          } catch (a2) {
            o$2.w(k$2, "failed to send leave on websocket to server", a2);
          }
        this.analyticsEventsService.flushFailedClientEvents(), this.analyticsEventsService.reset(), yield this.signal.close();
      } catch (a2) {
        this.eventBus.analytics.publish(E$3.disconnect(a2)), o$2.e(k$2, "leave: FAILED \u274C", a2);
      } finally {
        this.state = "Disconnected", this.observer.onStateChange(this.state);
      }
    });
  }
  publish(e2) {
    return d$3(this, null, function* () {
      for (let t2 of e2)
        try {
          yield this.publishTrack(t2);
        } catch (i2) {
          this.eventBus.analytics.publish(E$3.publish({ devices: this.deviceManager.getDevices(), error: i2 }));
        }
    });
  }
  unpublish(e2) {
    return d$3(this, null, function* () {
      for (let t2 of e2)
        yield this.unpublishTrack(t2);
    });
  }
  sendMessage(e2) {
    return d$3(this, null, function* () {
      return yield this.signal.broadcast(e2);
    });
  }
  trackUpdate(e2) {
    let i2 = Array.from(this.trackStates.values()).find((r2) => e2.type === r2.type && e2.source === r2.source);
    if (i2) {
      let r2 = new $e$1(M$1(g$1({}, i2), { mute: !e2.enabled }));
      this.trackStates.set(i2.track_id, r2), o$2.d(k$2, "Track Update", this.trackStates, e2), this.signal.trackUpdate(/* @__PURE__ */ new Map([[i2.track_id, r2]]));
    }
  }
  changeRole(e2, t2, i2 = false) {
    return d$3(this, null, function* () {
      yield this.signal.requestRoleChange({ requested_for: e2.peerId, role: t2, force: i2 });
    });
  }
  changeRoleOfPeer(e2, t2, i2) {
    return d$3(this, null, function* () {
      yield this.signal.requestRoleChange({ requested_for: e2.peerId, role: t2, force: i2 });
    });
  }
  changeRoleOfPeersWithRoles(e2, t2) {
    return d$3(this, null, function* () {
      yield this.signal.requestBulkRoleChange({ roles: e2.map((i2) => i2.name), role: t2, force: true });
    });
  }
  acceptRoleChange(e2) {
    return d$3(this, null, function* () {
      var t2;
      yield this.signal.acceptRoleChangeRequest({ requested_by: (t2 = e2.requestedBy) == null ? void 0 : t2.peerId, role: e2.role.name, token: e2.token });
    });
  }
  endRoom(e2, t2) {
    return d$3(this, null, function* () {
      yield this.signal.endRoom(e2, t2);
    });
  }
  removePeer(e2, t2) {
    return d$3(this, null, function* () {
      yield this.signal.removePeer({ requested_for: e2, reason: t2 });
    });
  }
  startRTMPOrRecording(e2) {
    return d$3(this, null, function* () {
      var i2;
      let t2 = { meeting_url: e2.meetingURL, record: e2.record };
      (i2 = e2.rtmpURLs) != null && i2.length && (t2.rtmp_urls = e2.rtmpURLs), e2.resolution && (t2.resolution = e2.resolution), yield this.signal.startRTMPOrRecording(t2);
    });
  }
  stopRTMPOrRecording() {
    return d$3(this, null, function* () {
      yield this.signal.stopRTMPAndRecording();
    });
  }
  startHLSStreaming(e2) {
    return d$3(this, null, function* () {
      let t2 = {};
      e2 && e2.variants && e2.variants.length > 0 && (t2.variants = e2.variants.map((i2) => {
        let r2 = { meeting_url: i2.meetingURL };
        return i2.metadata && (r2.metadata = i2.metadata), r2;
      })), e2 != null && e2.recording && (t2.hls_recording = { single_file_per_layer: e2.recording.singleFilePerLayer, hls_vod: e2.recording.hlsVod }), yield this.signal.startHLSStreaming(t2);
    });
  }
  stopHLSStreaming(e2) {
    return d$3(this, null, function* () {
      var t2;
      if (e2) {
        let i2 = { variants: (t2 = e2 == null ? void 0 : e2.variants) == null ? void 0 : t2.map((r2) => {
          let s4 = { meeting_url: r2.meetingURL };
          return r2.metadata && (s4.metadata = r2.metadata), s4;
        }) };
        yield this.signal.stopHLSStreaming(i2);
      }
      yield this.signal.stopHLSStreaming();
    });
  }
  sendHLSTimedMetadata(e2) {
    return d$3(this, null, function* () {
      if (e2.length > 0) {
        let t2 = { metadata_objs: e2 };
        yield this.signal.sendHLSTimedMetadata(t2);
      }
    });
  }
  changeName(e2) {
    return d$3(this, null, function* () {
      let t2 = this.store.getLocalPeer();
      t2 && t2.name !== e2 && (yield this.signal.updatePeer({ name: e2 }));
    });
  }
  changeMetadata(e2) {
    return d$3(this, null, function* () {
      yield this.signal.updatePeer({ data: e2 });
    });
  }
  getSessionMetadata(e2) {
    return this.signal.getSessionMetadata(e2);
  }
  setSessionMetadata(e2) {
    return this.signal.setSessionMetadata(e2);
  }
  listenMetadataChange(e2) {
    return this.signal.listenMetadataChange(e2);
  }
  setPollInfo(e2) {
    return this.signal.setPollInfo(e2);
  }
  getPollInfo(e2) {
    return this.signal.getPollInfo(e2);
  }
  setPollQuestions(e2) {
    return this.signal.setPollQuestions(e2);
  }
  getPollQuestions(e2) {
    return this.signal.getPollQuestions(e2);
  }
  startPoll(e2) {
    return this.signal.startPoll(e2);
  }
  stopPoll(e2) {
    return this.signal.stopPoll(e2);
  }
  setPollResponses(e2) {
    return this.signal.setPollResponses(e2);
  }
  getPollResponses(e2) {
    return this.signal.getPollResponses(e2);
  }
  getPollsList(e2) {
    return this.signal.getPollsList(e2);
  }
  getPollResult(e2) {
    return this.signal.getPollResult(e2);
  }
  changeTrackState(e2) {
    return d$3(this, null, function* () {
      yield this.signal.requestTrackStateChange(e2);
    });
  }
  changeMultiTrackState(e2) {
    return d$3(this, null, function* () {
      yield this.signal.requestMultiTrackStateChange(e2);
    });
  }
  publishTrack(e2) {
    return d$3(this, null, function* () {
      e2.publishedTrackId = e2.getTrackIDBeingSent(), o$2.d(k$2, `\u23F3 publishTrack: trackId=${e2.trackId}, toPublishTrackId=${e2.publishedTrackId}`, `${e2}`), this.trackStates.set(e2.publishedTrackId, new $e$1(e2));
      let t2 = new Promise((s4, a2) => {
        this.callbacks.set(ye$1, { promise: { resolve: s4, reject: a2 }, action: "PUBLISH", extra: {} });
      }), i2 = e2.stream;
      i2.setConnection(this.publishConnection);
      let r2 = this.store.getSimulcastLayers(e2.source);
      i2.addTransceiver(e2, r2), o$2.time(`publish-${e2.trackId}-${e2.type}`), yield t2, o$2.timeEnd(`publish-${e2.trackId}-${e2.type}`), this.store.addTrack(e2), yield i2.setMaxBitrateAndFramerate(e2).then(() => {
        o$2.d(k$2, `Setting maxBitrate=${e2.settings.maxBitrate} kpbs${e2 instanceof F$2 ? ` and maxFramerate=${e2.settings.maxFramerate}` : ""} for ${e2.source} ${e2.type} ${e2.trackId}`);
      }).catch((s4) => o$2.w(k$2, "Failed setting maxBitrate and maxFramerate", s4)), e2.isPublished = true, o$2.d(k$2, `\u2705 publishTrack: trackId=${e2.trackId}`, `${e2}`, this.callbacks);
    });
  }
  unpublishTrack(e2) {
    return d$3(this, null, function* () {
      if (o$2.d(k$2, `\u23F3 unpublishTrack: trackId=${e2.trackId}`, `${e2}`), e2.publishedTrackId && this.trackStates.has(e2.publishedTrackId))
        this.trackStates.delete(e2.publishedTrackId);
      else {
        let s4 = Array.from(this.trackStates.values()).find((a2) => e2.type === a2.type && e2.source === a2.source);
        s4 && this.trackStates.delete(s4.track_id);
      }
      let t2 = new Promise((r2, s4) => {
        this.callbacks.set(ye$1, { promise: { resolve: r2, reject: s4 }, action: "UNPUBLISH", extra: {} });
      });
      e2.stream.removeSender(e2), yield t2, yield e2.cleanup(), this.store.removeTrack(e2), o$2.d(k$2, `\u2705 unpublishTrack: trackId=${e2.trackId}`, this.callbacks);
    });
  }
  waitForLocalRoleAvailability() {
    if (!this.store.hasRoleDetailsArrived())
      return new Promise((e2) => {
        this.eventBus.policyChange.subscribeOnce(() => e2());
      });
  }
  createConnectionsAndNegotiateJoin(e2, t2 = false) {
    return d$3(this, null, function* () {
      let i2 = this.doesLocalPeerNeedWebRTC();
      i2 && this.createPeerConnections(), this.analyticsTimer.start("join_response_time"), yield this.negotiateJoinWithRetry({ name: e2.name, data: e2.metaData, autoSubscribeVideo: t2, isWebRTC: i2 }), this.analyticsTimer.end("join_response_time");
    });
  }
  createPeerConnections() {
    this.initConfig && (this.publishConnection || (this.publishConnection = new je$1(this.signal, this.initConfig.rtcConfiguration, this.publishConnectionObserver)), this.subscribeConnection || (this.subscribeConnection = new Je$1(this.signal, this.initConfig.rtcConfiguration, this.isFlagEnabled.bind(this), this.subscribeConnectionObserver)));
  }
  negotiateJoinWithRetry(s4) {
    return d$3(this, arguments, function* ({ name: e2, data: t2, autoSubscribeVideo: i2, isWebRTC: r2 = true }) {
      try {
        yield this.negotiateJoin({ name: e2, data: t2, autoSubscribeVideo: i2, isWebRTC: r2 });
      } catch (a2) {
        o$2.e(k$2, "Join negotiation failed \u274C", a2);
        let c2 = a2 instanceof v$3 ? a2 : p$3.WebsocketMethodErrors.ServerErrors(500, "JOIN", `Websocket join error - ${a2.message}`), l2 = parseInt(`${c2.code / 100}`) === 5 || [f$3.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, 429].includes(c2.code);
        if (c2.code === 410 && (c2.isTerminal = true), l2) {
          this.joinRetryCount = 0, c2.isTerminal = false;
          let h2 = () => d$3(this, null, function* () {
            return this.joinRetryCount++, yield this.negotiateJoin({ name: e2, data: t2, autoSubscribeVideo: i2, isWebRTC: r2 });
          });
          yield this.retryScheduler.schedule({ category: 2, error: c2, task: h2, originalState: "Joined", maxFailedRetries: 3, changeState: false });
        } else
          throw a2;
      }
    });
  }
  negotiateJoin(s4) {
    return d$3(this, arguments, function* ({ name: e2, data: t2, autoSubscribeVideo: i2, isWebRTC: r2 = true }) {
      return r2 ? yield this.negotiateJoinWebRTC({ name: e2, data: t2, autoSubscribeVideo: i2 }) : yield this.negotiateJoinNonWebRTC({ name: e2, data: t2, autoSubscribeVideo: i2 });
    });
  }
  negotiateJoinWebRTC(r2) {
    return d$3(this, arguments, function* ({ name: e2, data: t2, autoSubscribeVideo: i2 }) {
      if (o$2.d(k$2, "\u23F3 join: Negotiating over PUBLISH connection"), !this.publishConnection)
        return o$2.e(k$2, "Publish peer connection not found, cannot negotiate"), false;
      let s4 = yield this.publishConnection.createOffer();
      yield this.publishConnection.setLocalDescription(s4);
      let a2 = this.isFlagEnabled("subscribeDegradation"), c2 = this.isFlagEnabled("simulcast"), l2 = this.isFlagEnabled("onDemandTracks"), h2 = yield this.signal.join(e2, t2, !i2, a2, c2, l2, s4);
      yield this.publishConnection.setRemoteDescription(h2);
      for (let u2 of this.publishConnection.candidates)
        yield this.publishConnection.addIceCandidate(u2);
      return this.publishConnection.initAfterJoin(), !!h2;
    });
  }
  negotiateJoinNonWebRTC(r2) {
    return d$3(this, arguments, function* ({ name: e2, data: t2, autoSubscribeVideo: i2 }) {
      o$2.d(k$2, "\u23F3 join: Negotiating Non-WebRTC");
      let s4 = this.isFlagEnabled("subscribeDegradation"), a2 = this.isFlagEnabled("simulcast"), c2 = this.isFlagEnabled("onDemandTracks");
      return !!(yield this.signal.join(e2, t2, !i2, s4, a2, c2));
    });
  }
  negotiateOnFirstPublish() {
    return d$3(this, null, function* () {
      if (o$2.d(k$2, "\u23F3 Negotiating offer over PUBLISH connection"), !this.publishConnection)
        return o$2.e(k$2, "Publish peer connection not found, cannot negotiate"), false;
      let e2 = yield this.publishConnection.createOffer(this.trackStates);
      yield this.publishConnection.setLocalDescription(e2);
      let t2 = yield this.signal.offer(e2, this.trackStates);
      yield this.publishConnection.setRemoteDescription(t2);
      for (let i2 of this.publishConnection.candidates)
        yield this.publishConnection.addIceCandidate(i2);
      return this.publishConnection.initAfterJoin(), !!t2;
    });
  }
  performPublishRenegotiation(e2) {
    return d$3(this, null, function* () {
      o$2.d(k$2, "\u23F3 [role=PUBLISH] onRenegotiationNeeded START", this.trackStates);
      let t2 = this.callbacks.get(ye$1);
      if (t2) {
        if (!this.publishConnection) {
          o$2.e(k$2, "Publish peer connection not found, cannot renegotiate");
          return;
        }
        try {
          let i2 = yield this.publishConnection.createOffer(this.trackStates, e2);
          yield this.publishConnection.setLocalDescription(i2), o$2.time("renegotiation-offer-exchange");
          let r2 = yield this.signal.offer(i2, this.trackStates);
          this.callbacks.delete(ye$1), o$2.timeEnd("renegotiation-offer-exchange"), yield this.publishConnection.setRemoteDescription(r2), t2.promise.resolve(true), o$2.d(k$2, "[role=PUBLISH] onRenegotiationNeeded DONE \u2705");
        } catch (i2) {
          let r2;
          i2 instanceof v$3 ? r2 = i2 : r2 = p$3.GenericErrors.Unknown("PUBLISH", i2.message), t2.promise.reject(r2), o$2.d(k$2, "[role=PUBLISH] onRenegotiationNeeded FAILED \u274C");
        }
      }
    });
  }
  handleIceConnectionFailure(e2, t2) {
    return d$3(this, null, function* () {
      this.retryScheduler.isTaskInProgress(4) || (e2 === 0 ? this.retryScheduler.schedule({ category: 3, error: t2, task: this.retryPublishIceFailedTask, originalState: "Joined" }) : this.retryScheduler.schedule({ category: 4, error: t2, task: this.retrySubscribeIceFailedTask, originalState: "Joined", maxFailedRetries: 1 }));
    });
  }
  internalConnect(e2, t2, i2) {
    return d$3(this, null, function* () {
      o$2.d(k$2, "connect: started \u23F0");
      let r2 = new Date();
      try {
        return this.analyticsTimer.start("init_response_time"), this.initConfig = yield ze$1.fetchInitConfig({ token: e2, peerId: i2, userAgent: this.store.getUserAgent(), initEndpoint: t2 }), this.analyticsTimer.end("init_response_time"), J$3.setWebsocketEndpoint(this.initConfig.endpoint), this.validateNotDisconnected("post init"), yield this.openSignal(e2, i2), this.observer.onConnected(), this.store.setSimulcastEnabled(this.isFlagEnabled("simulcast")), o$2.d(k$2, "Adding Analytics Transport: JsonRpcSignal"), this.analyticsEventsService.setTransport(this.analyticsSignalTransport), this.analyticsEventsService.flush(), this.initConfig;
      } catch (s4) {
        throw this.state !== "Reconnecting" && this.eventBus.analytics.publish(E$3.connect(s4, this.getAdditionalAnalyticsProperties(), r2, new Date(), t2)), o$2.e(k$2, "\u274C internal connect: failed", s4), s4;
      }
    });
  }
  validateNotDisconnected(e2) {
    if (this.state === "Disconnected")
      throw o$2.w(k$2, "aborting join as transport state is disconnected"), p$3.GenericErrors.ValidationFailed(`leave called before join could complete - stage=${e2}`);
  }
  openSignal(e2, t2) {
    return d$3(this, null, function* () {
      if (!this.initConfig)
        throw p$3.APIErrors.InitConfigNotAvailable("INIT", "Init Config not found");
      o$2.d(k$2, "\u23F3 internal connect: connecting to ws endpoint", this.initConfig.endpoint);
      let i2 = new URL(this.initConfig.endpoint);
      i2.searchParams.set("peer", t2), i2.searchParams.set("token", e2), i2.searchParams.set("user_agent_v2", this.store.getUserAgent()), this.endpoint = i2.toString(), this.analyticsTimer.start("ws_connect_time"), yield this.signal.open(this.endpoint), this.analyticsTimer.end("ws_connect_time"), this.analyticsTimer.start("on_policy_change_time"), this.analyticsTimer.start("room_state_time"), o$2.d(k$2, "\u2705 internal connect: connected to ws endpoint");
    });
  }
  initRtcStatsMonitor() {
    return d$3(this, null, function* () {
      var e2, t2, i2, r2, s4, a2, c2;
      (i2 = this.webrtcInternals) == null || i2.setPeerConnections({ publish: (e2 = this.publishConnection) == null ? void 0 : e2.nativeConnection, subscribe: (t2 = this.subscribeConnection) == null ? void 0 : t2.nativeConnection }), this.isFlagEnabled("publishStats") && (this.publishStatsAnalytics = new xt$1(this.store, this.eventBus, (s4 = (r2 = this.initConfig) == null ? void 0 : r2.config.publishStats) == null ? void 0 : s4.maxSampleWindowSize, (c2 = (a2 = this.initConfig) == null ? void 0 : a2.config.publishStats) == null ? void 0 : c2.maxSamplePushInterval));
    });
  }
  doesRoleNeedWebRTC(e2) {
    var r2, s4;
    if (!this.isFlagEnabled("nonWebRTCDisableOffer"))
      return true;
    let t2 = !!(e2.publishParams.allowed && ((r2 = e2.publishParams.allowed) == null ? void 0 : r2.length) > 0), i2 = !!(e2.subscribeParams.subscribeToRoles && ((s4 = e2.subscribeParams.subscribeToRoles) == null ? void 0 : s4.length) > 0);
    return t2 || i2;
  }
  doesLocalPeerNeedWebRTC() {
    var t2;
    let e2 = (t2 = this.store.getLocalPeer()) == null ? void 0 : t2.role;
    return e2 ? this.doesRoleNeedWebRTC(e2) : true;
  }
  handleSubscribeConnectionConnected() {
    var t2;
    (t2 = this.subscribeConnection) == null || t2.logSelectedIceCandidatePairs();
    let e2 = this.callbacks.get(Pe$1);
    this.callbacks.delete(Pe$1), e2 && e2.promise.resolve(true);
  }
  setTransportStateForConnect() {
    if (this.state === "Failed" && (this.state = "Disconnected"), this.state !== "Disconnected" && this.state !== "Reconnecting")
      throw p$3.WebsocketMethodErrors.AlreadyJoined("JOIN", `Cannot join a meeting in ${this.state} state`);
    this.state === "Disconnected" && (this.state = "Connecting", this.observer.onStateChange(this.state));
  }
  sendErrorAnalyticsEvent(e2, t2) {
    let i2 = this.getAdditionalAnalyticsProperties(), r2;
    switch (t2) {
      case 0:
        r2 = E$3.connect(e2, i2);
        break;
      case 1:
        r2 = E$3.disconnect(e2, i2);
        break;
      case 2:
        r2 = E$3.join({ error: e2, time: this.analyticsTimer.getTimeTaken("join_time"), init_response_time: this.analyticsTimer.getTimeTaken("init_response_time"), ws_connect_time: this.analyticsTimer.getTimeTaken("ws_connect_time"), on_policy_change_time: this.analyticsTimer.getTimeTaken("on_policy_change_time"), local_audio_track_time: this.analyticsTimer.getTimeTaken("local_audio_track_time"), local_video_track_time: this.analyticsTimer.getTimeTaken("local_video_track_time"), retries_join: this.joinRetryCount });
        break;
      case 3:
        r2 = E$3.publish({ error: e2 });
        break;
      case 4:
        r2 = E$3.subscribeFail(e2);
        break;
    }
    this.eventBus.analytics.publish(r2);
  }
  getSubscribeConnection() {
    return this.subscribeConnection;
  }
  getAdditionalAnalyticsProperties() {
    var a2, c2, l2, h2, u2, m2, S2, T2;
    let e2 = sr(), t2 = typeof document != "undefined" && document.hidden, i2 = this.store.getRemoteVideoTracks().filter((y2) => y2.degraded).length, r2 = (h2 = (l2 = (c2 = (a2 = this.getWebrtcInternals()) == null ? void 0 : a2.getCurrentStats()) == null ? void 0 : c2.getLocalPeerStats()) == null ? void 0 : l2.publish) == null ? void 0 : h2.bitrate, s4 = (T2 = (S2 = (m2 = (u2 = this.getWebrtcInternals()) == null ? void 0 : u2.getCurrentStats()) == null ? void 0 : m2.getLocalPeerStats()) == null ? void 0 : S2.subscribe) == null ? void 0 : T2.bitrate;
    return { network_info: e2, document_hidden: t2, num_degraded_tracks: i2, bitrate: { publish: r2, subscribe: s4 }, max_sub_bitrate: this.maxSubscribeBitrate, recent_pong_response_times: this.signal.getPongResponseTimes(), transport_state: this.state };
  }
};
var nr = (n9, e2, t2) => d$3(void 0, null, function* () {
  let r2 = Error("something went wrong during fetch");
  for (let s4 = 0; s4 < 4; s4++)
    try {
      let a2 = yield fetch(n9, e2), c2 = yield a2.clone().json();
      if (t2 && t2.length && !a2.ok && t2.includes(c2.code))
        throw p$3.APIErrors.ServerErrors(c2.code, "GET_TOKEN", c2.message, false);
      return a2;
    } catch (a2) {
      r2 = a2;
    }
  throw ["Failed to fetch", "NetworkError"].some((s4) => r2.message.includes(s4)) ? p$3.APIErrors.EndpointUnreachable("GET_TOKEN", r2.message) : r2;
});
function Bt$1(n9) {
  if (!n9 || n9.length === 0)
    throw p$3.APIErrors.InvalidTokenFormat("INIT", "Token cannot be an empty string or undefined or null");
  let e2 = n9.split(".");
  if (e2.length !== 3)
    throw p$3.APIErrors.InvalidTokenFormat("INIT", "Expected 3 '.' separate fields - header, payload and signature respectively");
  let t2 = atob(e2[1]);
  try {
    let i2 = JSON.parse(t2);
    return { roomId: i2.room_id, userId: i2.user_id, role: i2.role };
  } catch (i2) {
    throw p$3.APIErrors.InvalidTokenFormat("INIT", `couldn't parse to json - ${i2.message}`);
  }
}
var or = { published: false, isInitialised: false, isReconnecting: false, isPreviewInProgress: false, isPreviewCalled: false, isJoinInProgress: false, deviceManagersInitialised: false }, cr = class {
  constructor() {
    this.TAG = "[HMSSdk]:";
    this.transportState = "Disconnected";
    this.analyticsTimer = new tt$1();
    this.sdkState = g$1({}, or);
    this.handleAutoplayError = (e2) => {
      var t2, i2;
      (i2 = (t2 = this.errorListener) == null ? void 0 : t2.onError) == null || i2.call(t2, e2);
    };
    this.observer = { onNotification: (e2) => {
      var t2;
      if (e2.method === "on-peer-leave-request") {
        this.handlePeerLeaveRequest(e2.params);
        return;
      }
      switch (e2.method) {
        case "on-policy-change":
          this.analyticsTimer.end("on_policy_change_time");
          break;
        case "peer-list":
          this.analyticsTimer.end("peer_list_time"), this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled);
          break;
        case "room-state":
          this.analyticsTimer.end("room_state_time");
          break;
      }
      (t2 = this.notificationManager) == null || t2.handleNotification(e2, this.sdkState.isReconnecting);
    }, onConnected: () => {
      this.initNotificationManager();
    }, onTrackAdd: (e2) => {
      var t2;
      (t2 = this.notificationManager) == null || t2.handleTrackAdd(e2);
    }, onTrackRemove: (e2) => {
      var t2;
      (t2 = this.notificationManager) == null || t2.handleTrackRemove(e2);
    }, onFailure: (e2) => {
      var t2;
      (t2 = this.errorListener) == null || t2.onError(e2);
    }, onStateChange: (e2, t2) => d$3(this, null, function* () {
      var r2, s4;
      let i2 = (a2) => d$3(this, null, function* () {
        var c2, l2;
        yield this.internalLeave(true, a2), !this.sdkState.isPreviewInProgress && !this.sdkState.isJoinInProgress && ((l2 = (c2 = this.errorListener) == null ? void 0 : c2.onError) == null || l2.call(c2, a2)), this.sdkState.isReconnecting = false;
      });
      switch (e2) {
        case "Preview":
        case "Joined":
          this.initNotificationManager(), this.transportState === "Reconnecting" && ((r2 = this.listener) == null || r2.onReconnected());
          break;
        case "Failed":
          yield i2(t2);
          break;
        case "Reconnecting":
          this.sdkState.isReconnecting = true, (s4 = this.listener) == null || s4.onReconnecting(t2);
          break;
      }
      this.transportState = e2, o$2.d(this.TAG, "Transport State Change", this.transportState);
    }) };
    this.handlePeerLeaveRequest = (e2) => {
      var r2;
      let t2 = e2.requested_by ? this.store.getPeerById(e2.requested_by) : void 0, i2 = { roomEnded: e2.room_end, reason: e2.reason, requestedBy: t2 };
      (r2 = this.listener) == null || r2.onRemovedFromRoom(i2), this.internalLeave(false);
    };
    this.handleDeviceChange = (e2) => {
      var t2, i2, r2, s4, a2, c2;
      if (o$2.d(this.TAG, "Device Change event", e2), (i2 = (t2 = this.deviceChangeListener) == null ? void 0 : t2.onDeviceChange) == null || i2.call(t2, e2), e2.error && e2.type) {
        let l2 = e2.type.includes("audio") ? (r2 = this.localPeer) == null ? void 0 : r2.audioTrack : (s4 = this.localPeer) == null ? void 0 : s4.videoTrack;
        (a2 = this.errorListener) == null || a2.onError(e2.error), [f$3.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE, f$3.TracksErrors.DEVICE_IN_USE, f$3.TracksErrors.DEVICE_NOT_AVAILABLE].includes(e2.error.code) && l2 && (l2.setEnabled(false), (c2 = this.listener) == null || c2.onTrackUpdate(2, l2, this.localPeer));
      }
    };
    this.handleAudioPluginError = (e2) => {
      var t2;
      o$2.e(this.TAG, "Audio Plugin Error event", e2), (t2 = this.errorListener) == null || t2.onError(e2);
    };
    this.handleLocalRoleUpdate = (i2) => d$3(this, [i2], function* ({ oldRole: e2, newRole: t2 }) {
      var r2;
      yield this.transport.handleLocalRoleUpdate({ oldRole: e2, newRole: t2 }), yield (r2 = this.roleChangeManager) == null ? void 0 : r2.handleLocalPeerRoleUpdate({ oldRole: e2, newRole: t2 });
    });
    this.sendAudioPresenceFailed = () => {
      let e2 = p$3.TracksErrors.NoAudioDetected("PREVIEW");
      o$2.w(this.TAG, "Audio Presence Failure", this.transportState, e2);
    };
    this.sendJoinAnalyticsEvent = (e2 = false, t2) => {
      this.eventBus.analytics.publish(E$3.join(M$1(g$1({ error: t2 }, this.analyticsTimer.getTimes()), { time: this.analyticsTimer.getTimeTaken("join_time"), is_preview_called: e2, retries_join: this.transport.joinRetryCount })));
    };
    this.sendPreviewAnalyticsEvent = (e2) => {
      this.eventBus.analytics.publish(E$3.preview(M$1(g$1({ error: e2 }, this.analyticsTimer.getTimes()), { time: this.analyticsTimer.getTimeTaken("preview_time") })));
    };
    this.sendAnalyticsEvent = (e2) => {
      this.analyticsEventsService.queue(e2).flush();
    };
  }
  initNotificationManager() {
    this.notificationManager || (this.notificationManager = new Rt$1(this.store, this.eventBus, this.transport, this.listener, this.audioListener));
  }
  initStoreAndManagers() {
    var e2;
    if (this.sdkState.isInitialised) {
      (e2 = this.notificationManager) == null || e2.setListener(this.listener), this.audioSinkManager.setListener(this.listener), this.interactivityCenter.setListener(this.listener);
      return;
    }
    this.sdkState.isInitialised = true, this.store = new Ue$1(), this.eventBus = new St$1(), this.wakeLockManager = new pt$1(), this.networkTestManager = new ht$1(this.eventBus, this.listener), this.playlistManager = new We$1(this, this.eventBus), this.deviceManager = new Be$1(this.store, this.eventBus), this.audioSinkManager = new Ve(this.store, this.deviceManager, this.eventBus), this.audioOutput = new gt$1(this.deviceManager, this.audioSinkManager), this.audioSinkManager.setListener(this.listener), this.eventBus.autoplayError.subscribe(this.handleAutoplayError), this.localTrackManager = new j$2(this.store, this.observer, this.deviceManager, this.eventBus, this.analyticsTimer), this.analyticsEventsService = new mt$1(this.store), this.transport = new Xe$1(this.observer, this.deviceManager, this.store, this.eventBus, this.analyticsEventsService, this.analyticsTimer), this.sessionStore = new Ht(this.transport), this.interactivityCenter = new Ke$1(this.transport, this.store, this.listener), this.eventBus.analytics.subscribe(this.sendAnalyticsEvent), this.eventBus.deviceChange.subscribe(this.handleDeviceChange), this.eventBus.audioPluginFailed.subscribe(this.handleAudioPluginError);
  }
  validateJoined(e2) {
    if (!this.localPeer)
      throw p$3.GenericErrors.NotConnected("VALIDATION", `Not connected - ${e2}`);
  }
  sendHLSAnalytics(e2) {
    this.sendAnalyticsEvent(E$3.hlsPlayerError(e2));
  }
  refreshDevices() {
    return d$3(this, null, function* () {
      this.validateJoined("refreshDevices"), yield this.deviceManager.init(true);
    });
  }
  getWebrtcInternals() {
    var e2;
    return (e2 = this.transport) == null ? void 0 : e2.getWebrtcInternals();
  }
  getSessionStore() {
    return this.sessionStore;
  }
  getPlaylistManager() {
    return this.playlistManager;
  }
  getRecordingState() {
    var e2;
    return (e2 = this.store.getRoom()) == null ? void 0 : e2.recording;
  }
  getRTMPState() {
    var e2;
    return (e2 = this.store.getRoom()) == null ? void 0 : e2.rtmp;
  }
  getHLSState() {
    var e2;
    return (e2 = this.store.getRoom()) == null ? void 0 : e2.hls;
  }
  getTemplateAppData() {
    return this.store.getTemplateAppData();
  }
  getInteractivityCenter() {
    return this.interactivityCenter;
  }
  get localPeer() {
    var e2;
    return (e2 = this.store) == null ? void 0 : e2.getLocalPeer();
  }
  preview(e2, t2) {
    return d$3(this, null, function* () {
      if (ai(), si(), this.sdkState.isPreviewInProgress)
        return Promise.reject(p$3.GenericErrors.PreviewAlreadyInProgress("PREVIEW", "Preview already called"));
      this.analyticsTimer.start("preview_time"), this.setUpPreview(e2, t2), e2.alwaysRequestPermissions && this.localTrackManager.requestPermissions().then(() => d$3(this, null, function* () {
        yield this.initDeviceManagers();
      }));
      let i2 = false, r2 = false, s4 = setTimeout(() => {
        var a2, c2;
        (!i2 || !r2) && ((c2 = (a2 = this.listener) == null ? void 0 : a2.onNetworkQuality) == null || c2.call(a2, -1));
      }, 3e3);
      return new Promise((a2, c2) => {
        let l2 = () => d$3(this, null, function* () {
          var S2;
          if (this.localPeer) {
            let T2 = e2.asRole && this.store.getPolicyForRole(e2.asRole);
            this.localPeer.asRole = T2 || this.localPeer.role;
          }
          let u2 = yield this.localTrackManager.getTracksToPublish(e2.settings);
          u2.forEach((T2) => this.setLocalPeerTrack(T2)), (S2 = this.localPeer) != null && S2.audioTrack && this.initPreviewTrackAudioLevelMonitor(), yield this.initDeviceManagers(), this.sdkState.isPreviewInProgress = false, this.analyticsTimer.end("preview_time");
          let m2 = this.store.getRoom();
          m2 && t2.onPreview(m2, u2), this.sendPreviewAnalyticsEvent(), a2();
        }), h2 = (u2) => {
          var m2;
          this.analyticsTimer.end("preview_time"), u2 && ((m2 = this.errorListener) == null || m2.onError(u2)), this.sendPreviewAnalyticsEvent(u2), this.sdkState.isPreviewInProgress = false, c2(u2);
        };
        this.eventBus.policyChange.subscribeOnce(l2), this.eventBus.leave.subscribeOnce(h2), this.transport.preview(e2.authToken, e2.initEndpoint, this.localPeer.peerId, { name: e2.userName, metaData: e2.metaData || "" }, e2.autoVideoSubscribe).then((u2) => {
          var m2;
          i2 = true, clearTimeout(s4), u2 && e2.captureNetworkQualityInPreview && this.networkTestManager.start((m2 = u2.config) == null ? void 0 : m2.networkHealth).then(() => {
            r2 = true;
          });
        }).catch(h2);
      });
    });
  }
  join(e2, t2) {
    return d$3(this, null, function* () {
      var l2, h2, u2, m2, S2, T2;
      if (ai(), si(), this.sdkState.isPreviewInProgress)
        throw p$3.GenericErrors.NotReady("JOIN", "Preview is in progress, can't join");
      this.analyticsTimer.start("join_time"), this.sdkState.isJoinInProgress = true;
      let { roomId: i2, userId: r2, role: s4 } = Bt$1(e2.authToken), a2 = ((h2 = (l2 = this.localPeer) == null ? void 0 : l2.asRole) == null ? void 0 : h2.name) || ((m2 = (u2 = this.localPeer) == null ? void 0 : u2.role) == null ? void 0 : m2.name);
      (S2 = this.networkTestManager) == null || S2.stop(), this.listener = t2, this.commonSetup(e2, i2, t2), this.removeDevicesFromConfig(e2), this.store.setConfig(e2), this.store.createAndSetUserAgent(this.frameworkInfo), ee$1.resumeContext();
      let c2 = this.store.getConfig();
      c2 != null && c2.autoManageWakeLock && this.wakeLockManager.acquireLock(), this.localPeer ? (this.localPeer.name = e2.userName, this.localPeer.role = this.store.getPolicyForRole(s4), this.localPeer.customerUserId = r2, this.localPeer.metadata = e2.metaData, delete this.localPeer.asRole) : this.createAndAddLocalPeerToStore(e2, s4, r2), this.roleChangeManager = new Ge$1(this.store, this.transport, this.deviceManager, this.getAndPublishTracks.bind(this), this.removeTrack.bind(this), this.listener), this.eventBus.localRoleUpdate.subscribe(this.handleLocalRoleUpdate), o$2.d(this.TAG, `\u23F3 Joining room ${i2}`), o$2.time(`join-room-${i2}`);
      try {
        yield this.transport.join(e2.authToken, this.localPeer.peerId, { name: e2.userName, metaData: e2.metaData }, e2.initEndpoint, e2.autoVideoSubscribe), o$2.d(this.TAG, `\u2705 Joined room ${i2}`), this.analyticsTimer.start("peer_list_time"), yield this.notifyJoin(), this.sdkState.isJoinInProgress = false, yield this.publish(e2.settings, a2);
      } catch (y2) {
        throw this.analyticsTimer.end("join_time"), this.sdkState.isJoinInProgress = false, (T2 = this.listener) == null || T2.onError(y2), this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled, y2), o$2.e(this.TAG, "Unable to join room", y2), y2;
      }
      o$2.timeEnd(`join-room-${i2}`);
    });
  }
  stringifyMetadata(e2) {
    e2.metaData && typeof e2.metaData != "string" ? e2.metaData = JSON.stringify(e2.metaData) : e2.metaData || (e2.metaData = "");
  }
  cleanup() {
    var e2, t2, i2;
    this.cleanDeviceManagers(), this.eventBus.analytics.unsubscribe(this.sendAnalyticsEvent), this.analyticsTimer.cleanup(), O$2.cleanup(), this.playlistManager.cleanup(), (e2 = this.wakeLockManager) == null || e2.cleanup(), j$2.cleanup(), this.notificationManager = void 0, o$2.cleanup(), this.sdkState = g$1({}, or), this.localPeer && ((t2 = this.localPeer.audioTrack) == null || t2.cleanup(), this.localPeer.audioTrack = void 0, (i2 = this.localPeer.videoTrack) == null || i2.cleanup(), this.localPeer.videoTrack = void 0), this.store.cleanup(), this.listener = void 0, this.roleChangeManager && this.eventBus.localRoleUpdate.unsubscribe(this.handleLocalRoleUpdate);
  }
  leave(e2) {
    return this.internalLeave(e2);
  }
  internalLeave(e2 = true, t2) {
    return d$3(this, null, function* () {
      var r2, s4, a2;
      let i2 = (r2 = this.store) == null ? void 0 : r2.getRoom();
      if (i2) {
        let c2 = i2.id;
        (s4 = this.networkTestManager) == null || s4.stop(), this.eventBus.leave.publish(t2), o$2.d(this.TAG, `\u23F3 Leaving room ${c2}`), yield (a2 = this.transport) == null ? void 0 : a2.leave(e2), this.cleanup(), o$2.d(this.TAG, `\u2705 Left room ${c2}`);
      }
    });
  }
  getAuthTokenByRoomCode(e2, t2) {
    return d$3(this, null, function* () {
      let i2 = (t2 || {}).endpoint || "https://auth.100ms.live/v2/token";
      this.analyticsTimer.start("GET_TOKEN");
      let r2 = yield nr(i2, { method: "POST", body: JSON.stringify({ code: e2.roomCode, user_id: e2.userId }) }, [429, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]), s4 = yield r2.json();
      if (this.analyticsTimer.end("GET_TOKEN"), !r2.ok)
        throw p$3.APIErrors.ServerErrors(s4.code, "GET_TOKEN", s4.message, false);
      let { token: a2 } = s4;
      if (!a2)
        throw Error(s4.message);
      return a2;
    });
  }
  getLocalPeer() {
    return this.store.getLocalPeer();
  }
  getPeers() {
    return this.store.getPeers();
  }
  getPeerMap() {
    return this.store.getPeerMap();
  }
  getAudioOutput() {
    return this.audioOutput;
  }
  sendMessage(e2, t2) {
    this.sendMessageInternal({ message: t2, type: e2 });
  }
  sendBroadcastMessage(e2, t2) {
    return d$3(this, null, function* () {
      return yield this.sendMessageInternal({ message: e2, type: t2 });
    });
  }
  sendGroupMessage(e2, t2, i2) {
    return d$3(this, null, function* () {
      let r2 = this.store.getKnownRoles();
      if ((t2.filter((a2) => r2[a2.name]) || []).length === 0)
        throw p$3.GenericErrors.ValidationFailed("No valid role is present", t2);
      return yield this.sendMessageInternal({ message: e2, recipientRoles: t2, type: i2 });
    });
  }
  sendDirectMessage(e2, t2, i2) {
    return d$3(this, null, function* () {
      var s4;
      if (!this.store.getPeerById(t2.peerId))
        throw p$3.GenericErrors.ValidationFailed("Invalid peer - peer not present in the room", t2);
      if (((s4 = this.localPeer) == null ? void 0 : s4.peerId) === t2.peerId)
        throw p$3.GenericErrors.ValidationFailed("Cannot send message to self");
      return yield this.sendMessageInternal({ message: e2, recipientPeer: t2, type: i2 });
    });
  }
  sendMessageInternal(s4) {
    return d$3(this, arguments, function* ({ recipientRoles: e2, recipientPeer: t2, type: i2 = "chat", message: r2 }) {
      if (r2.replace(/\u200b/g, " ").trim() === "")
        throw o$2.w(this.TAG, "sendMessage", "Ignoring empty message send"), p$3.GenericErrors.ValidationFailed("Empty message not allowed");
      let a2 = new ne$1({ sender: this.localPeer, type: i2, message: r2, recipientPeer: t2, recipientRoles: e2, time: new Date() });
      o$2.d(this.TAG, "Sending Message: ", a2);
      let c2 = yield this.transport.sendMessage(a2);
      return a2.time = new Date(c2.timestamp), a2.id = c2.message_id, a2;
    });
  }
  startScreenShare(e2, t2) {
    return d$3(this, null, function* () {
      var c2, l2, h2;
      let i2 = this.store.getPublishParams();
      if (!i2)
        return;
      let { allowed: r2 } = i2;
      if (!(r2 && r2.includes("screen"))) {
        o$2.e(this.TAG, `Role ${(c2 = this.localPeer) == null ? void 0 : c2.role} cannot share screen`);
        return;
      }
      if ((h2 = (l2 = this.localPeer) == null ? void 0 : l2.auxiliaryTracks) != null && h2.find((u2) => u2.source === "screen"))
        throw Error("Cannot share multiple screens");
      let a2 = yield this.getScreenshareTracks(e2, t2);
      if (!this.localPeer) {
        o$2.d(this.TAG, "Screenshared when not connected"), a2.forEach((u2) => {
          u2.cleanup();
        });
        return;
      }
      yield this.transport.publish(a2), a2.forEach((u2) => {
        var m2, S2, T2;
        u2.peerId = (m2 = this.localPeer) == null ? void 0 : m2.peerId, (S2 = this.localPeer) == null || S2.auxiliaryTracks.push(u2), (T2 = this.listener) == null || T2.onTrackUpdate(0, u2, this.localPeer);
      });
    });
  }
  stopEndedScreenshare(e2) {
    return d$3(this, null, function* () {
      o$2.d(this.TAG, "\u2705 Screenshare ended natively"), yield this.stopScreenShare(), e2();
    });
  }
  stopScreenShare() {
    return d$3(this, null, function* () {
      var t2;
      o$2.d(this.TAG, "\u2705 Screenshare ended from app");
      let e2 = (t2 = this.localPeer) == null ? void 0 : t2.auxiliaryTracks.filter((i2) => i2.source === "screen");
      if (e2)
        for (let i2 of e2)
          yield this.removeTrack(i2.trackId);
    });
  }
  addTrack(e2, t2 = "regular") {
    return d$3(this, null, function* () {
      var h2, u2, m2, S2;
      if (!e2) {
        o$2.w(this.TAG, "Please pass a valid MediaStreamTrack");
        return;
      }
      if (!this.localPeer)
        throw p$3.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot addTrack");
      if (this.localPeer.auxiliaryTracks.find((T2) => T2.trackId === e2.id))
        return;
      let r2 = e2.kind, s4 = new MediaStream([e2]), a2 = new se(s4), c2 = r2 === "audio" ? pe : F$2, l2 = new c2(a2, e2, t2, this.eventBus);
      this.setPlaylistSettings({ track: e2, hmsTrack: l2, source: t2 }), yield (h2 = this.transport) == null ? void 0 : h2.publish([l2]), l2.peerId = (u2 = this.localPeer) == null ? void 0 : u2.peerId, (m2 = this.localPeer) == null || m2.auxiliaryTracks.push(l2), (S2 = this.listener) == null || S2.onTrackUpdate(0, l2, this.localPeer);
    });
  }
  removeTrack(e2, t2 = false) {
    return d$3(this, null, function* () {
      var r2;
      if (!this.localPeer)
        throw p$3.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot removeTrack");
      let i2 = this.localPeer.auxiliaryTracks.findIndex((s4) => s4.trackId === e2);
      if (i2 > -1) {
        let s4 = this.localPeer.auxiliaryTracks[i2];
        s4.isPublished ? yield this.transport.unpublish([s4]) : yield s4.cleanup(), t2 || this.stopPlaylist(s4), this.localPeer.auxiliaryTracks.splice(i2, 1), (r2 = this.listener) == null || r2.onTrackUpdate(1, s4, this.localPeer);
      } else
        o$2.w(this.TAG, `No track found for ${e2}`);
    });
  }
  setAnalyticsLevel(e2) {
    this.analyticsEventsService.level = e2;
  }
  setLogLevel(e2) {
    o$2.level = e2;
  }
  addAudioListener(e2) {
    var t2;
    this.audioListener = e2, (t2 = this.notificationManager) == null || t2.setAudioListener(e2);
  }
  addConnectionQualityListener(e2) {
    var t2;
    (t2 = this.notificationManager) == null || t2.setConnectionQualityListener(e2);
  }
  changeRole(e2, t2, i2 = false) {
    return d$3(this, null, function* () {
      var r2;
      !e2.role || e2.role.name === t2 || (yield (r2 = this.transport) == null ? void 0 : r2.changeRoleOfPeer(e2, t2, i2));
    });
  }
  changeRoleOfPeer(e2, t2, i2 = false) {
    return d$3(this, null, function* () {
      var r2;
      !e2.role || e2.role.name === t2 || (yield (r2 = this.transport) == null ? void 0 : r2.changeRoleOfPeer(e2, t2, i2));
    });
  }
  changeRoleOfPeersWithRoles(e2, t2) {
    return d$3(this, null, function* () {
      var i2;
      e2.length <= 0 || !t2 || (yield (i2 = this.transport) == null ? void 0 : i2.changeRoleOfPeersWithRoles(e2, t2));
    });
  }
  acceptChangeRole(e2) {
    return d$3(this, null, function* () {
      var t2;
      yield (t2 = this.transport) == null ? void 0 : t2.acceptRoleChange(e2);
    });
  }
  endRoom(e2, t2) {
    return d$3(this, null, function* () {
      var i2;
      if (!this.localPeer)
        throw p$3.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot end room");
      yield (i2 = this.transport) == null ? void 0 : i2.endRoom(e2, t2), yield this.leave();
    });
  }
  removePeer(e2, t2) {
    return d$3(this, null, function* () {
      var i2;
      if (!this.localPeer)
        throw p$3.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot remove peer");
      if (!this.store.getPeerById(e2.peerId))
        throw p$3.GenericErrors.ValidationFailed("Invalid peer, given peer not present in room", e2);
      yield (i2 = this.transport) == null ? void 0 : i2.removePeer(e2.peerId, t2);
    });
  }
  startRTMPOrRecording(e2) {
    return d$3(this, null, function* () {
      var t2;
      if (!this.localPeer)
        throw p$3.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot start streaming or recording");
      yield (t2 = this.transport) == null ? void 0 : t2.startRTMPOrRecording(e2);
    });
  }
  stopRTMPAndRecording() {
    return d$3(this, null, function* () {
      var e2;
      if (!this.localPeer)
        throw p$3.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot stop streaming or recording");
      yield (e2 = this.transport) == null ? void 0 : e2.stopRTMPOrRecording();
    });
  }
  startHLSStreaming(e2) {
    return d$3(this, null, function* () {
      var t2;
      if (!this.localPeer)
        throw p$3.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot start HLS streaming");
      yield (t2 = this.transport) == null ? void 0 : t2.startHLSStreaming(e2);
    });
  }
  stopHLSStreaming(e2) {
    return d$3(this, null, function* () {
      var t2;
      if (!this.localPeer)
        throw p$3.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot stop HLS streaming");
      yield (t2 = this.transport) == null ? void 0 : t2.stopHLSStreaming(e2);
    });
  }
  sendHLSTimedMetadata(e2) {
    return d$3(this, null, function* () {
      var t2;
      this.validateJoined("sendHLSTimedMetadata"), yield (t2 = this.transport) == null ? void 0 : t2.sendHLSTimedMetadata(e2);
    });
  }
  changeName(e2) {
    return d$3(this, null, function* () {
      var t2, i2;
      this.validateJoined("changeName"), yield (t2 = this.transport) == null ? void 0 : t2.changeName(e2), (i2 = this.notificationManager) == null || i2.updateLocalPeer({ name: e2 });
    });
  }
  changeMetadata(e2) {
    return d$3(this, null, function* () {
      var t2, i2;
      this.validateJoined("changeMetadata"), yield (t2 = this.transport) == null ? void 0 : t2.changeMetadata(e2), (i2 = this.notificationManager) == null || i2.updateLocalPeer({ metadata: e2 });
    });
  }
  setSessionMetadata(e2) {
    return d$3(this, null, function* () {
      yield this.transport.setSessionMetadata({ key: "default", data: e2 });
    });
  }
  getSessionMetadata() {
    return d$3(this, null, function* () {
      return (yield this.transport.getSessionMetadata("default")).data;
    });
  }
  getRoles() {
    return Object.values(this.store.getKnownRoles());
  }
  changeTrackState(e2, t2) {
    return d$3(this, null, function* () {
      var r2;
      if (e2.type === "video" && e2.source !== "regular") {
        o$2.w(this.TAG, "Muting non-regular video tracks is currently not supported");
        return;
      }
      if (e2.enabled === t2) {
        o$2.w(this.TAG, `Aborting change track state, track already has enabled - ${t2}`, e2);
        return;
      }
      if (!this.store.getTrackById(e2.trackId))
        throw p$3.GenericErrors.ValidationFailed("No track found for change track state", e2);
      let i2 = this.store.getPeerByTrackId(e2.trackId);
      if (!i2)
        throw p$3.GenericErrors.ValidationFailed("No peer found for change track state", e2);
      yield (r2 = this.transport) == null ? void 0 : r2.changeTrackState({ requested_for: i2.peerId, track_id: e2.trackId, stream_id: e2.stream.id, mute: !t2 });
    });
  }
  changeMultiTrackState(e2) {
    return d$3(this, null, function* () {
      var a2;
      if (typeof e2.enabled != "boolean")
        throw p$3.GenericErrors.ValidationFailed("Pass a boolean for enabled");
      let { enabled: t2, roles: i2, type: r2, source: s4 } = e2;
      yield (a2 = this.transport) == null ? void 0 : a2.changeMultiTrackState({ value: !t2, type: r2, source: s4, roles: i2 == null ? void 0 : i2.map((c2) => c2 == null ? void 0 : c2.name) });
    });
  }
  setFrameworkInfo(e2) {
    this.frameworkInfo = e2;
  }
  attachVideo(e2, t2) {
    return d$3(this, null, function* () {
      let i2 = this.store.getConfig();
      i2 != null && i2.autoManageVideo ? e2.attach(t2) : yield e2.addSink(t2);
    });
  }
  detachVideo(e2, t2) {
    return d$3(this, null, function* () {
      let i2 = this.store.getConfig();
      i2 != null && i2.autoManageVideo ? e2.detach(t2) : yield e2.removeSink(t2);
    });
  }
  publish(e2, t2) {
    return d$3(this, null, function* () {
      var i2, r2, s4;
      if ([this.store.getPublishParams(), !this.sdkState.published, !ce$1].every((a2) => !!a2)) {
        let a2 = t2 && t2 !== ((r2 = (i2 = this.localPeer) == null ? void 0 : i2.role) == null ? void 0 : r2.name) ? () => {
          var c2;
          return (c2 = this.roleChangeManager) == null ? void 0 : c2.diffRolesAndPublishTracks({ oldRole: this.store.getPolicyForRole(t2), newRole: this.localPeer.role });
        } : () => this.getAndPublishTracks(e2);
        yield (s4 = a2 == null ? void 0 : a2()) == null ? void 0 : s4.catch((c2) => {
          var l2;
          o$2.e(this.TAG, "Error in publish", c2), (l2 = this.listener) == null || l2.onError(c2);
        });
      }
    });
  }
  getAndPublishTracks(e2) {
    return d$3(this, null, function* () {
      var i2, r2;
      let t2 = yield this.localTrackManager.getTracksToPublish(e2);
      yield this.setAndPublishTracks(t2), (r2 = (i2 = this.localPeer) == null ? void 0 : i2.audioTrack) == null || r2.initAudioLevelMonitor(), this.sdkState.published = true;
    });
  }
  setAndPublishTracks(e2) {
    return d$3(this, null, function* () {
      var t2;
      for (let i2 of e2)
        yield this.transport.publish([i2]), this.setLocalPeerTrack(i2), (t2 = this.listener) == null || t2.onTrackUpdate(0, i2, this.localPeer);
      yield this.initDeviceManagers();
    });
  }
  setLocalPeerTrack(e2) {
    var t2;
    switch (e2.peerId = (t2 = this.localPeer) == null ? void 0 : t2.peerId, e2.type) {
      case "audio":
        this.localPeer.audioTrack = e2;
        break;
      case "video":
        this.localPeer.videoTrack = e2;
        break;
    }
  }
  initDeviceManagers() {
    return d$3(this, null, function* () {
      var e2, t2, i2, r2, s4;
      this.sdkState.deviceManagersInitialised || (this.sdkState.deviceManagersInitialised = true, yield this.deviceManager.init(), (yield this.deviceManager.updateOutputDevice((t2 = (e2 = this.store.getConfig()) == null ? void 0 : e2.settings) == null ? void 0 : t2.audioOutputDeviceId)) || (yield this.deviceManager.updateOutputDevice((r2 = (i2 = O$2.getSelection()) == null ? void 0 : i2.audioOutput) == null ? void 0 : r2.deviceId)), this.audioSinkManager.init((s4 = this.store.getConfig()) == null ? void 0 : s4.audioSinkElementId));
    });
  }
  cleanDeviceManagers() {
    this.eventBus.deviceChange.unsubscribe(this.handleDeviceChange), this.eventBus.audioPluginFailed.unsubscribe(this.handleAudioPluginError), this.eventBus.autoplayError.unsubscribe(this.handleAutoplayError), this.deviceManager.cleanup(), this.audioSinkManager.cleanup();
  }
  initPreviewTrackAudioLevelMonitor() {
    var t2;
    let e2 = (t2 = this.localPeer) == null ? void 0 : t2.audioTrack;
    e2 == null || e2.initAudioLevelMonitor(), this.eventBus.trackAudioLevelUpdate.subscribe((i2) => {
      var s4;
      let r2 = i2 && i2.track.trackId === (e2 == null ? void 0 : e2.trackId) ? [{ audioLevel: i2.audioLevel, peer: this.localPeer, track: e2 }] : [];
      this.store.updateSpeakers(r2), (s4 = this.audioListener) == null || s4.onAudioLevelUpdate(r2);
    }), this.eventBus.localAudioSilence.subscribe(this.sendAudioPresenceFailed);
  }
  notifyJoin() {
    var i2;
    let e2 = this.store.getLocalPeer(), t2 = this.store.getRoom();
    if (!t2) {
      o$2.w(this.TAG, "notify join - room not present");
      return;
    }
    if (t2.joinedAt = new Date(), e2 && (e2.joinedAt = t2.joinedAt), e2 != null && e2.role) {
      this.analyticsTimer.end("join_time"), (i2 = this.listener) == null || i2.onJoin(t2);
      return;
    }
    return new Promise((r2, s4) => {
      this.eventBus.policyChange.subscribeOnce(() => {
        var a2;
        this.analyticsTimer.end("join_time"), (a2 = this.listener) == null || a2.onJoin(t2), r2();
      }), this.eventBus.leave.subscribeOnce((a2) => {
        s4(a2);
      });
    });
  }
  setUpPreview(e2, t2) {
    this.listener = t2, this.sdkState.isPreviewCalled = true, this.sdkState.isPreviewInProgress = true;
    let { roomId: i2, userId: r2, role: s4 } = Bt$1(e2.authToken);
    this.commonSetup(e2, i2, t2), this.store.setConfig(e2), this.store.createAndSetUserAgent(this.frameworkInfo), this.createAndAddLocalPeerToStore(e2, s4, r2, e2.asRole);
  }
  setPlaylistSettings(r2) {
    return d$3(this, arguments, function* ({ track: e2, hmsTrack: t2, source: i2 }) {
      if (i2 === "videoplaylist") {
        let s4 = {};
        if (e2.kind === "audio")
          s4.maxBitrate = 64;
        else {
          s4.maxBitrate = 1e3;
          let { width: a2, height: c2 } = e2.getSettings();
          s4.width = a2, s4.height = c2;
        }
        yield t2.setSettings(s4);
      } else
        i2 === "audioplaylist" && (yield t2.setSettings({ maxBitrate: 64 }));
    });
  }
  createAndAddLocalPeerToStore(e2, t2, i2, r2) {
    let s4 = this.store.getPolicyForRole(t2), a2 = r2 ? this.store.getPolicyForRole(r2) : void 0, c2 = new Ce$1({ name: e2.userName || "", customerUserId: i2, metadata: e2.metaData || "", role: s4, asRole: a2 || s4 });
    this.store.addPeer(c2);
  }
  commonSetup(e2, t2, i2) {
    this.stringifyMetadata(e2), e2.initEndpoint || (e2.initEndpoint = "https://prod-init.100ms.live"), this.errorListener = i2, this.deviceChangeListener = i2, this.initStoreAndManagers(), this.store.setErrorListener(this.errorListener), this.store.getRoom() || this.store.setRoom(new Re$1(t2));
  }
  removeDevicesFromConfig(e2) {
    this.store.getConfig() && e2.settings && (delete e2.settings.audioOutputDeviceId, delete e2.settings.videoDeviceId, delete e2.settings.audioInputDeviceId);
  }
  getScreenshareTracks(e2, t2) {
    return d$3(this, null, function* () {
      let [i2, r2] = yield this.localTrackManager.getLocalScreen(t2), s4 = () => {
        this.stopEndedScreenshare(e2);
      }, a2 = [];
      if (t2 != null && t2.audioOnly) {
        if (i2.nativeTrack.stop(), !r2)
          throw p$3.TracksErrors.NothingToReturn("TRACK", "Select share audio when sharing screen", "No audio found");
        a2.push(r2), r2.nativeTrack.addEventListener("ended", s4);
      } else
        a2.push(i2), i2.nativeTrack.addEventListener("ended", s4), r2 && a2.push(r2);
      return a2;
    });
  }
  stopPlaylist(e2) {
    e2.source === "audioplaylist" ? this.playlistManager.stop("audio") : e2.source === "videoplaylist" && this.playlistManager.stop("video");
  }
};
function n(n9) {
  for (var r2 = arguments.length, t2 = Array(r2 > 1 ? r2 - 1 : 0), e2 = 1; e2 < r2; e2++)
    t2[e2 - 1] = arguments[e2];
  throw Error("[Immer] minified error nr: " + n9 + (t2.length ? " " + t2.map(function(n10) {
    return "'" + n10 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r$2(n9) {
  return !!n9 && !!n9[Q$1];
}
function t$1(n9) {
  var r2;
  return !!n9 && (function(n10) {
    if (!n10 || "object" != typeof n10)
      return false;
    var r3 = Object.getPrototypeOf(n10);
    if (null === r3)
      return true;
    var t2 = Object.hasOwnProperty.call(r3, "constructor") && r3.constructor;
    return t2 === Object || "function" == typeof t2 && Function.toString.call(t2) === Z$1;
  }(n9) || Array.isArray(n9) || !!n9[L$1] || !!(null === (r2 = n9.constructor) || void 0 === r2 ? void 0 : r2[L$1]) || s$1(n9) || v$2(n9));
}
function i$1(n9, r2, t2) {
  void 0 === t2 && (t2 = false), 0 === o$1(n9) ? (t2 ? Object.keys : nn)(n9).forEach(function(e2) {
    t2 && "symbol" == typeof e2 || r2(e2, n9[e2], n9);
  }) : n9.forEach(function(t3, e2) {
    return r2(e2, t3, n9);
  });
}
function o$1(n9) {
  var r2 = n9[Q$1];
  return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(n9) ? 1 : s$1(n9) ? 2 : v$2(n9) ? 3 : 0;
}
function u$2(n9, r2) {
  return 2 === o$1(n9) ? n9.has(r2) : Object.prototype.hasOwnProperty.call(n9, r2);
}
function a(n9, r2) {
  return 2 === o$1(n9) ? n9.get(r2) : n9[r2];
}
function f$2(n9, r2, t2) {
  var e2 = o$1(n9);
  2 === e2 ? n9.set(r2, t2) : 3 === e2 ? n9.add(t2) : n9[r2] = t2;
}
function c$2(n9, r2) {
  return n9 === r2 ? 0 !== n9 || 1 / n9 == 1 / r2 : n9 != n9 && r2 != r2;
}
function s$1(n9) {
  return X$1 && n9 instanceof Map;
}
function v$2(n9) {
  return q && n9 instanceof Set;
}
function p$2(n9) {
  return n9.o || n9.t;
}
function l$3(n9) {
  if (Array.isArray(n9))
    return Array.prototype.slice.call(n9);
  var r2 = rn(n9);
  delete r2[Q$1];
  for (var t2 = nn(r2), e2 = 0; e2 < t2.length; e2++) {
    var i2 = t2[e2], o2 = r2[i2];
    false === o2.writable && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (r2[i2] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n9[i2] });
  }
  return Object.create(Object.getPrototypeOf(n9), r2);
}
function d$2(n9, e2) {
  return void 0 === e2 && (e2 = false), y(n9) || r$2(n9) || !t$1(n9) || (o$1(n9) > 1 && (n9.set = n9.add = n9.clear = n9.delete = h$2), Object.freeze(n9), e2 && i$1(n9, function(n10, r2) {
    return d$2(r2, true);
  }, true)), n9;
}
function h$2() {
  n(2);
}
function y(n9) {
  return null == n9 || "object" != typeof n9 || Object.isFrozen(n9);
}
function b$1(r2) {
  var t2 = tn[r2];
  return t2 || n(18, r2), t2;
}
function _$1() {
  return U;
}
function j$1(n9, r2) {
  r2 && (b$1("Patches"), n9.u = [], n9.s = [], n9.v = r2);
}
function g(n9) {
  O$1(n9), n9.p.forEach(S$1), n9.p = null;
}
function O$1(n9) {
  n9 === U && (U = n9.l);
}
function w$1(n9) {
  return U = { p: [], l: U, h: n9, m: true, _: 0 };
}
function S$1(n9) {
  var r2 = n9[Q$1];
  0 === r2.i || 1 === r2.i ? r2.j() : r2.g = true;
}
function P$1(r2, e2) {
  e2._ = e2.p.length;
  var i2 = e2.p[0], o2 = void 0 !== r2 && r2 !== i2;
  return e2.h.O || b$1("ES5").S(e2, r2, o2), o2 ? (i2[Q$1].P && (g(e2), n(4)), t$1(r2) && (r2 = M(e2, r2), e2.l || x(e2, r2)), e2.u && b$1("Patches").M(i2[Q$1].t, r2, e2.u, e2.s)) : r2 = M(e2, i2, []), g(e2), e2.u && e2.v(e2.u, e2.s), r2 !== H$1 ? r2 : void 0;
}
function M(n9, r2, t2) {
  if (y(r2))
    return r2;
  var e2 = r2[Q$1];
  if (!e2)
    return i$1(r2, function(i2, o3) {
      return A(n9, e2, r2, i2, o3, t2);
    }, true), r2;
  if (e2.A !== n9)
    return r2;
  if (!e2.P)
    return x(n9, e2.t, true), e2.t;
  if (!e2.I) {
    e2.I = true, e2.A._--;
    var o2 = 4 === e2.i || 5 === e2.i ? e2.o = l$3(e2.k) : e2.o, u2 = o2, a2 = false;
    3 === e2.i && (u2 = new Set(o2), o2.clear(), a2 = true), i$1(u2, function(r3, i2) {
      return A(n9, e2, o2, r3, i2, t2, a2);
    }), x(n9, o2, false), t2 && n9.u && b$1("Patches").N(e2, t2, n9.u, n9.s);
  }
  return e2.o;
}
function A(e2, i2, o2, a2, c2, s4, v2) {
  if (r$2(c2)) {
    var p2 = M(e2, c2, s4 && i2 && 3 !== i2.i && !u$2(i2.R, a2) ? s4.concat(a2) : void 0);
    if (f$2(o2, a2, p2), !r$2(p2))
      return;
    e2.m = false;
  } else
    v2 && o2.add(c2);
  if (t$1(c2) && !y(c2)) {
    if (!e2.h.D && e2._ < 1)
      return;
    M(e2, c2), i2 && i2.A.l || x(e2, c2);
  }
}
function x(n9, r2, t2) {
  void 0 === t2 && (t2 = false), !n9.l && n9.h.D && n9.m && d$2(r2, t2);
}
function z(n9, r2) {
  var t2 = n9[Q$1];
  return (t2 ? p$2(t2) : n9)[r2];
}
function I$1(n9, r2) {
  if (r2 in n9)
    for (var t2 = Object.getPrototypeOf(n9); t2; ) {
      var e2 = Object.getOwnPropertyDescriptor(t2, r2);
      if (e2)
        return e2;
      t2 = Object.getPrototypeOf(t2);
    }
}
function k$1(n9) {
  n9.P || (n9.P = true, n9.l && k$1(n9.l));
}
function E$2(n9) {
  n9.o || (n9.o = l$3(n9.t));
}
function N$2(n9, r2, t2) {
  var e2 = s$1(r2) ? b$1("MapSet").F(r2, t2) : v$2(r2) ? b$1("MapSet").T(r2, t2) : n9.O ? function(n10, r3) {
    var t3 = Array.isArray(n10), e3 = { i: t3 ? 1 : 0, A: r3 ? r3.A : _$1(), P: false, I: false, R: {}, l: r3, t: n10, k: null, o: null, j: null, C: false }, i2 = e3, o2 = en;
    t3 && (i2 = [e3], o2 = on);
    var u2 = Proxy.revocable(i2, o2), a2 = u2.revoke, f2 = u2.proxy;
    return e3.k = f2, e3.j = a2, f2;
  }(r2, t2) : b$1("ES5").J(r2, t2);
  return (t2 ? t2.A : _$1()).p.push(e2), e2;
}
function R$1(e2) {
  return r$2(e2) || n(22, e2), function n9(r2) {
    if (!t$1(r2))
      return r2;
    var e3, u2 = r2[Q$1], c2 = o$1(r2);
    if (u2) {
      if (!u2.P && (u2.i < 4 || !b$1("ES5").K(u2)))
        return u2.t;
      u2.I = true, e3 = D$2(r2, c2), u2.I = false;
    } else
      e3 = D$2(r2, c2);
    return i$1(e3, function(r3, t2) {
      u2 && a(u2.t, r3) === t2 || f$2(e3, r3, n9(t2));
    }), 3 === c2 ? new Set(e3) : e3;
  }(e2);
}
function D$2(n9, r2) {
  switch (r2) {
    case 2:
      return new Map(n9);
    case 3:
      return Array.from(n9);
  }
  return l$3(n9);
}
var G$1, U, W$2 = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x"), X$1 = "undefined" != typeof Map, q = "undefined" != typeof Set, B$1 = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect, H$1 = W$2 ? Symbol.for("immer-nothing") : ((G$1 = {})["immer-nothing"] = true, G$1), L$1 = W$2 ? Symbol.for("immer-draftable") : "__$immer_draftable", Q$1 = W$2 ? Symbol.for("immer-state") : "__$immer_state", Z$1 = "" + Object.prototype.constructor, nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n9) {
  return Object.getOwnPropertyNames(n9).concat(Object.getOwnPropertySymbols(n9));
} : Object.getOwnPropertyNames, rn = Object.getOwnPropertyDescriptors || function(n9) {
  var r2 = {};
  return nn(n9).forEach(function(t2) {
    r2[t2] = Object.getOwnPropertyDescriptor(n9, t2);
  }), r2;
}, tn = {}, en = { get: function(n9, r2) {
  if (r2 === Q$1)
    return n9;
  var e2 = p$2(n9);
  if (!u$2(e2, r2))
    return function(n10, r3, t2) {
      var e3, i3 = I$1(r3, t2);
      return i3 ? "value" in i3 ? i3.value : null === (e3 = i3.get) || void 0 === e3 ? void 0 : e3.call(n10.k) : void 0;
    }(n9, e2, r2);
  var i2 = e2[r2];
  return n9.I || !t$1(i2) ? i2 : i2 === z(n9.t, r2) ? (E$2(n9), n9.o[r2] = N$2(n9.A.h, i2, n9)) : i2;
}, has: function(n9, r2) {
  return r2 in p$2(n9);
}, ownKeys: function(n9) {
  return Reflect.ownKeys(p$2(n9));
}, set: function(n9, r2, t2) {
  var e2 = I$1(p$2(n9), r2);
  if (null == e2 ? void 0 : e2.set)
    return e2.set.call(n9.k, t2), true;
  if (!n9.P) {
    var i2 = z(p$2(n9), r2), o2 = null == i2 ? void 0 : i2[Q$1];
    if (o2 && o2.t === t2)
      return n9.o[r2] = t2, n9.R[r2] = false, true;
    if (c$2(t2, i2) && (void 0 !== t2 || u$2(n9.t, r2)))
      return true;
    E$2(n9), k$1(n9);
  }
  return n9.o[r2] === t2 && (void 0 !== t2 || r2 in n9.o) || Number.isNaN(t2) && Number.isNaN(n9.o[r2]) || (n9.o[r2] = t2, n9.R[r2] = true), true;
}, deleteProperty: function(n9, r2) {
  return void 0 !== z(n9.t, r2) || r2 in n9.t ? (n9.R[r2] = false, E$2(n9), k$1(n9)) : delete n9.R[r2], n9.o && delete n9.o[r2], true;
}, getOwnPropertyDescriptor: function(n9, r2) {
  var t2 = p$2(n9), e2 = Reflect.getOwnPropertyDescriptor(t2, r2);
  return e2 ? { writable: true, configurable: 1 !== n9.i || "length" !== r2, enumerable: e2.enumerable, value: t2[r2] } : e2;
}, defineProperty: function() {
  n(11);
}, getPrototypeOf: function(n9) {
  return Object.getPrototypeOf(n9.t);
}, setPrototypeOf: function() {
  n(12);
} }, on = {};
i$1(en, function(n9, r2) {
  on[n9] = function() {
    return arguments[0] = arguments[0][0], r2.apply(this, arguments);
  };
}), on.deleteProperty = function(r2, t2) {
  return on.set.call(this, r2, t2, void 0);
}, on.set = function(r2, t2, e2) {
  return en.set.call(this, r2[0], t2, e2, r2[0]);
};
var un = function() {
  function e2(r2) {
    var e3 = this;
    this.O = B$1, this.D = true, this.produce = function(r3, i3, o2) {
      if ("function" == typeof r3 && "function" != typeof i3) {
        var u2 = i3;
        i3 = r3;
        var a2 = e3;
        return function(n9) {
          var r4 = this;
          void 0 === n9 && (n9 = u2);
          for (var t2 = arguments.length, e4 = Array(t2 > 1 ? t2 - 1 : 0), o3 = 1; o3 < t2; o3++)
            e4[o3 - 1] = arguments[o3];
          return a2.produce(n9, function(n10) {
            var t3;
            return (t3 = i3).call.apply(t3, [r4, n10].concat(e4));
          });
        };
      }
      var f2;
      if ("function" != typeof i3 && n(6), void 0 !== o2 && "function" != typeof o2 && n(7), t$1(r3)) {
        var c2 = w$1(e3), s4 = N$2(e3, r3, void 0), v2 = true;
        try {
          f2 = i3(s4), v2 = false;
        } finally {
          v2 ? g(c2) : O$1(c2);
        }
        return "undefined" != typeof Promise && f2 instanceof Promise ? f2.then(function(n9) {
          return j$1(c2, o2), P$1(n9, c2);
        }, function(n9) {
          throw g(c2), n9;
        }) : (j$1(c2, o2), P$1(f2, c2));
      }
      if (!r3 || "object" != typeof r3) {
        if (void 0 === (f2 = i3(r3)) && (f2 = r3), f2 === H$1 && (f2 = void 0), e3.D && d$2(f2, true), o2) {
          var p2 = [], l2 = [];
          b$1("Patches").M(r3, f2, p2, l2), o2(p2, l2);
        }
        return f2;
      }
      n(21, r3);
    }, this.produceWithPatches = function(n9, r3) {
      if ("function" == typeof n9)
        return function(r4) {
          for (var t3 = arguments.length, i4 = Array(t3 > 1 ? t3 - 1 : 0), o3 = 1; o3 < t3; o3++)
            i4[o3 - 1] = arguments[o3];
          return e3.produceWithPatches(r4, function(r5) {
            return n9.apply(void 0, [r5].concat(i4));
          });
        };
      var t2, i3, o2 = e3.produce(n9, r3, function(n10, r4) {
        t2 = n10, i3 = r4;
      });
      return "undefined" != typeof Promise && o2 instanceof Promise ? o2.then(function(n10) {
        return [n10, t2, i3];
      }) : [o2, t2, i3];
    }, "boolean" == typeof (null == r2 ? void 0 : r2.useProxies) && this.setUseProxies(r2.useProxies), "boolean" == typeof (null == r2 ? void 0 : r2.autoFreeze) && this.setAutoFreeze(r2.autoFreeze);
  }
  var i2 = e2.prototype;
  return i2.createDraft = function(e3) {
    t$1(e3) || n(8), r$2(e3) && (e3 = R$1(e3));
    var i3 = w$1(this), o2 = N$2(this, e3, void 0);
    return o2[Q$1].C = true, O$1(i3), o2;
  }, i2.finishDraft = function(r2, t2) {
    var e3 = r2 && r2[Q$1];
    var i3 = e3.A;
    return j$1(i3, t2), P$1(void 0, i3);
  }, i2.setAutoFreeze = function(n9) {
    this.D = n9;
  }, i2.setUseProxies = function(r2) {
    r2 && !B$1 && n(20), this.O = r2;
  }, i2.applyPatches = function(n9, t2) {
    var e3;
    for (e3 = t2.length - 1; e3 >= 0; e3--) {
      var i3 = t2[e3];
      if (0 === i3.path.length && "replace" === i3.op) {
        n9 = i3.value;
        break;
      }
    }
    e3 > -1 && (t2 = t2.slice(e3 + 1));
    var o2 = b$1("Patches").$;
    return r$2(n9) ? o2(n9, t2) : this.produce(n9, function(n10) {
      return o2(n10, t2);
    });
  }, e2;
}(), an = new un(), fn = an.produce;
an.produceWithPatches.bind(an);
an.setAutoFreeze.bind(an);
an.setUseProxies.bind(an);
an.applyPatches.bind(an);
an.createDraft.bind(an);
an.finishDraft.bind(an);
function shallow(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  const keysA = Object.keys(objA);
  if (keysA.length !== Object.keys(objB).length) {
    return false;
  }
  for (let i2 = 0; i2 < keysA.length; i2++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i2]) || !Object.is(objA[keysA[i2]], objB[keysA[i2]])) {
      return false;
    }
  }
  return true;
}
function create(createState) {
  let state;
  const listeners2 = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace ? nextState : Object.assign({}, state, nextState);
      listeners2.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners2.add(listenerToAdd);
    return () => listeners2.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners2.add(listener);
    return () => listeners2.delete(listener);
  };
  const destroy = () => listeners2.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}
var Lt = Object.defineProperty, xt = Object.defineProperties;
var Ot = Object.getOwnPropertyDescriptors;
var Ke = Object.getOwnPropertySymbols;
var _t = Object.prototype.hasOwnProperty, wt = Object.prototype.propertyIsEnumerable;
var Be = (s4, e2, t2) => e2 in s4 ? Lt(s4, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : s4[e2] = t2, h$1 = (s4, e2) => {
  for (var t2 in e2 || (e2 = {}))
    _t.call(e2, t2) && Be(s4, t2, e2[t2]);
  if (Ke)
    for (var t2 of Ke(e2))
      wt.call(e2, t2) && Be(s4, t2, e2[t2]);
  return s4;
}, K$1 = (s4, e2) => xt(s4, Ot(e2));
var Ut = (s4, e2) => () => (e2 || s4((e2 = { exports: {} }).exports, e2), e2.exports);
var c$1 = (s4, e2, t2) => new Promise((i2, o2) => {
  var r2 = (l2) => {
    try {
      n9(t2.next(l2));
    } catch (m2) {
      o2(m2);
    }
  }, a2 = (l2) => {
    try {
      n9(t2.throw(l2));
    } catch (m2) {
      o2(m2);
    }
  }, n9 = (l2) => l2.done ? i2(l2.value) : Promise.resolve(l2.value).then(r2, a2);
  n9((t2 = t2.apply(s4, e2)).next());
});
var At = Ut((Vn, vs) => {
  vs.exports = { version: "0.10.10", license: "MIT", main: "dist/index.cjs.js", module: "dist/index.js", typings: "dist/index.d.ts", files: ["dist", "src"], engines: { node: ">=12" }, exports: { ".": { require: "./dist/index.cjs.js", import: "./dist/index.js", default: "./dist/index.js" } }, scripts: { prestart: "rm -rf dist && yarn types:build", start: 'concurrently "yarn dev" "yarn types"', dev: "node ../../scripts/dev", "build:only": "node ../../scripts/build", build: "yarn build:only && yarn types:build", types: "tsc -w", "types:build": "tsc -p tsconfig.json", format: "prettier --write src/**/*.ts", test: "jest --maxWorkers=1", "test:watch": "jest --watch", "test:coverage": "jest --coverage", lint: "eslint -c ../../.eslintrc .", "lint:fix": "yarn lint --fix", prepare: "yarn build", size: "size-limit", analyze: "size-limit --why", docs: "rm -rf ./docs && typedoc && rm -f ./docs/README.md && mkdir ./docs/home &&mv ./docs/modules.md ./docs/home/content.md && node ../../scripts/docs-store && npx prettier --write './docs/**/*'" }, name: "@100mslive/hms-video-store", author: "100ms", sideEffects: false, dependencies: { "@100mslive/hms-video": "0.9.10", eventemitter2: "^6.4.7", immer: "^9.0.6", reselect: "4.0.0", zustand: "3.5.7" }, devDependencies: { "ts-node": "^10.4.0", tslib: "^2.2.0" }, description: "This is an addon to the core sdk provided by 100ms. It abstracts away the intricacies of data management and provides a flux based reactive data store where data flows in only one direction.", repository: { type: "git", url: "git+https://github.com/100mslive/hms-video-store.git" }, keywords: ["video", "webrtc", "conferencing", "100ms"], bugs: { url: "https://github.com/100mslive/hms-video-store/issues" }, homepage: "https://github.com/100mslive/hms-video-store#readme", gitHead: "fe8f6b9b3b39b210c46f19c021ccf37c654c32d4" };
});
var Re = ((n9) => (n9.Disconnected = "Disconnected", n9.Preview = "Preview", n9.Connecting = "Connecting", n9.Connected = "Connected", n9.Reconnecting = "Reconnecting", n9.Disconnecting = "Disconnecting", n9.Failed = "Failed", n9))(Re || {});
var ae = () => ({ room: { id: "", isConnected: false, name: "", peers: [], localPeer: "", roomState: "Disconnected", recording: { browser: { running: false }, server: { running: false }, hls: { running: false } }, rtmp: { running: false }, hls: { running: false, variants: [] }, sessionId: "" }, peers: {}, tracks: {}, playlist: { audio: { list: {}, selection: { id: "", hasPrevious: false, hasNext: false }, progress: 0, volume: 0, currentTime: 0, playbackRate: 1 }, video: { list: {}, selection: { id: "", hasPrevious: false, hasNext: false }, progress: 0, volume: 0, currentTime: 0, playbackRate: 1 } }, messages: { byID: {}, allIDs: [] }, speakers: {}, connectionQualities: {}, settings: { audioInputDeviceId: "", audioOutputDeviceId: "", videoInputDeviceId: "" }, devices: { audioInput: [], audioOutput: [], videoInput: [] }, roles: {}, roleChangeRequests: [], errors: [], sessionStore: {}, templateAppData: {}, polls: {} }), ne = () => ({ peerStats: {}, remoteTrackStats: {}, localTrackStats: {}, localPeer: { id: "" } });
var Vt = ((e2) => (e2.CHAT = "chat", e2))(Vt || {});
var qe = ((t2) => (t2.INFO = "info", t2.ERROR = "error", t2))(qe || {}), De = ((M2) => (M2.PEER_JOINED = "PEER_JOINED", M2.PEER_LEFT = "PEER_LEFT", M2.PEER_LIST = "PEER_LIST", M2.NEW_MESSAGE = "NEW_MESSAGE", M2.ERROR = "ERROR", M2.RECONNECTING = "RECONNECTING", M2.RECONNECTED = "RECONNECTED", M2.TRACK_ADDED = "TRACK_ADDED", M2.TRACK_REMOVED = "TRACK_REMOVED", M2.TRACK_MUTED = "TRACK_MUTED", M2.TRACK_UNMUTED = "TRACK_UNMUTED", M2.TRACK_DEGRADED = "TRACK_DEGRADED", M2.TRACK_RESTORED = "TRACK_RESTORED", M2.TRACK_DESCRIPTION_CHANGED = "TRACK_DESCRIPTION_CHANGED", M2.ROLE_UPDATED = "ROLE_UPDATED", M2.CHANGE_TRACK_STATE_REQUEST = "CHANGE_TRACK_STATE_REQUEST", M2.CHANGE_MULTI_TRACK_STATE_REQUEST = "CHANGE_MULTI_TRACK_STATE_REQUEST", M2.ROOM_ENDED = "ROOM_ENDED", M2.REMOVED_FROM_ROOM = "REMOVED_FROM_ROOM", M2.DEVICE_CHANGE_UPDATE = "DEVICE_CHANGE_UPDATE", M2.PLAYLIST_TRACK_ENDED = "PLAYLIST_TRACK_ENDED", M2.NAME_UPDATED = "NAME_UPDATED", M2.METADATA_UPDATED = "METADATA_UPDATED", M2.POLL_CREATED = "POLL_CREATED", M2.POLL_STARTED = "POLL_STARTED", M2.POLL_STOPPED = "POLL_STOPPED", M2.POLL_VOTES_UPDATED = "POLL_VOTES_UPDATED", M2))(De || {});
var je = ((t2) => (t2.audio = "audio", t2.video = "video", t2))(je || {});
function j(s4, e2) {
  let t2, i2;
  if (e2)
    for (let o2 of e2.auxiliaryTracks) {
      let r2 = s4[o2];
      Kt(r2) && (i2 = $(r2) ? r2 : i2, t2 = W$1(r2) ? r2 : t2);
    }
  return { video: t2, audio: i2 };
}
function $(s4) {
  return s4 && s4.type === "audio";
}
function W$1(s4) {
  return s4 && s4.type === "video";
}
function Kt(s4) {
  return s4 && s4.source === "screen";
}
function ce(s4) {
  return s4 && s4.source === "audioplaylist";
}
function J$2(s4) {
  return s4 && s4.source === "videoplaylist";
}
function Ge(s4) {
  return s4 ? !!(s4 != null && s4.degraded) : false;
}
function Q(s4, e2) {
  return e2 && s4.tracks[e2] ? s4.tracks[e2].enabled : false;
}
function Fe(s4, e2) {
  return e2 && s4.tracks[e2] ? s4.tracks[e2].displayEnabled : false;
}
function Y(s4) {
  var o2;
  let e2 = false, t2 = false, i2 = false;
  return (o2 = s4 == null ? void 0 : s4.publishParams) != null && o2.allowed && (e2 = s4.publishParams.allowed.includes("video"), t2 = s4.publishParams.allowed.includes("audio"), i2 = s4.publishParams.allowed.includes("screen")), { video: e2, audio: t2, screen: i2 };
}
var P = (s4) => s4.room, Bt = (s4) => s4.errors;
createSelector(Bt, (s4) => s4.length === 0 ? null : s4.at(-1));
createSelector(P, (s4) => s4.id);
var k = (s4) => s4.peers, Qe = (s4) => s4.messages.byID, $e = (s4) => s4.messages.allIDs, T = (s4) => s4.tracks, We = (s4) => s4.settings, ve = (s4) => s4.appData, qt = (s4) => s4.speakers, B = createSelector([P], (s4) => s4 && s4.isConnected);
createSelector([B, P], (s4, e2) => s4 ? e2.peerCount !== void 0 ? e2.peerCount || 1 : e2.peers.length : Math.max(e2.peerCount !== void 0 ? e2.peerCount : e2.peers.length - 1, 0));
var w = createSelector([P, k], (s4, e2) => s4.peers.map((t2) => e2[t2])), jt = createSelector(T, (s4) => Object.values(s4)), v$1 = createSelector(P, k, (s4, e2) => e2[s4.localPeer]), G = createSelector(P, (s4) => s4.localPeer);
createSelector(v$1, (s4) => s4 == null ? void 0 : s4.name);
createSelector(v$1, (s4) => s4 == null ? void 0 : s4.roleName);
var b = createSelector(v$1, (s4) => s4 == null ? void 0 : s4.audioTrack), I = createSelector(v$1, (s4) => s4 == null ? void 0 : s4.videoTrack), Gt = createSelector(v$1, (s4) => s4 == null ? void 0 : s4.auxiliaryTracks), Je = createSelector([b, I, Gt], (s4, e2, t2) => {
  let i2 = t2 ? [...t2] : [];
  return s4 && i2.unshift(s4), e2 && i2.unshift(e2), i2;
});
createSelector(w, (s4) => s4.filter((e2) => !e2.isLocal));
createSelector(k, qt, (s4, e2) => {
  let t2 = Object.entries(e2).sort((i2, o2) => {
    var n9, l2;
    let r2 = ((n9 = i2[1]) == null ? void 0 : n9.audioLevel) || 0;
    return (((l2 = o2[1]) == null ? void 0 : l2.audioLevel) || 0) > r2 ? 1 : -1;
  });
  if (t2.length > 0 && t2[0][1].audioLevel && t2[0][1].audioLevel > 0) {
    let i2 = t2[0][1].peerID;
    if (i2 in s4)
      return s4[i2];
  }
  return null;
});
var Ie = (s4) => {
  let e2 = v$1(s4);
  return Q(s4, e2 == null ? void 0 : e2.videoTrack);
}, Ye = (s4) => {
  let e2 = v$1(s4);
  return Fe(s4, e2 == null ? void 0 : e2.videoTrack);
}, Ee = createSelector(v$1, T, (s4, e2) => {
  let { video: t2, audio: i2 } = j(e2, s4);
  return !!(t2 || i2);
}), Ft = createSelector(k, T, (s4, e2) => {
  let t2;
  for (let i2 in s4) {
    let o2 = s4[i2], { video: r2, audio: a2 } = j(e2, o2);
    if (r2)
      return o2;
    a2 && !t2 && (t2 = o2);
  }
  return t2;
});
createSelector(Ft, (s4) => !!s4);
createSelector(k, T, (s4, e2) => {
  for (let t2 in s4) {
    let i2 = s4[t2], { audio: o2, video: r2 } = j(e2, i2);
    if (!r2 && o2)
      return i2;
  }
});
createSelector(k, T, (s4, e2) => {
  let t2 = [], i2 = [];
  for (let o2 in s4) {
    let r2 = s4[o2], { video: a2, audio: n9 } = j(e2, r2);
    a2 ? t2.push(r2) : n9 && i2.push(r2);
  }
  return t2.concat(i2);
});
createSelector(k, T, (s4, e2) => {
  for (let t2 in e2) {
    let i2 = e2[t2];
    if (J$2(i2) && W$1(i2) && i2.peerId)
      return s4[i2.peerId];
  }
});
createSelector(k, T, (s4, e2) => {
  for (let t2 in e2) {
    let i2 = e2[t2];
    if (ce(i2) && i2.peerId)
      return s4[i2.peerId];
  }
});
createSelector(jt, (s4) => s4.filter(Ge));
createSelector($e, (s4) => s4.length);
createSelector(Qe, (s4) => Object.values(s4).filter((e2) => !e2.read).length);
var Se = createSelector($e, Qe, (s4, e2) => {
  let t2 = [];
  return s4.forEach((i2) => {
    t2.push(e2[i2]);
  }), t2;
}), E$1 = createSelector([P], (s4) => s4 && s4.roomState);
createSelector(E$1, (s4) => s4 === "Preview");
createSelector(P, (s4) => s4.roomState !== "Disconnected");
var _ = (s4) => s4.roles;
createSelector([_], (s4) => Object.keys(s4));
var le = createSelector([v$1, _], (s4, e2) => s4 != null && s4.roleName ? e2[s4.roleName] : null), Qt = (s4) => {
  var e2;
  return (e2 = s4.preview) == null ? void 0 : e2.asRole;
}, ze = createSelector([Qt, _], (s4, e2) => s4 ? e2[s4] : null);
createSelector([le], (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.subscribeParams) != null && e2.subscribeToRoles ? s4.subscribeParams.subscribeToRoles.length > 0 : false;
});
var Xe = createSelector(le, (s4) => s4 == null ? void 0 : s4.permissions);
createSelector(P, (s4) => s4.recording);
createSelector(P, (s4) => s4.rtmp);
createSelector(P, (s4) => s4.hls);
createSelector(P, (s4) => s4.sessionId);
createSelector(P, (s4) => s4.startedAt);
var Ze = (s4) => s4.polls;
var tt = (s4 = "audio") => (e2) => e2.playlist[s4].list, be = (s4 = "audio") => (e2) => e2.playlist[s4].selection, st = (s4 = "audio") => (e2) => e2.playlist[s4].progress, it = (s4 = "audio") => (e2) => e2.playlist[s4].currentTime, ot = (s4 = "audio") => (e2) => e2.playlist[s4].playbackRate, rt = (s4 = "audio") => (e2) => e2.playlist[s4].volume, at = (s4 = "audio") => createSelector(tt(s4), (e2) => Object.values(e2)), nt = (s4 = "audio") => createSelector(tt(s4), be(s4), (e2, t2) => {
  if (t2.id)
    return e2[t2.id];
}), ct = { selection: be("audio"), progress: st("audio"), currentTime: it("audio"), playbackRate: ot("audio"), volume: rt("audio"), list: at("audio"), selectedItem: nt("audio") }, St = { selection: be("video"), progress: st("video"), currentTime: it("video"), playbackRate: ot("video"), volume: rt("video"), list: at("video"), selectedItem: nt("video") };
function u$1(s4) {
  return (e2) => (t2) => s4(t2, e2);
}
var X = "HMS-Store:", S = class {
  static v(e2, ...t2) {
    this.log(Pr.VERBOSE, e2, ...t2);
  }
  static d(...e2) {
    this.log(Pr.DEBUG, ...e2);
  }
  static i(...e2) {
    this.log(Pr.INFO, ...e2);
  }
  static w(...e2) {
    this.log(Pr.WARN, ...e2);
  }
  static e(...e2) {
    this.log(Pr.ERROR, ...e2);
  }
  static time(e2) {
    this.log(Pr.TIME, "[HMSPerformanceTiming]", e2);
  }
  static timeEnd(e2) {
    this.log(Pr.TIMEEND, "[HMSPerformanceTiming]", e2, e2);
  }
  static cleanup() {
    performance.clearMarks(), performance.clearMeasures();
  }
  static log(e2, ...t2) {
    if (!(this.level.valueOf() > e2.valueOf()))
      switch (e2) {
        case Pr.VERBOSE: {
          console.log(X, ...t2);
          break;
        }
        case Pr.DEBUG: {
          console.debug(X, ...t2);
          break;
        }
        case Pr.INFO: {
          console.info(X, ...t2);
          break;
        }
        case Pr.WARN: {
          console.warn(X, ...t2);
          break;
        }
        case Pr.ERROR: {
          console.error(X, ...t2);
          break;
        }
        case Pr.TIME: {
          performance.mark(t2[1]);
          break;
        }
        case Pr.TIMEEND: {
          let i2 = t2[0], o2 = t2[1];
          try {
            let r2 = performance.measure(o2, o2);
            this.log(Pr.DEBUG, i2, o2, r2 == null ? void 0 : r2.duration), performance.clearMarks(o2), performance.clearMeasures(o2);
          } catch (r2) {
            this.log(Pr.DEBUG, i2, o2, r2);
          }
          break;
        }
      }
  }
};
S.level = Pr.VERBOSE;
var Ae = (s4, e2) => e2, Z = (s4, e2) => e2, dt = (s4, e2) => e2, Xt = (s4, e2) => e2, Zt = (s4, e2) => e2, D$1 = createSelector([k, Ae], (s4, e2) => e2 ? s4[e2] : null), Ce = createSelector([T, Z], (s4, e2) => e2 ? s4[e2] : null), es = createSelector([T, Z], (s4, e2) => {
  if (!e2)
    return null;
  let t2 = s4[e2];
  return (t2 == null ? void 0 : t2.type) === "video" ? t2 : null;
});
createSelector([T, Z], (s4, e2) => {
  if (!e2)
    return null;
  let t2 = s4[e2];
  return (t2 == null ? void 0 : t2.type) === "audio" ? t2 : null;
});
createSelector([T, Z], (s4, e2) => {
  if (!e2)
    return null;
  let t2 = s4[e2];
  return (t2 == null ? void 0 : t2.type) === "audio" && (t2 == null ? void 0 : t2.source) === "screen" ? t2 : null;
});
createSelector([T, Z], (s4, e2) => {
  if (!e2)
    return null;
  let t2 = s4[e2];
  return (t2 == null ? void 0 : t2.type) === "video" && (t2 == null ? void 0 : t2.source) === "screen" ? t2 : null;
});
var os = createSelector([Ze, Zt], (s4, e2) => e2 ? s4[e2] : null), C$1 = u$1(D$1);
u$1(createSelector([ve, Xt], (s4, e2) => {
  if (s4)
    return e2 ? s4[e2] : s4;
}));
u$1(createSelector(D$1, (s4) => s4 == null ? void 0 : s4.name));
var ue = u$1(Ce), ut = u$1(es), as = u$1((s4, e2) => {
  let t2 = D$1(s4, e2);
  if (t2 && t2.audioTrack && t2.audioTrack !== "")
    return s4.tracks[t2.audioTrack];
}), pt = (s4, e2) => e2 ? s4.speakers[e2] : null;
u$1(createSelector(pt, (s4) => (s4 == null ? void 0 : s4.audioLevel) || 0));
var ns = (s4, e2) => {
  let t2 = as(e2)(s4);
  return pt(s4, t2 == null ? void 0 : t2.id);
};
u$1(createSelector(ns, (s4) => (s4 == null ? void 0 : s4.audioLevel) || 0));
u$1(createSelector(T, D$1, (s4, e2) => {
  let t2 = e2 == null ? void 0 : e2.auxiliaryTracks.find((i2) => {
    let o2 = s4[i2];
    return J$2(o2) && W$1(o2);
  });
  return t2 ? s4[t2] : void 0;
}));
u$1(createSelector(T, D$1, (s4, e2) => {
  let t2 = e2 == null ? void 0 : e2.auxiliaryTracks.find((i2) => {
    let o2 = s4[i2];
    return J$2(o2) && $(o2);
  });
  return t2 ? s4[t2] : void 0;
}));
u$1(createSelector(T, D$1, (s4, e2) => {
  let t2 = e2 == null ? void 0 : e2.auxiliaryTracks.find((i2) => {
    let o2 = s4[i2];
    return ce(o2) && $(o2);
  });
  return t2 ? s4[t2] : void 0;
}));
u$1(createSelector(T, D$1, (s4, e2) => j(s4, e2)));
var mt = createSelector([Se, G, Ae], (s4, e2, t2) => {
  if (t2)
    return s4.filter((i2) => {
      var o2;
      return !i2.recipientPeer && !((o2 = i2.recipientRoles) != null && o2.length) || i2.sender && ![e2, t2].includes(i2.sender) ? false : [e2, t2].includes(i2.recipientPeer);
    });
}), yt = createSelector([Se, dt], (s4, e2) => {
  if (e2)
    return s4.filter((t2) => {
      var i2, o2;
      return (i2 = t2.recipientRoles) != null && i2.length ? (o2 = t2.recipientRoles) == null ? void 0 : o2.includes(e2) : false;
    });
}), cs = createSelector(Se, (s4) => s4.filter((e2) => {
  var t2;
  return !e2.recipientPeer && !((t2 = e2.recipientRoles) != null && t2.length);
}));
createSelector([yt, dt], (s4) => s4 ? s4.filter((e2) => !e2.read).length : 0);
createSelector([mt, Ae], (s4) => s4 ? s4.filter((e2) => !e2.read).length : 0);
createSelector(cs, (s4) => s4.filter((e2) => !e2.read).length);
var gt = u$1(os);
createSelector([k, T], (s4, e2) => Object.values(s4).map((i2) => {
  var o2;
  return { peer: i2, isAudioEnabled: i2.audioTrack ? (o2 = e2[i2.audioTrack]) == null ? void 0 : o2.enabled : false };
}));
var ds = (s4) => s4.roleChangeRequests[0] || null;
createSelector([ds, k, _], (s4, e2, t2) => s4 ? { requestedBy: s4.requestedBy ? e2[s4.requestedBy] : void 0, role: t2[s4.roleName], token: s4.token } : null);
createSelector([le], (s4) => Y(s4));
createSelector([ze], (s4) => Y(s4));
createSelector([I, T], (s4, e2) => {
  let t2 = null;
  return s4 && (t2 = e2[s4]), (t2 == null ? void 0 : t2.plugins) || [];
});
createSelector([b, T], (s4, e2) => {
  let t2 = null;
  return s4 && (t2 = e2[s4]), (t2 == null ? void 0 : t2.plugins) || [];
});
var ht = (s4, e2) => {
  let t2 = ee(Object.keys(s4), Object.keys(e2));
  for (let i2 of t2) {
    let o2 = s4[i2], r2 = e2[i2];
    F$1(o2, r2) ? (N$1(o2.auxiliaryTracks, r2.auxiliaryTracks) && (r2.auxiliaryTracks = o2.auxiliaryTracks), Object.assign(o2, r2)) : xe(o2, r2) ? delete s4[i2] : Me(o2, r2) && (s4[i2] = r2);
  }
}, Pt = (s4, e2) => {
  let t2 = ee(Object.keys(s4), Object.keys(e2));
  for (let i2 of t2) {
    let o2 = s4[i2], r2 = e2[i2];
    F$1(o2, r2) ? (Le(o2, r2), Object.assign(o2, r2)) : xe(o2, r2) ? delete s4[i2] : Me(o2, r2) && (s4[i2] = r2);
  }
}, kt = (s4, e2) => {
  let t2 = ee(Object.keys(s4), Object.keys(e2));
  for (let i2 of t2) {
    let o2 = s4[i2], r2 = e2[i2];
    F$1(o2, r2) ? (o2.questions && N$1(o2.questions, r2.questions) && (r2.questions = o2.questions), Object.assign(o2, r2)) : Me(o2, r2) && (s4[i2] = r2);
  }
}, Ne = (s4, e2) => {
  let t2 = ee(Object.keys(s4), Object.keys(e2));
  for (let i2 of t2) {
    let o2 = s4[i2], r2 = e2[i2];
    F$1(o2, r2) ? Object.assign(o2, r2) : xe(o2, r2) ? delete s4[i2] : Me(o2, r2) && (s4[i2] = r2);
  }
}, Rt = (s4, e2, t2) => {
  let i2 = t2.reduce((r2, a2) => (r2[a2.firstTrackId] = Object.values(e2[a2.getTrackIDBeingSent()] || {}).sort((n9, l2) => !n9.rid || !l2.rid ? 0 : n9.rid < l2.rid ? -1 : 1), r2), {}), o2 = ee(Object.keys(s4), Object.keys(i2));
  for (let r2 of o2) {
    if (!i2[r2]) {
      delete s4[r2];
      continue;
    }
    s4[r2] = i2[r2];
  }
}, Le = (s4, e2) => {
  s4.plugins && N$1(s4.plugins, e2.plugins) && (e2.plugins = s4.plugins), s4.type === "video" && s4.layerDefinitions && N$1(s4.layerDefinitions, e2.layerDefinitions) && (e2.layerDefinitions = s4.layerDefinitions);
}, F$1 = (s4, e2) => s4 && e2, xe = (s4, e2) => s4 && !e2, Me = (s4, e2) => !s4 && e2, N$1 = (s4, e2) => {
  if (s4 === e2 || s4.length === 0 && (e2 == null ? void 0 : e2.length) === 0)
    return true;
  if (!s4 || !e2 || s4.length !== e2.length)
    return false;
  for (let t2 = 0; t2 < s4.length; t2++)
    if (s4[t2] !== e2[t2])
      return false;
  return true;
}, ee = (s4, e2) => {
  let t2 = /* @__PURE__ */ new Set();
  for (let i2 of s4)
    t2.add(i2);
  for (let i2 of e2)
    t2.add(i2);
  return Array.from(t2);
};
var vt = (s4, e2, t2) => {
  let i2;
  t2.getState(E$1) === "Connected" && (i2 = Dt(s4, e2, t2)), t2.subscribe((o2) => {
    ["Connected", "Reconnecting"].includes(o2) ? i2 || (i2 = Dt(s4, e2, t2)) : ["Disconnected", "Failed"].includes(o2) && i2 && (fs(e2, o2), i2(), i2 = void 0);
  }, E$1);
}, Dt = (s4, e2, t2) => {
  var r2, a2;
  let i2 = Ts(t2, e2);
  (r2 = s4.getWebrtcInternals()) == null || r2.start();
  let o2 = (a2 = s4.getWebrtcInternals()) == null ? void 0 : a2.onStatsChange((n9) => Hs(e2, n9, t2, s4));
  return () => {
    i2(), o2 && o2();
  };
}, Ts = (s4, e2) => {
  let t2, i2, o2;
  return s4.getState(G) ? e2.namedSetState((r2) => {
    r2.localPeer.id = s4.getState(G);
  }, "localpeer-id") : t2 = s4.subscribe((r2) => {
    r2 && e2.namedSetState((a2) => {
      a2.localPeer.id = r2;
    }, "localpeer-id");
  }, G), s4.getState(I) ? e2.namedSetState((r2) => {
    r2.localPeer.videoTrack = s4.getState(I);
  }, "localpeer-videotrack-id") : i2 = s4.subscribe((r2) => {
    r2 && e2.namedSetState((a2) => {
      a2.localPeer.videoTrack = r2;
    }, "localpeer-videotrack-id");
  }, I), s4.getState(b) ? e2.namedSetState((r2) => {
    r2.localPeer.audioTrack = s4.getState(b);
  }, "localpeer-audiotrack-id") : o2 = s4.subscribe((r2) => {
    r2 && e2.namedSetState((a2) => {
      a2.localPeer.audioTrack = r2;
    }, "localpeer-audiotrack-id");
  }, b), () => {
    t2 == null || t2(), i2 == null || i2(), o2 == null || o2();
  };
}, Hs = (s4, e2, t2, i2) => {
  let o2 = t2.getState(T);
  s4.namedSetState((r2) => {
    let a2 = t2.getState(G), n9 = {}, l2 = Object.keys(o2).filter((L2) => o2[L2].peerId !== a2);
    for (let L2 of l2) {
      let x2 = e2.getRemoteTrackStats(L2);
      x2 && (n9[L2] = x2);
    }
    Ne(r2.remoteTrackStats, n9);
    let m2 = { [a2]: e2.getLocalPeerStats() };
    Ne(r2.peerStats, m2), Rt(r2.localTrackStats, e2.getLocalTrackStats(), i2.store.getLocalPeerTracks());
  }, "webrtc-stats");
}, fs = (s4, e2 = "resetState") => {
  s4.namedSetState((t2) => {
    Object.assign(t2, ne());
  }, e2);
};
var Te = (s4) => w$2 ? `${s4} ${document.title}` : s4;
var He = { [ct$1.PEER_JOINED]: "PEER_JOINED", [ct$1.PEER_LEFT]: "PEER_LEFT", [ct$1.ROLE_UPDATED]: "ROLE_UPDATED", [ct$1.NAME_UPDATED]: "NAME_UPDATED", [ct$1.METADATA_UPDATED]: "METADATA_UPDATED" }, te = { [ie$1.TRACK_ADDED]: "TRACK_ADDED", [ie$1.TRACK_REMOVED]: "TRACK_REMOVED", [ie$1.TRACK_MUTED]: "TRACK_MUTED", [ie$1.TRACK_UNMUTED]: "TRACK_UNMUTED", [ie$1.TRACK_DEGRADED]: "TRACK_DEGRADED", [ie$1.TRACK_RESTORED]: "TRACK_RESTORED", [ie$1.TRACK_DESCRIPTION_CHANGED]: "TRACK_DESCRIPTION_CHANGED" }, fe = { [zt.POLL_CREATED]: "POLL_CREATED", [zt.POLL_STARTED]: "POLL_STARTED", [zt.POLL_STOPPED]: "POLL_STOPPED", [zt.POLL_STATS_UPDATED]: "POLL_VOTES_UPDATED" };
var Oe = "hmsNotification", me = class {
  constructor(e2) {
    this.id = 0;
    this.onNotification = (e3, t2) => {
      let i2 = (o2) => {
        if (t2) {
          let r2;
          if (Array.isArray(t2) ? r2 = t2.includes(o2.type) : r2 = t2 === o2.type, !r2)
            return;
        }
        e3(o2);
      };
      return this.eventEmitter.addListener(Oe, i2), () => {
        this.eventEmitter.removeListener(Oe, i2);
      };
    };
    this.store = e2, this.eventEmitter = new eventemitter2.exports.EventEmitter2({ maxListeners: Object.keys(De).length });
  }
  sendPlaylistTrackEnded(e2) {
    let t2 = this.createNotification("PLAYLIST_TRACK_ENDED", e2, "info");
    this.emitEvent(t2);
  }
  sendDeviceChange(e2) {
    var i2;
    let t2 = this.createNotification("DEVICE_CHANGE_UPDATE", e2, e2.error ? "error" : "info", `Selected ${e2.type} device - ${(i2 = e2.selection) == null ? void 0 : i2.label}`);
    this.emitEvent(t2);
  }
  sendLeaveRoom(e2) {
    var o2;
    let t2 = (o2 = e2.requestedBy) == null ? void 0 : o2.name, i2 = this.createNotification(e2.roomEnded || !t2 ? "ROOM_ENDED" : "REMOVED_FROM_ROOM", e2, "info", `${e2.roomEnded ? "Room ended" : "Removed from room"} ${t2 ? `by ${t2}` : ""}`);
    this.emitEvent(i2);
  }
  sendPeerList(e2) {
    let t2 = this.createNotification("PEER_LIST", e2, "info");
    this.emitEvent(t2);
  }
  sendPeerUpdate(e2, t2) {
    let i2 = this.store.getState(C$1(t2 == null ? void 0 : t2.id)) || t2, o2 = He[e2];
    if (o2) {
      let r2 = this.createNotification(o2, i2, "info");
      this.emitEvent(r2);
    }
  }
  sendTrackUpdate(e2, t2) {
    let i2 = this.store.getState(ue(t2)), o2 = te[e2];
    if (o2) {
      let r2 = this.createNotification(o2, i2, "info");
      this.emitEvent(r2);
    }
  }
  sendMessageReceived(e2) {
    let t2 = this.createNotification("NEW_MESSAGE", e2, "info");
    this.emitEvent(t2);
  }
  sendError(e2) {
    let t2 = this.createNotification("ERROR", e2, "error");
    this.emitEvent(t2);
  }
  sendReconnecting(e2) {
    let t2 = this.createNotification("RECONNECTING", e2, "error");
    this.emitEvent(t2);
  }
  sendReconnected() {
    let e2 = this.createNotification("RECONNECTED", null, "info");
    this.emitEvent(e2);
  }
  sendChangeTrackStateRequest(e2) {
    let t2 = this.createNotification("CHANGE_TRACK_STATE_REQUEST", e2, "info");
    this.emitEvent(t2);
  }
  sendChangeMultiTrackStateRequest(e2) {
    let t2 = this.createNotification("CHANGE_MULTI_TRACK_STATE_REQUEST", e2, "info");
    this.emitEvent(t2);
  }
  sendPollUpdate(e2, t2) {
    let i2 = fe[e2], o2 = this.store.getState(gt(t2));
    if (i2) {
      let r2 = this.createNotification(i2, o2, "info");
      this.emitEvent(r2);
    }
  }
  emitEvent(e2) {
    this.eventEmitter.emit(Oe, e2);
  }
  createNotification(e2, t2, i2, o2 = "") {
    return this.id++, { id: this.id, type: e2, message: o2, data: t2, severity: i2 };
  }
};
function It(s4) {
  return s4 instanceof re$1 || s4 instanceof H$2;
}
var f$1 = class s2 {
  static convertPeer(e2) {
    var t2, i2, o2;
    return { id: e2.peerId, name: e2.name, roleName: (t2 = e2.role) == null ? void 0 : t2.name, isLocal: e2.isLocal, videoTrack: (i2 = e2.videoTrack) == null ? void 0 : i2.trackId, audioTrack: (o2 = e2.audioTrack) == null ? void 0 : o2.trackId, auxiliaryTracks: e2.auxiliaryTracks.map((r2) => r2.trackId), customerUserId: e2.customerUserId, metadata: e2.metadata, joinedAt: e2.joinedAt };
  }
  static convertTrack(e2, t2) {
    let i2 = { id: e2.trackId, source: e2.source, type: e2.type, enabled: e2.enabled, displayEnabled: e2.enabled, peerId: e2.peerId || t2 };
    return this.enrichTrack(i2, e2), i2;
  }
  static enrichTrack(e2, t2) {
    let i2 = t2.getMediaTrackSettings();
    t2 instanceof re$1 && (e2.volume = t2.getVolume() || 0), s2.updateDeviceID(e2, t2), s2.enrichLocalTrack(e2, t2), e2.type === "video" && (e2.source === "screen" ? (e2.displaySurface = i2.displaySurface, s2.enrichScreenTrack(e2, t2)) : e2.source === "regular" && (e2.facingMode = i2.facingMode), e2.height = i2.height, e2.width = i2.width, s2.enrichVideoTrack(e2, t2)), s2.enrichPluginsDetails(e2, t2);
  }
  static enrichLocalTrack(e2, t2) {
    (t2 instanceof F$2 || t2 instanceof pe) && (e2.isPublished = t2.isPublished);
  }
  static updateDeviceID(e2, t2) {
    var i2;
    t2 instanceof F$2 || t2 instanceof pe ? e2.deviceID = t2.settings.deviceId : e2.deviceID = (i2 = t2.getMediaTrackSettings()) == null ? void 0 : i2.deviceId;
  }
  static enrichVideoTrack(e2, t2) {
    t2 instanceof H$2 && (e2.layer = t2.getLayer(), e2.preferredLayer = t2.getPreferredLayer(), e2.degraded = t2.degraded), (t2 instanceof H$2 || t2 instanceof F$2) && (N$1(t2.getSimulcastDefinitions(), e2.layerDefinitions) || (e2.layerDefinitions = t2.getSimulcastDefinitions()));
  }
  static enrichScreenTrack(e2, t2) {
    var i2, o2;
    if (t2 instanceof F$2) {
      let r2 = (i2 = t2.getCaptureHandle) == null ? void 0 : i2.call(t2);
      (r2 == null ? void 0 : r2.handle) !== ((o2 = e2.captureHandle) == null ? void 0 : o2.handle) && (e2.captureHandle = r2), t2.isCurrentTab && (e2.displaySurface = "selfBrowser");
    }
  }
  static enrichPluginsDetails(e2, t2) {
    (t2 instanceof F$2 || t2 instanceof pe) && (N$1(t2.getPlugins(), e2.plugins) || (e2.plugins = t2.getPlugins()));
  }
  static convertRoom(e2, t2) {
    let { recording: i2, rtmp: o2, hls: r2 } = s2.convertRecordingStreamingState(e2 == null ? void 0 : e2.recording, e2 == null ? void 0 : e2.rtmp, e2 == null ? void 0 : e2.hls);
    return { id: e2.id, name: e2.name, localPeer: t2, recording: i2, rtmp: o2, hls: r2, sessionId: e2.sessionId, startedAt: e2.startedAt, joinedAt: e2.joinedAt, peerCount: e2.peerCount };
  }
  static convertMessage(e2) {
    var t2, i2, o2, r2, a2, n9, l2;
    return { sender: (t2 = e2.sender) == null ? void 0 : t2.peerId, senderName: (i2 = e2.sender) == null ? void 0 : i2.name, senderRole: (r2 = (o2 = e2.sender) == null ? void 0 : o2.role) == null ? void 0 : r2.name, senderUserId: (a2 = e2.sender) == null ? void 0 : a2.customerUserId, recipientPeer: (n9 = e2.recipientPeer) == null ? void 0 : n9.peerId, recipientRoles: (l2 = e2.recipientRoles) == null ? void 0 : l2.map((m2) => m2.name), time: e2.time, type: e2.type, message: e2.message, id: e2.id };
  }
  static convertRoles(e2) {
    let t2 = {};
    return e2 && e2.forEach((i2) => {
      t2[i2.name] = i2;
    }), t2;
  }
  static convertRoleChangeRequest(e2) {
    var t2;
    return { requestedBy: (t2 = e2.requestedBy) == null ? void 0 : t2.peerId, roleName: e2.role.name, token: e2.token };
  }
  static convertException(e2) {
    return { code: e2.code, action: e2.action, name: e2.name, message: e2.message, description: e2.description, isTerminal: e2.isTerminal, nativeError: e2.nativeError, timestamp: new Date() };
  }
  static convertDeviceChangeUpdate(e2) {
    let t2 = { devices: e2.devices, selection: e2.selection, type: e2.type };
    return e2.error && (t2.error = this.convertException(e2.error)), t2;
  }
  static convertPlaylist(e2) {
    let t2 = this.getConvertedPlaylistType(e2, "audio"), i2 = this.getConvertedPlaylistType(e2, "video");
    return { audio: t2, video: i2 };
  }
  static convertPlaylistItem(e2, t2) {
    let i2 = t2.type, o2 = e2.getCurrentSelection(i2), r2 = e2.isPlaying(i2), a2 = t2.url === (o2 == null ? void 0 : o2.url);
    return K$1(h$1({}, t2), { type: t2.type, selected: a2, playing: a2 && r2 });
  }
  static getConvertedPlaylistType(e2, t2) {
    let i2 = {}, o2 = e2.getCurrentSelection(t2), r2 = e2.getCurrentProgress(t2), a2 = e2.getVolume(t2), n9 = e2.getList(t2), l2 = e2.getCurrentIndex(t2);
    return e2.getList(t2).forEach((m2) => {
      i2[m2.id] = s2.convertPlaylistItem(e2, m2);
    }), { list: i2, selection: { id: o2 == null ? void 0 : o2.id, hasPrevious: l2 > 0, hasNext: l2 < n9.length - 1 }, progress: r2, volume: a2, currentTime: e2.getCurrentTime(t2), playbackRate: e2.getPlaybackRate(t2) };
  }
  static convertRecordingStreamingState(e2, t2, i2) {
    var o2;
    return { recording: { browser: h$1({ running: false }, e2 == null ? void 0 : e2.browser), server: h$1({ running: false }, e2 == null ? void 0 : e2.server), hls: h$1({ running: false }, e2 == null ? void 0 : e2.hls) }, rtmp: h$1({ running: false }, t2), hls: { variants: ((o2 = i2 == null ? void 0 : i2.variants) == null ? void 0 : o2.map((r2) => r2)) || [], running: !!(i2 != null && i2.running), error: i2 == null ? void 0 : i2.error } };
  }
};
var ye = class {
  constructor(e2) {
    this.sdk = e2;
  }
  get sdkInteractivityCenter() {
    return this.sdk.getInteractivityCenter();
  }
  createPoll(e2) {
    return this.sdkInteractivityCenter.createPoll(e2);
  }
  startPoll(e2) {
    return this.sdkInteractivityCenter.startPoll(e2);
  }
  stopPoll(e2) {
    return this.sdkInteractivityCenter.stopPoll(e2);
  }
  addQuestionsToPoll(e2, t2) {
    return this.sdkInteractivityCenter.addQuestionsToPoll(e2, t2);
  }
  addResponsesToPoll(e2, t2) {
    return this.sdkInteractivityCenter.addResponsesToPoll(e2, t2);
  }
};
var ie = class {
  constructor(e2, t2, i2, o2) {
    this.playlistManager = e2;
    this.syncPlaylistState = i2;
    this.store = o2;
    this.type = t2;
  }
  play(e2) {
    return c$1(this, null, function* () {
      if (!e2) {
        S.w("Please pass id to play");
        return;
      }
      yield this.playlistManager.setEnabled(true, { id: e2, type: this.type });
    });
  }
  pause() {
    return c$1(this, null, function* () {
      let e2 = this.type === "audio" ? ct : St, t2 = this.store.getState(e2.selection);
      if (!t2.id) {
        S.w("No item is currently playing to pause");
        return;
      }
      yield this.playlistManager.setEnabled(false, { id: t2.id, type: this.type });
    });
  }
  playNext() {
    return c$1(this, null, function* () {
      yield this.playlistManager.playNext(this.type);
    });
  }
  playPrevious() {
    return c$1(this, null, function* () {
      yield this.playlistManager.playPrevious(this.type);
    });
  }
  seek(e2) {
    this.playlistManager.seek(e2, this.type), this.syncPlaylistState(`seekOn${this.type}Playlist`);
  }
  seekTo(e2) {
    this.playlistManager.seekTo(e2, this.type), this.syncPlaylistState(`seekToOn${this.type}Playlist`);
  }
  setVolume(e2) {
    this.playlistManager.setVolume(e2, this.type), this.syncPlaylistState(`setVolumeOn${this.type}Playlist`);
  }
  setList(e2) {
    this.playlistManager.setList(e2), this.syncPlaylistState(`setListOn${this.type}Playlist`);
  }
  stop() {
    return c$1(this, null, function* () {
      yield this.playlistManager.stop(this.type), this.syncPlaylistState(`stop${this.type}Playlist`);
    });
  }
  setIsAutoplayOn(e2) {
    this.playlistManager.setIsAutoplayOn(this.type, e2);
  }
  setPlaybackRate(e2) {
    this.playlistManager.setPlaybackRate(this.type, e2), this.syncPlaylistState(`set${this.type}PlaybackRate`);
  }
  removeItem(e2) {
    return c$1(this, null, function* () {
      let t2 = yield this.playlistManager.removeItem(e2, this.type);
      return t2 && this.syncPlaylistState(`remove${this.type}PlaylistItem`), t2;
    });
  }
  clearList() {
    return c$1(this, null, function* () {
      yield this.playlistManager.clearList(this.type), this.syncPlaylistState(`clear${this.type}Playlist`);
    });
  }
};
var ge = class {
  constructor(e2, t2) {
    this.sdk = e2;
    this.setLocally = t2;
  }
  get sdkSessionStore() {
    return this.sdk.getSessionStore();
  }
  set(e2, t2) {
    return c$1(this, null, function* () {
      let { value: i2 } = yield this.sdkSessionStore.set(String(e2), t2);
      this.setLocally({ key: e2, value: i2 });
    });
  }
  observe(e2) {
    return c$1(this, null, function* () {
      let t2 = Array.isArray(e2) ? e2.map((i2) => String(i2)) : [String(e2)];
      yield this.sdkSessionStore.observe(t2);
    });
  }
  unobserve(e2) {
    return c$1(this, null, function* () {
      let t2 = Array.isArray(e2) ? e2.map((i2) => String(i2)) : [String(e2)];
      yield this.sdkSessionStore.unobserve(t2);
    });
  }
};
var he = class {
  constructor(e2, t2) {
    this.intervalMs = 100, this.shouldMonitor = false, this.hasStarted = false, this.unsubs = [], this.analysers = {}, this.store = e2, this.actions = t2;
  }
  start() {
    return c$1(this, null, function* () {
      if (this.hasStarted)
        return;
      this.hasStarted = true, S.d("starting audio level monitor for remote peers", this.store);
      let e2 = this.store.getState(B);
      S.d("starting audio levels is connected to room", e2), e2 && (yield this.monitorAudioLevels());
      let t2 = this.store.subscribe(this.monitorAudioLevels.bind(this), B);
      this.unsubs.push(t2);
    });
  }
  stop() {
    return c$1(this, null, function* () {
      this.hasStarted && (this.hasStarted = false, this.shouldMonitor = false, this.unsubs.forEach((e2) => e2()), S.d("stopped audio level monitor for remote peers"));
    });
  }
  monitorAudioLevels() {
    return c$1(this, null, function* () {
      if (!this.store.getState(B)) {
        this.shouldMonitor && (S.i("room no longer connected, stopping audio level monitoring for remote"), this.shouldMonitor = false);
        return;
      }
      if (this.shouldMonitor)
        return;
      S.i("monitoring audio levels"), this.shouldMonitor = true;
      let t2 = () => {
        this.shouldMonitor ? (this.logAllPeersAudioLevels(), setTimeout(t2, this.intervalMs)) : S.i("stopped monitoring audio levels");
      };
      setTimeout(t2, 1e3);
    });
  }
  logAllPeersAudioLevels() {
    return c$1(this, null, function* () {
      var o2;
      if (!window.__triggerBeamEvent__)
        return;
      let t2 = this.store.getState(w).filter((r2) => !!r2.audioTrack), i2 = [];
      for (let r2 of t2) {
        let a2 = this.actions.hmsSDKTracks[r2.audioTrack], n9 = (o2 = a2 == null ? void 0 : a2.stream) == null ? void 0 : o2.nativeStream;
        if (r2.joinedAt && n9) {
          let l2 = yield this.getAudioLevel(r2, n9);
          l2.level > 0 && i2.push(l2);
        }
      }
      if (i2.length > 0) {
        let r2 = { event: "app-audio-level", data: i2 };
        window.__triggerBeamEvent__(JSON.stringify(r2));
      }
    });
  }
  getAudioLevel(e2, t2) {
    return c$1(this, null, function* () {
      this.analysers[t2.id] || (this.analysers[t2.id] = this.createAnalyserNode(t2));
      let i2 = this.analysers[t2.id], o2 = this.calculateAudioLevel(i2);
      return { peerId: e2.id, peerName: e2.name, level: o2 };
    });
  }
  createAnalyserNode(e2) {
    this.audioContext || (this.audioContext = new AudioContext());
    let t2 = this.audioContext.createAnalyser();
    return this.audioContext.createMediaStreamSource(e2).connect(t2), t2;
  }
  calculateAudioLevel(e2) {
    let t2 = new Uint8Array(e2.fftSize);
    e2.getByteTimeDomainData(t2);
    let i2 = 9e-3, o2 = i2;
    for (let n9 of t2)
      o2 = Math.max(o2, (n9 - 128) / 128);
    let r2 = (Math.log(i2) - Math.log(o2)) / Math.log(i2);
    return Math.ceil(Math.min(Math.max(r2 * 100, 0), 100));
  }
};
var Pe = class {
  constructor(e2, t2, i2) {
    this.hmsSDKTracks = {};
    this.isRoomJoinCalled = false;
    this.ignoredMessageTypes = [];
    this.setProgress = ({ type: e3, progress: t3 }) => {
      this.setState((i3) => {
        i3.playlist[e3].progress = t3, i3.playlist[e3].currentTime = this.sdk.getPlaylistManager().getCurrentTime(e3);
      }, "playlistProgress");
    };
    this.syncPlaylistState = (e3) => {
      this.setState((t3) => {
        Object.assign(t3.playlist, f$1.convertPlaylist(this.sdk.getPlaylistManager()));
      }, e3);
    };
    this.sendPeerUpdateNotification = (e3, t3) => {
      let i3 = this.store.getState(C$1(t3.peerId)), o2 = He[e3] || "peerUpdate";
      if ([ct$1.PEER_JOINED, ct$1.PEER_LEFT].includes(e3))
        this.syncRoomState(o2), i3 || (i3 = this.store.getState(C$1(t3.peerId)));
      else {
        let r2 = f$1.convertPeer(t3);
        this.setState((a2) => {
          let n9 = a2.peers[r2.id];
          F$1(n9, r2) && (N$1(n9.auxiliaryTracks, r2.auxiliaryTracks) && (n9.auxiliaryTracks = r2.auxiliaryTracks), Object.assign(n9, r2)), i3 = r2;
        }, o2);
      }
      this.hmsNotifications.sendPeerUpdate(e3, i3);
    };
    this.getSDKHMSPeer = (e3) => this.sdk.getPeerMap()[e3];
    this.setState = (e3, t3) => this.store.namedSetState(e3, t3);
    this.store = e2, this.sdk = t2, this.hmsNotifications = i2, this.sessionStore = new ge(this.sdk, this.setSessionStoreValueLocally.bind(this)), this.interactivityCenter = new ye(this.sdk);
  }
  refreshDevices() {
    return c$1(this, null, function* () {
      yield this.sdk.refreshDevices();
    });
  }
  unblockAudio() {
    return c$1(this, null, function* () {
      yield this.sdk.getAudioOutput().unblockAutoplay();
    });
  }
  setVolume(e2, t2) {
    return c$1(this, null, function* () {
      t2 ? yield this.setTrackVolume(e2, t2) : (yield this.sdk.getAudioOutput().setVolume(e2), this.syncRoomState("setOutputVolume"));
    });
  }
  setAudioOutputDevice(e2) {
    return c$1(this, null, function* () {
      (yield this.sdk.getAudioOutput().setDevice(e2)) && this.setState((i2) => {
        i2.settings.audioOutputDeviceId = e2;
      }, "setAudioOutputDevice");
    });
  }
  setPreferredLayer(e2, t2) {
    return c$1(this, null, function* () {
      var o2;
      let i2 = this.hmsSDKTracks[e2];
      if (i2)
        if (i2 instanceof H$2) {
          if (t2 === fe$1.NONE) {
            S.d(`layer ${fe$1.NONE} will be ignored`);
            return;
          }
          if (((o2 = this.store.getState(ut(e2))) == null ? void 0 : o2.preferredLayer) === t2) {
            S.d(`preferred layer is already ${t2}`);
            return;
          }
          this.setState((a2) => {
            let n9 = a2.tracks[e2];
            n9 && (n9.preferredLayer = t2);
          }, "setPreferredLayer"), yield i2.setPreferredLayer(t2);
        } else
          S.d(`track ${e2} is not a remote video track`);
      else
        this.logPossibleInconsistency(`track ${e2} not present, unable to set preffer layer`);
    });
  }
  getAuthTokenByRoomCode(e2, t2) {
    return this.sdk.getAuthTokenByRoomCode(e2, t2);
  }
  preview(e2) {
    return c$1(this, null, function* () {
      if (this.isRoomJoinCalled) {
        this.logPossibleInconsistency("attempting to call preview after join was called");
        return;
      }
      let t2 = this.store.getState(E$1);
      if (t2 === "Preview" || t2 === "Connecting") {
        this.logPossibleInconsistency("attempting to call preview while room is in preview/connecting");
        return;
      }
      try {
        this.setState((i2) => {
          i2.room.roomState = "Connecting";
        }, "connecting"), yield this.sdkPreviewWithListeners(e2);
      } catch (i2) {
        throw S.e("Cannot show preview. Failed to connect to room - ", i2), i2;
      }
    });
  }
  join(e2) {
    return c$1(this, null, function* () {
      if (this.isRoomJoinCalled) {
        this.logPossibleInconsistency("room join is called again");
        return;
      }
      try {
        this.isRoomJoinCalled = true, this.setState((t2) => {
          t2.room.roomState = "Connecting";
        }, "join"), yield this.sdkJoinWithListeners(e2);
      } catch (t2) {
        throw this.isRoomJoinCalled = false, S.e("Failed to connect to room - ", t2), t2;
      }
    });
  }
  leave() {
    return c$1(this, null, function* () {
      let e2 = this.store.getState(B), t2 = true;
      e2 || (t2 = false, this.logPossibleInconsistency("room leave is called when no room is connected"));
      let i2 = this.store.getState(E$1);
      return this.setState((o2) => {
        o2.room.roomState = "Disconnecting";
      }, "leaving"), this.sdk.leave(t2).then(() => {
        this.resetState("leave"), this.beamSpeakerLabelsLogger && this.beamSpeakerLabelsLogger.stop().catch(S.e), S.i("left room");
      }).catch((o2) => {
        S.e("error in leaving room - ", o2), this.setState((r2) => {
          r2.room.roomState = i2;
        }, "revertLeave");
      });
    });
  }
  setScreenShareEnabled(e2, t2) {
    return c$1(this, null, function* () {
      typeof t2 == "boolean" && (t2 = { audioOnly: t2 });
      try {
        e2 ? yield this.startScreenShare(t2) : yield this.stopScreenShare();
      } catch (i2) {
        throw this.hmsNotifications.sendError(f$1.convertException(i2)), i2;
      }
    });
  }
  addTrack(e2, t2 = "regular") {
    return c$1(this, null, function* () {
      yield this.sdk.addTrack(e2, t2), this.syncRoomState("addTrack");
    });
  }
  removeTrack(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.removeTrack(e2), this.syncRoomState("removeTrack");
    });
  }
  setLocalAudioEnabled(e2) {
    return c$1(this, null, function* () {
      let t2 = this.store.getState(b);
      t2 && (yield this.setEnabledTrack(t2, e2));
    });
  }
  setLocalVideoEnabled(e2) {
    return c$1(this, null, function* () {
      let t2 = this.store.getState(I);
      t2 && (yield this.setEnabledTrack(t2, e2));
    });
  }
  setEnabledTrack(e2, t2) {
    return c$1(this, null, function* () {
      var r2;
      if (((r2 = this.store.getState().tracks[e2]) == null ? void 0 : r2.enabled) === t2) {
        this.logPossibleInconsistency(`local track[${e2}] enabled state - ${t2}`);
        return;
      }
      this.setState((a2) => {
        a2.tracks[e2] ? a2.tracks[e2].displayEnabled = t2 : this.logPossibleInconsistency("track id not found for setEnabled");
      }, "displayEnabled");
      try {
        yield this.setEnabledSDKTrack(e2, t2), this.syncRoomState("setEnabled");
      } catch (a2) {
        throw this.setState((n9) => {
          n9.tracks[e2].displayEnabled = !t2;
        }, "rollbackDisplayEnabled"), this.hmsNotifications.sendError(f$1.convertException(a2)), a2;
      }
      let o2 = t2 ? ie$1.TRACK_UNMUTED : ie$1.TRACK_MUTED;
      this.hmsNotifications.sendTrackUpdate(o2, e2);
    });
  }
  setAudioSettings(e2) {
    return c$1(this, null, function* () {
      let t2 = this.store.getState(b);
      t2 && (yield this.setSDKLocalAudioTrackSettings(t2, e2), this.syncRoomState("setAudioSettings"));
    });
  }
  setVideoSettings(e2) {
    return c$1(this, null, function* () {
      let t2 = this.store.getState(I);
      t2 && (yield this.setSDKLocalVideoTrackSettings(t2, e2), this.syncRoomState("setVideoSettings"));
    });
  }
  switchCamera() {
    return c$1(this, null, function* () {
      let e2 = this.store.getState(I);
      if (e2) {
        let t2 = this.hmsSDKTracks[e2];
        t2 && (yield t2.switchCamera(), this.syncRoomState("switchCamera"));
      }
    });
  }
  sendMessage(e2) {
    this.sendBroadcastMessage(e2);
  }
  sendBroadcastMessage(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = yield this.sdk.sendBroadcastMessage(e2, t2);
      this.updateMessageInStore(i2, { message: e2, type: t2 });
    });
  }
  sendGroupMessage(e2, t2, i2) {
    return c$1(this, null, function* () {
      let o2 = this.store.getState(_), r2 = t2.map((n9) => o2[n9]), a2 = yield this.sdk.sendGroupMessage(e2, r2, i2);
      this.updateMessageInStore(a2, { message: e2, recipientRoles: t2, type: i2 });
    });
  }
  sendDirectMessage(e2, t2, i2) {
    return c$1(this, null, function* () {
      let o2 = this.getSDKHMSPeer(t2);
      if (!o2)
        throw S.w("sendMessage", "Failed to send message"), Error(`sendMessage Failed - peer ${t2} not found`);
      let r2 = yield this.sdk.sendDirectMessage(e2, o2, i2);
      this.updateMessageInStore(r2, { message: e2, recipientPeer: o2.peerId, type: i2 });
    });
  }
  updateMessageInStore(e2, t2) {
    if (!e2)
      throw S.w("sendMessage", "Failed to send message", t2), Error(`sendMessage Failed - ${JSON.stringify(t2)}`);
    let i2 = f$1.convertMessage(e2);
    return i2.read = true, i2.senderName = "You", i2.ignored = this.ignoredMessageTypes.includes(i2.type), this.putMessageInStore(i2), i2;
  }
  setMessageRead(e2, t2) {
    this.setState((i2) => {
      t2 ? i2.messages.byID[t2] ? i2.messages.byID[t2].read = e2 : this.logPossibleInconsistency("no message with id is found") : i2.messages.allIDs.forEach((o2) => {
        i2.messages.byID[o2].read = e2;
      });
    }, "setMessageRead");
  }
  attachVideo(e2, t2) {
    return c$1(this, null, function* () {
      if (this.localAndVideoUnmuting(e2))
        return new Promise((i2) => {
          let o2 = this.store.subscribe((r2) => c$1(this, null, function* () {
            r2 && (yield this.attachVideoInternal(e2, t2), o2(), i2());
          }), Ie);
        });
      yield this.attachVideoInternal(e2, t2);
    });
  }
  detachVideo(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.hmsSDKTracks[e2];
      (i2 == null ? void 0 : i2.type) === "video" ? yield this.sdk.detachVideo(i2, t2) : (t2 && (t2.srcObject = null), S.d("possible inconsistency detected - no video track found to remove sink"));
    });
  }
  addPluginToVideoTrack(e2, t2) {
    return c$1(this, null, function* () {
      return this.addRemoveVideoPlugin(e2, "add", t2);
    });
  }
  addPluginToAudioTrack(e2) {
    return c$1(this, null, function* () {
      return this.addRemoveAudioPlugin(e2, "add");
    });
  }
  validateVideoPluginSupport(e2) {
    let t2 = {};
    if (t2.isSupported = false, !e2)
      return S.w("no plugin passed in for checking support"), t2.errMsg = "no plugin passed in for checking support", t2;
    let i2 = this.store.getState(I);
    if (!i2)
      return S.w("video Track not added to local peer yet"), t2.errMsg = "call this function only after local peer has video track", t2;
    let o2 = this.hmsSDKTracks[i2];
    return o2 ? t2 = o2.validatePlugin(e2) : (S.w(`track ${i2} not present, unable to validate plugin`), t2.errMsg = `track ${i2} not present, unable to validate plugin`), t2;
  }
  validateAudioPluginSupport(e2) {
    let t2 = {};
    if (t2.isSupported = false, !e2)
      return S.w('no plugin passed in for checking support"'), t2.errMsg = 'no plugin passed in for checking support"', t2;
    let i2 = this.store.getState(b);
    if (!i2)
      return S.w("audio track not added to local peer yet"), t2.errMsg = "call this function only after local peer has audio track", t2;
    let o2 = this.hmsSDKTracks[i2];
    return o2 ? t2 = o2.validatePlugin(e2) : (S.w(`track ${i2} not present, unable to validate plugin`), t2.errMsg = `track ${i2} not present, unable to validate plugin`), t2;
  }
  removePluginFromVideoTrack(e2) {
    return c$1(this, null, function* () {
      return this.addRemoveVideoPlugin(e2, "remove");
    });
  }
  removePluginFromAudioTrack(e2) {
    return c$1(this, null, function* () {
      return this.addRemoveAudioPlugin(e2, "remove");
    });
  }
  changeRole(e2, t2, i2 = false) {
    return c$1(this, null, function* () {
      let o2 = this.getSDKHMSPeer(e2);
      if (!o2) {
        this.logPossibleInconsistency(`Unknown peer ID given ${e2} for changerole`);
        return;
      }
      yield this.sdk.changeRoleOfPeer(o2, t2, i2);
    });
  }
  changeRoleOfPeer(e2, t2, i2 = false) {
    return c$1(this, null, function* () {
      let o2 = this.getSDKHMSPeer(e2);
      if (!o2) {
        this.logPossibleInconsistency(`Unknown peer ID given ${e2} for changerole`);
        return;
      }
      yield this.sdk.changeRoleOfPeer(o2, t2, i2);
    });
  }
  changeRoleOfPeersWithRoles(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.sdk.getRoles().filter((o2) => e2.includes(o2.name));
      yield this.sdk.changeRoleOfPeersWithRoles(i2, t2);
    });
  }
  acceptChangeRole(e2) {
    return c$1(this, null, function* () {
      let t2 = e2.requestedBy ? this.getSDKHMSPeer(e2.requestedBy.id) : void 0;
      t2 || S.w(`peer for which role change is requested no longer available - ${e2.requestedBy}`);
      let i2 = { requestedBy: t2, role: e2.role, token: e2.token };
      yield this.sdk.acceptChangeRole(i2), this.removeRoleChangeRequest(e2);
    });
  }
  initAppData(e2) {
    this.setState((t2) => {
      t2.appData = e2;
    }, "initAppData");
  }
  setAppData(e2, t2, i2) {
    let o2 = (t2 == null ? void 0 : t2.constructor.name) === "Object";
    this.setState((r2) => {
      if (r2.appData)
        i2 && o2 ? Object.assign(r2.appData[e2], t2) : r2.appData[e2] = t2;
      else {
        let a2 = { [e2]: t2 };
        r2.appData = a2;
      }
    }, `setAppData-${e2}`);
  }
  rejectChangeRole(e2) {
    this.removeRoleChangeRequest(e2);
  }
  endRoom(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.store.getState(Xe);
      if (!(i2 != null && i2.endRoom)) {
        S.w("You are not allowed to perform this action - endRoom");
        return;
      }
      let o2 = this.store.getState(E$1);
      this.setState((r2) => {
        r2.room.roomState = "Disconnecting";
      }, "endingRoom");
      try {
        yield this.sdk.endRoom(e2, t2), this.resetState("endRoom");
      } catch (r2) {
        S.e("error in ending room - ", r2), this.setState((a2) => {
          a2.room.roomState = o2;
        }, "revertEndRoom");
      }
    });
  }
  removePeer(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.getSDKHMSPeer(e2);
      if (i2 && !i2.isLocal)
        yield this.sdk.removePeer(i2, t2);
      else {
        this.logPossibleInconsistency(`No remote peer found for peerID - ${e2}`);
        return;
      }
    });
  }
  startRTMPOrRecording(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.startRTMPOrRecording(e2);
    });
  }
  stopRTMPAndRecording() {
    return c$1(this, null, function* () {
      yield this.sdk.stopRTMPAndRecording();
    });
  }
  startHLSStreaming(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.startHLSStreaming(e2);
    });
  }
  stopHLSStreaming(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.stopHLSStreaming(e2);
    });
  }
  sendHLSTimedMetadata(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.sendHLSTimedMetadata(e2);
    });
  }
  changeName(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.changeName(e2);
    });
  }
  changeMetadata(e2) {
    return c$1(this, null, function* () {
      typeof e2 != "string" && (e2 = JSON.stringify(e2)), yield this.sdk.changeMetadata(e2);
    });
  }
  setSessionMetadata(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.setSessionMetadata(e2), this.setState((t2) => {
        t2.sessionMetadata = e2;
      }, "setSessionMetadata"), this.setSessionStoreValueLocally({ key: "default", value: e2 }, "setSessionMetadata");
    });
  }
  populateSessionMetadata() {
    return c$1(this, null, function* () {
      let e2 = yield this.sdk.getSessionMetadata();
      this.setState((t2) => {
        t2.sessionMetadata = e2;
      }, "populateSessionMetadata"), this.setSessionStoreValueLocally({ key: "default", value: e2 }, "populateSessionmetadata");
    });
  }
  setRemoteTrackEnabled(e2, t2) {
    return c$1(this, null, function* () {
      if (typeof e2 == "string") {
        let i2 = this.hmsSDKTracks[e2];
        i2 && It(i2) ? yield this.sdk.changeTrackState(i2, t2) : this.logPossibleInconsistency(`No remote track with ID ${e2} found for change track state`);
      } else
        Array.isArray(e2) && e2.forEach((i2) => this.setRemoteTrackEnabled(i2, t2));
    });
  }
  setRemoteTracksEnabled(e2) {
    return c$1(this, null, function* () {
      let t2 = { enabled: e2.enabled, type: e2.type, source: e2.source };
      if (e2.roles) {
        let i2 = this.store.getState(_);
        t2.roles = e2.roles.map((o2) => i2[o2]);
      }
      yield this.sdk.changeMultiTrackState(t2);
    });
  }
  setLogLevel(e2) {
    S.level = e2, this.sdk.setLogLevel(e2);
  }
  setFrameworkInfo(e2) {
    this.sdk.setFrameworkInfo(e2);
  }
  ignoreMessageTypes(e2, t2 = false) {
    if (t2)
      this.ignoredMessageTypes = e2;
    else
      for (let i2 of e2)
        this.ignoredMessageTypes.includes(i2) || this.ignoredMessageTypes.push(i2);
  }
  enableBeamSpeakerLabelsLogging() {
    return c$1(this, null, function* () {
      this.beamSpeakerLabelsLogger || (S.i("enabling beam speaker labels logging"), this.beamSpeakerLabelsLogger = new he(this.store, this), yield this.beamSpeakerLabelsLogger.start());
    });
  }
  resetState(e2 = "resetState") {
    this.isRoomJoinCalled = false, this.hmsSDKTracks = {}, S.cleanup(), this.setState((t2) => {
      Object.assign(t2, ae());
    }, e2);
  }
  sdkJoinWithListeners(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.join(e2, { onJoin: this.onJoin.bind(this), onRoomUpdate: this.onRoomUpdate.bind(this), onPeerUpdate: this.onPeerUpdate.bind(this), onTrackUpdate: this.onTrackUpdate.bind(this), onMessageReceived: this.onMessageReceived.bind(this), onError: this.onError.bind(this), onReconnected: this.onReconnected.bind(this), onReconnecting: this.onReconnecting.bind(this), onRoleChangeRequest: this.onRoleChangeRequest.bind(this), onRoleUpdate: this.onRoleUpdate.bind(this), onDeviceChange: this.onDeviceChange.bind(this), onChangeTrackStateRequest: this.onChangeTrackStateRequest.bind(this), onChangeMultiTrackStateRequest: this.onChangeMultiTrackStateRequest.bind(this), onRemovedFromRoom: this.onRemovedFromRoom.bind(this), onNetworkQuality: this.onNetworkQuality.bind(this), onSessionStoreUpdate: this.onSessionStoreUpdate.bind(this), onPollsUpdate: this.onPollsUpdate.bind(this) }), this.sdk.addAudioListener({ onAudioLevelUpdate: this.onAudioLevelUpdate.bind(this) }), this.sdk.addConnectionQualityListener({ onConnectionQualityUpdate: this.onConnectionQualityUpdate.bind(this) });
    });
  }
  onRemovedFromRoom(e2) {
    var o2;
    let t2 = this.store.getState(C$1((o2 = e2.requestedBy) == null ? void 0 : o2.peerId));
    this.hmsNotifications.sendLeaveRoom(K$1(h$1({}, e2), { requestedBy: t2 || void 0 }));
    let i2 = e2.roomEnded || !t2 ? "roomEnded" : "removedFromRoom";
    S.i(`resetting state after peer removed ${i2}`, e2), this.resetState(i2);
  }
  onDeviceChange(e2) {
    let t2 = e2.devices;
    if (!t2)
      return;
    let i2 = this.store.getState(v$1);
    if (this.setState((o2) => {
      N$1(o2.devices.audioInput, t2.audioInput) || (o2.devices.audioInput = t2.audioInput), N$1(o2.devices.videoInput, t2.videoInput) || (o2.devices.videoInput = t2.videoInput), N$1(o2.devices.audioOutput, t2.audioOutput) || (o2.devices.audioOutput = t2.audioOutput);
      let r2 = this.sdk.getLocalPeer();
      i2 != null && i2.id && r2 && Object.assign(o2.settings, this.getMediaSettings(r2));
    }, "deviceChange"), e2.selection) {
      let o2 = f$1.convertDeviceChangeUpdate(e2);
      this.hmsNotifications.sendDeviceChange(o2);
    }
  }
  sdkPreviewWithListeners(e2) {
    return c$1(this, null, function* () {
      yield this.sdk.preview(e2, { onPreview: this.onPreview.bind(this), onError: this.onError.bind(this), onReconnected: this.onReconnected.bind(this), onReconnecting: this.onReconnecting.bind(this), onDeviceChange: this.onDeviceChange.bind(this), onRoomUpdate: this.onRoomUpdate.bind(this), onPeerUpdate: this.onPeerUpdate.bind(this), onNetworkQuality: this.onNetworkQuality.bind(this) }), this.sdk.addAudioListener({ onAudioLevelUpdate: this.onAudioLevelUpdate.bind(this) });
    });
  }
  onNetworkQuality(e2) {
    this.setState((t2) => {
      var o2;
      let i2 = t2.room.localPeer || ((o2 = this.sdk.getLocalPeer()) == null ? void 0 : o2.peerId);
      i2 && (t2.connectionQualities[i2] = { peerID: i2, downlinkQuality: e2 });
    }, "ConnectionQuality");
  }
  onSessionStoreUpdate(e2) {
    this.setSessionStoreValueLocally(e2, "sessionStoreUpdate");
  }
  onPollsUpdate(e2, t2) {
    let i2 = fe[e2];
    this.setState((o2) => {
      let r2 = t2.reduce((a2, n9) => {
        var l2;
        return a2[n9.id] = K$1(h$1({}, n9), { questions: (l2 = n9.questions) == null ? void 0 : l2.map((m2) => {
          var L2, x2;
          return K$1(h$1({}, m2), { answer: m2.answer ? h$1({}, m2.answer) : void 0, options: (L2 = m2.options) == null ? void 0 : L2.map((H2) => h$1({}, H2)), responses: (x2 = m2.responses) == null ? void 0 : x2.map((H2) => h$1({}, H2)) });
        }) }), a2;
      }, {});
      kt(o2.polls, r2);
    }, i2), t2.forEach((o2) => this.hmsNotifications.sendPollUpdate(e2, o2.id));
  }
  startScreenShare(e2) {
    return c$1(this, null, function* () {
      this.store.getState(Ee) ? this.logPossibleInconsistency("start screenshare is called while it's on") : (yield this.sdk.startScreenShare(() => this.syncRoomState("screenshareStopped"), e2), this.syncRoomState("startScreenShare"));
    });
  }
  stopScreenShare() {
    return c$1(this, null, function* () {
      this.store.getState(Ee) ? (yield this.sdk.stopScreenShare(), this.syncRoomState("stopScreenShare")) : this.logPossibleInconsistency("stop screenshare is called while it's not on");
    });
  }
  attachVideoInternal(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.hmsSDKTracks[e2];
      i2 && i2.type === "video" ? yield this.sdk.attachVideo(i2, t2) : this.logPossibleInconsistency("no video track found to add sink");
    });
  }
  syncRoomState(e2) {
    e2 = `${e2}_fullSync`, S.time(`store-sync-${e2}`);
    let t2 = {}, i2 = [], o2 = {}, r2 = {}, a2 = {}, n9, l2 = this.sdk.getPeers();
    for (let H2 of l2) {
      let q2 = f$1.convertPeer(H2);
      t2[q2.id] = q2, i2.push(q2.id);
      let ke2 = [H2.audioTrack, H2.videoTrack, ...H2.auxiliaryTracks];
      for (let O2 of ke2) {
        if (!O2)
          continue;
        let Ve2 = f$1.convertTrack(O2);
        o2[Ve2.id] = Ve2, r2[O2.trackId] = O2;
      }
      if (H2.isLocal) {
        let O2 = H2;
        n9 = this.getPreviewFields(O2), Object.assign(a2, this.getMediaSettings(O2));
      }
    }
    let m2 = this.sdk.getRecordingState(), L2 = this.sdk.getRTMPState(), x2 = this.sdk.getHLSState();
    this.setState((H2) => {
      var O2;
      H2.room.peers = i2;
      let q2 = H2.peers, ke2 = H2.tracks;
      ht(q2, t2), Pt(ke2, o2), Object.assign(H2.settings, a2), this.hmsSDKTracks = r2, (O2 = H2.preview) != null && O2.localPeer && (n9 != null && n9.localPeer) ? Object.assign(H2.preview, n9) : H2.preview = n9, Object.assign(H2.roles, f$1.convertRoles(this.sdk.getRoles())), Object.assign(H2.playlist, f$1.convertPlaylist(this.sdk.getPlaylistManager())), Object.assign(H2.room, f$1.convertRecordingStreamingState(m2, L2, x2)), Object.assign(H2.templateAppData, this.sdk.getTemplateAppData());
    }, e2), S.timeEnd(`store-sync-${e2}`);
  }
  onPreview(e2) {
    this.setState((t2) => {
      var i2;
      Object.assign(t2.room, f$1.convertRoom(e2, (i2 = this.sdk.getLocalPeer()) == null ? void 0 : i2.peerId)), t2.room.roomState = "Preview";
    }, "previewStart"), this.syncRoomState("previewSync");
  }
  onJoin(e2) {
    let t2 = this.sdk.getPlaylistManager();
    this.audioPlaylist = new ie(t2, "audio", this.syncPlaylistState.bind(this), this.store), this.videoPlaylist = new ie(t2, "video", this.syncRoomState.bind(this), this.store), this.syncRoomState("joinSync"), this.setState((i2) => {
      var o2;
      Object.assign(i2.room, f$1.convertRoom(e2, (o2 = this.sdk.getLocalPeer()) == null ? void 0 : o2.peerId)), i2.room.isConnected = true, i2.room.roomState = "Connected";
    }, "joined"), t2.onProgress(this.setProgress), t2.onNewTrackStart((i2) => {
      this.syncPlaylistState(`${i2.type}PlaylistUpdate`);
    }), t2.onPlaylistEnded((i2) => {
      this.syncPlaylistState(`${i2}PlaylistEnded`);
    }), t2.onCurrentTrackEnded((i2) => {
      this.hmsNotifications.sendPlaylistTrackEnded(f$1.convertPlaylistItem(t2, i2)), this.syncPlaylistState(`${i2.type}PlaylistItemEnded`);
    });
  }
  onRoomUpdate(e2, t2) {
    this.setState((i2) => {
      var o2;
      Object.assign(i2.room, f$1.convertRoom(t2, (o2 = this.sdk.getLocalPeer()) == null ? void 0 : o2.peerId));
    }, e2);
  }
  onPeerUpdate(e2, t2) {
    if (![ct$1.BECAME_DOMINANT_SPEAKER, ct$1.RESIGNED_DOMINANT_SPEAKER].includes(e2)) {
      if (Array.isArray(t2)) {
        let i2 = this.store.getState(k), o2 = t2.filter((a2) => !i2[a2.peerId]);
        if (this.syncRoomState("peersJoined"), this.store.getState(B)) {
          let a2 = [];
          for (let n9 of t2) {
            let l2 = this.store.getState(C$1(n9.peerId));
            l2 && a2.push(l2);
          }
          this.hmsNotifications.sendPeerList(a2);
        } else
          o2.forEach((a2) => {
            let n9 = this.store.getState(C$1(a2.peerId));
            n9 && this.hmsNotifications.sendPeerUpdate(ct$1.PEER_JOINED, n9);
          });
        return;
      }
      this.sendPeerUpdateNotification(e2, t2);
    }
  }
  onTrackUpdate(e2, t2, i2) {
    if (e2 === ie$1.TRACK_REMOVED)
      this.hmsNotifications.sendTrackUpdate(e2, t2.trackId), this.handleTrackRemove(t2, i2);
    else if ([ie$1.TRACK_ADDED, ie$1.TRACK_REMOVED].includes(e2)) {
      let o2 = te[e2];
      this.syncRoomState(o2), this.hmsNotifications.sendTrackUpdate(e2, t2.trackId);
    } else {
      let o2 = te[e2] || "trackUpdate", r2 = f$1.convertTrack(t2);
      this.setState((a2) => {
        let n9 = a2.tracks[r2.id];
        F$1(n9, r2) && (Le(n9, r2), Object.assign(n9, r2));
      }, o2), this.hmsNotifications.sendTrackUpdate(e2, t2.trackId);
    }
  }
  onMessageReceived(e2) {
    let t2 = f$1.convertMessage(e2);
    t2.read = false, t2.ignored = this.ignoredMessageTypes.includes(t2.type), this.putMessageInStore(t2), this.hmsNotifications.sendMessageReceived(t2);
  }
  putMessageInStore(e2) {
    e2.ignored || this.setState((t2) => {
      t2.messages.byID[e2.id] = e2, t2.messages.allIDs.push(e2.id);
    }, "newMessage");
  }
  onAudioLevelUpdate(e2) {
    this.setState((t2) => {
      let i2 = {};
      e2.forEach((r2) => {
        if (!r2.track || !r2.peer)
          return;
        let a2 = r2.track.trackId;
        i2[a2] = r2.audioLevel, t2.speakers[a2] || (t2.speakers[a2] = { audioLevel: r2.audioLevel, peerID: r2.peer.peerId, trackID: a2 });
      });
      let o2 = Object.entries(t2.speakers);
      for (let [r2, a2] of o2)
        a2.audioLevel = i2[r2] || 0, a2.audioLevel === 0 && delete t2.speakers[r2];
    }, "audioLevel");
  }
  onConnectionQualityUpdate(e2) {
    this.setState((t2) => {
      let i2 = /* @__PURE__ */ new Set();
      e2.forEach((r2) => {
        let a2 = r2.peerID;
        a2 && (i2.add(a2), t2.connectionQualities[a2] ? Object.assign(t2.connectionQualities[a2], r2) : t2.connectionQualities[a2] = r2);
      });
      let o2 = Object.keys(t2.connectionQualities);
      for (let r2 of o2)
        i2.has(r2) || delete t2.connectionQualities[r2];
    }, "connectionQuality");
  }
  onChangeTrackStateRequest(e2) {
    var r2;
    let t2 = this.store.getState(C$1((r2 = e2.requestedBy) == null ? void 0 : r2.peerId)), i2 = this.getStoreLocalTrackIDfromSDKTrack(e2.track), o2 = this.store.getState(ue(i2));
    if (!o2)
      return this.logPossibleInconsistency(`Not found track for which track state change was requested, ${e2.track}`);
    e2.enabled || this.syncRoomState("changeTrackStateRequest"), this.hmsNotifications.sendChangeTrackStateRequest({ requestedBy: t2 || void 0, track: o2, enabled: e2.enabled });
  }
  onChangeMultiTrackStateRequest(e2) {
    var r2;
    let t2 = this.store.getState(C$1((r2 = e2.requestedBy) == null ? void 0 : r2.peerId));
    e2.enabled || this.syncRoomState("changeMultiTrackStateRequest");
    let i2 = [], o2 = this.store.getState(T);
    for (let a2 of e2.tracks) {
      let n9 = this.getStoreLocalTrackIDfromSDKTrack(a2);
      n9 && o2[n9] && i2.push(o2[n9]);
    }
    this.hmsNotifications.sendChangeMultiTrackStateRequest({ requestedBy: t2 || void 0, tracks: i2, enabled: e2.enabled, type: e2.type, source: e2.source });
  }
  onReconnected() {
    this.syncRoomState("reconnectedSync"), this.hmsNotifications.sendReconnected(), this.setState((e2) => {
      e2.room.roomState = e2.room.isConnected ? "Connected" : "Preview";
    }, "reconnected");
  }
  onReconnecting(e2) {
    let t2 = f$1.convertException(e2);
    S.e("Reconnection: received error from sdk", t2), this.hmsNotifications.sendReconnecting(t2), this.setState((i2) => {
      i2.room.roomState = "Reconnecting", i2.errors.push(t2);
    }, "reconnecting");
  }
  onError(e2) {
    let t2 = f$1.convertException(e2);
    t2.isTerminal ? (this.leave().then(() => S.e("error from SDK, left room.")), this.setState((i2) => {
      i2.room.roomState = "Failed", i2.errors.push(t2);
    }, "errorTerminal")) : this.store.getState().errors.length < 50 && this.setState((o2) => {
      o2.errors.push(t2);
    }, "error"), this.syncRoomState("errorSync"), this.hmsNotifications.sendError(t2), S.e("received error from sdk", t2 instanceof v$3 ? `${t2}` : t2);
  }
  handleTrackRemove(e2, t2) {
    this.setState((i2) => {
      let o2 = i2.peers[t2.peerId], r2 = i2.tracks, a2 = e2.trackId;
      if (this.isSameStoreSDKTrack(a2, o2 == null ? void 0 : o2.audioTrack))
        o2 == null || delete o2.audioTrack;
      else if (this.isSameStoreSDKTrack(a2, o2 == null ? void 0 : o2.videoTrack))
        o2 == null || delete o2.videoTrack;
      else {
        let n9 = o2 == null ? void 0 : o2.auxiliaryTracks.indexOf(a2);
        n9 > -1 && this.isSameStoreSDKTrack(a2, o2 == null ? void 0 : o2.auxiliaryTracks[n9]) && (o2 == null || o2.auxiliaryTracks.splice(n9, 1));
      }
      delete r2[a2], delete this.hmsSDKTracks[a2];
    }, "trackRemoved");
  }
  setEnabledSDKTrack(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.hmsSDKTracks[e2];
      i2 ? yield i2.setEnabled(t2) : this.logPossibleInconsistency(`track ${e2} not present, unable to enabled/disable`);
    });
  }
  setSDKLocalVideoTrackSettings(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.hmsSDKTracks[e2];
      i2 ? yield i2.setSettings(t2) : this.logPossibleInconsistency(`local track ${e2} not present, unable to set settings`);
    });
  }
  setSDKLocalAudioTrackSettings(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.hmsSDKTracks[e2];
      i2 ? yield i2.setSettings(t2) : this.logPossibleInconsistency(`local track ${e2} not present, unable to set settings`);
    });
  }
  getMediaSettings(e2) {
    var r2;
    let t2 = this.store.getState(We), i2 = e2.audioTrack, o2 = e2.videoTrack;
    return { audioInputDeviceId: (i2 == null ? void 0 : i2.settings.deviceId) || t2.audioInputDeviceId, videoInputDeviceId: (o2 == null ? void 0 : o2.settings.deviceId) || t2.videoInputDeviceId, audioOutputDeviceId: (r2 = this.sdk.getAudioOutput().getDevice()) == null ? void 0 : r2.deviceId };
  }
  getPreviewFields(e2) {
    var i2, o2;
    if (!e2.isInPreview())
      return;
    let t2 = f$1.convertPeer(e2);
    return { localPeer: t2.id, audioTrack: t2.audioTrack, videoTrack: t2.videoTrack, asRole: ((i2 = e2.asRole) == null ? void 0 : i2.name) || ((o2 = e2.role) == null ? void 0 : o2.name) };
  }
  setTrackVolume(e2, t2) {
    return c$1(this, null, function* () {
      let i2 = this.hmsSDKTracks[t2];
      i2 ? i2 instanceof Te$1 ? (yield i2.setVolume(e2), this.setState((o2) => {
        let r2 = o2.tracks[t2];
        r2 && r2.type === "audio" && (r2.volume = e2);
      }, "trackVolume")) : S.w(`track ${t2} is not an audio track`) : this.logPossibleInconsistency(`track ${t2} not present, unable to set volume`);
    });
  }
  localAndVideoUnmuting(e2) {
    let t2 = this.store.getState(v$1);
    if ((t2 == null ? void 0 : t2.videoTrack) !== e2)
      return false;
    let i2 = this.store.getState(Ye), o2 = this.store.getState(Ie);
    return i2 && !o2;
  }
  logPossibleInconsistency(e2) {
    S.w("possible inconsistency detected - ", e2);
  }
  addRemoveVideoPlugin(e2, t2, i2) {
    return c$1(this, null, function* () {
      if (!e2) {
        S.w("Invalid plugin received in store");
        return;
      }
      let o2 = this.store.getState(I);
      if (o2) {
        let r2 = this.hmsSDKTracks[o2];
        r2 ? (t2 === "add" ? yield r2.addPlugin(e2, i2) : t2 === "remove" && (yield r2.removePlugin(e2)), this.syncRoomState(`${t2}VideoPlugin`)) : this.logPossibleInconsistency(`track ${o2} not present, unable to remove plugin`);
      }
    });
  }
  addRemoveAudioPlugin(e2, t2) {
    return c$1(this, null, function* () {
      if (!e2) {
        S.w("Invalid plugin received in store");
        return;
      }
      let i2 = this.store.getState(b);
      if (i2) {
        let o2 = this.hmsSDKTracks[i2];
        o2 ? (t2 === "add" ? yield o2.addPlugin(e2) : t2 === "remove" && (yield o2.removePlugin(e2)), this.syncRoomState(`${t2}AudioPlugin`)) : this.logPossibleInconsistency(`track ${i2} not present, unable to remove plugin`);
      }
    });
  }
  isSameStoreSDKTrack(e2, t2) {
    var i2;
    return t2 ? ((i2 = this.hmsSDKTracks[t2]) == null ? void 0 : i2.trackId) === e2 : false;
  }
  onRoleChangeRequest(e2) {
    this.setState((t2) => {
      t2.roleChangeRequests.length === 0 && t2.roleChangeRequests.push(f$1.convertRoleChangeRequest(e2));
    }, "roleChangeRequest");
  }
  removeRoleChangeRequest(e2) {
    this.setState((t2) => {
      let i2 = t2.roleChangeRequests.findIndex((o2) => o2.token === e2.token);
      i2 !== -1 && t2.roleChangeRequests.splice(i2, 1);
    }, "removeRoleChangeRequest");
  }
  onRoleUpdate() {
    this.syncRoomState("roleUpdate");
  }
  getStoreLocalTrackIDfromSDKTrack(e2) {
    return this.store.getState(Je).find((i2) => this.hmsSDKTracks[i2].trackId === e2.trackId);
  }
  setSessionStoreValueLocally(e2, t2 = "setSessionStore") {
    let i2 = Array.isArray(e2) ? e2 : [e2];
    this.setState((o2) => {
      i2.forEach((r2) => {
        o2.sessionStore[r2.key] = r2.value;
      });
    }, t2);
  }
};
var oe = class s3 {
  constructor(e2, t2, i2) {
    this.getStats = () => (this.stats || (this.stats = new re(this.store, this.sdk)), this.stats);
    e2 ? this.store = e2 : this.store = s3.createNewHMSStore(Te("HMSStore"), ae), i2 ? this.notifications = i2 : this.notifications = new me(this.store), t2 ? this.actions = t2 : (this.sdk = new cr(), this.actions = new Pe(this.store, this.sdk, this.notifications)), this.actions.setFrameworkInfo({ type: "js", sdkVersion: At().version }), this.initialTriggerOnSubscribe = false, w$2 && (window.__hms = this);
  }
  triggerOnSubscribe() {
    this.initialTriggerOnSubscribe || (s3.makeStoreTriggerOnSubscribe(this.store), this.initialTriggerOnSubscribe = true);
  }
  getStore() {
    return this.store;
  }
  getHMSActions() {
    return this.actions;
  }
  getActions() {
    return this.actions;
  }
  getNotifications() {
    return { onNotification: this.notifications.onNotification };
  }
  static createNewHMSStore(e2, t2) {
    let i2 = create(() => t2()), o2 = i2.setState;
    i2.setState = (n9) => {
      let l2 = typeof n9 == "function" ? fn(n9) : n9;
      o2(l2);
    };
    let r2 = i2.getState;
    i2.getState = (n9) => n9 ? n9(r2()) : r2(), s3.compareWithShallowCheckInSubscribe(i2);
    let a2 = s3.setUpDevtools(i2, e2);
    return K$1(h$1({}, i2), { namedSetState: a2 });
  }
  static makeStoreTriggerOnSubscribe(e2) {
    let t2 = e2.subscribe;
    e2.subscribe = (i2, o2, r2) => (i2(e2.getState(o2), void 0), t2(i2, o2, r2));
  }
  static compareWithShallowCheckInSubscribe(e2) {
    let t2 = e2.subscribe;
    e2.subscribe = (i2, o2, r2) => (o2 || (o2 = (a2) => a2), r2 = r2 || shallow, t2(i2, o2, r2));
  }
  static setUpDevtools(e2, t2) {
    let i2;
    try {
      i2 = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;
    } catch (a2) {
    }
    if (!i2)
      return (a2) => {
        e2.setState(a2);
      };
    let o2 = i2.connect(s3.devtoolsOptions(t2));
    o2.prefix = t2 ? `${t2} > ` : "";
    let r2 = e2.setState;
    return e2.setState = (a2) => {
      r2(a2), o2.send(`${o2.prefix}setState`, e2.getState());
    }, o2.subscribe(s3.devtoolsSubscribe(o2, e2, r2)), o2.send("setUpStore", e2.getState()), (a2, n9) => {
      r2(a2);
      let l2 = n9 || `${o2.prefix}action`;
      o2.send(l2, e2.getState());
    };
  }
  static devtoolsOptions(e2) {
    return { name: e2, actionsBlacklist: ["audioLevel", "playlistProgress", "connectionQuality"] };
  }
  static devtoolsSubscribe(e2, t2, i2) {
    return (o2) => {
      var r2, a2, n9, l2;
      if (o2.type === "DISPATCH" && o2.state)
        ["JUMP_TO_ACTION", "JUMP_TO_STATE"].includes(o2.payload.type) ? i2(JSON.parse(o2.state)) : t2.setState(JSON.parse(o2.state));
      else if (o2.type === "DISPATCH" && ((r2 = o2.payload) == null ? void 0 : r2.type) === "COMMIT")
        e2.init(t2.getState());
      else if (o2.type === "DISPATCH" && ((a2 = o2.payload) == null ? void 0 : a2.type) === "IMPORT_STATE") {
        let m2 = (n9 = o2.payload.nextLiftedState) == null ? void 0 : n9.actionsById;
        (((l2 = o2.payload.nextLiftedState) == null ? void 0 : l2.computedStates) || []).forEach(({ state: x2 }, H2) => {
          let q2 = m2[H2] || `${e2.prefix}setState`;
          H2 === 0 ? e2.init(x2) : (i2(x2), e2.send(q2, t2.getState()));
        });
      }
    };
  }
};
var re = class {
  constructor(e2, t2) {
    this.hmsStore = e2;
    this.sdk = t2;
    this.store = oe.createNewHMSStore(Te("HMSStatsStore"), ne), this.getState = this.store.getState, this.subscribe = this.store.subscribe, this.getPublishPeerConnection = () => new Promise((i2) => {
      var o2, r2;
      this.hmsStore.getState(E$1) === "Connected" ? i2((r2 = (o2 = this.sdk) == null ? void 0 : o2.getWebrtcInternals()) == null ? void 0 : r2.getPublishPeerConnection()) : this.hmsStore.subscribe((a2) => {
        var n9, l2;
        a2 === "Connected" && i2((l2 = (n9 = this.sdk) == null ? void 0 : n9.getWebrtcInternals()) == null ? void 0 : l2.getPublishPeerConnection());
      }, E$1);
    }), this.getSubscribePeerConnection = () => new Promise((i2) => {
      var o2, r2;
      this.hmsStore.getState(E$1) === "Connected" ? i2((r2 = (o2 = this.sdk) == null ? void 0 : o2.getWebrtcInternals()) == null ? void 0 : r2.getSubscribePeerConnection()) : this.hmsStore.subscribe((a2) => {
        var n9, l2;
        a2 === "Connected" && i2((l2 = (n9 = this.sdk) == null ? void 0 : n9.getWebrtcInternals()) == null ? void 0 : l2.getSubscribePeerConnection());
      }, E$1);
    }), this.sdk && vt(this.sdk, this.store, this.hmsStore);
  }
};
var Ns = (s4) => s4.localPeer.id, Ls = (s4) => s4.localPeer.audioTrack, xs = (s4) => s4.localPeer.videoTrack, Os = (s4, e2) => e2, Ct = (s4, e2) => e2, _s = (s4) => s4.remoteTrackStats, Nt = (s4) => s4.peerStats, we = (s4) => s4.localTrackStats, V = createSelector([Nt, Ns], (s4, e2) => s4[e2]);
createSelector(V, (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.subscribe) == null ? void 0 : e2.packetsLost;
});
createSelector(V, (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.subscribe) == null ? void 0 : e2.jitter;
});
createSelector(V, (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.publish) == null ? void 0 : e2.bitrate;
});
createSelector(V, (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.subscribe) == null ? void 0 : e2.bitrate;
});
createSelector(V, (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.publish) == null ? void 0 : e2.availableOutgoingBitrate;
});
createSelector(V, (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.subscribe) == null ? void 0 : e2.availableIncomingBitrate;
});
createSelector(V, (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.publish) == null ? void 0 : e2.bytesSent;
});
createSelector(V, (s4) => {
  var e2;
  return (e2 = s4 == null ? void 0 : s4.subscribe) == null ? void 0 : e2.bytesReceived;
});
createSelector([Nt, Os], (s4, e2) => e2 ? s4[e2] : void 0);
createSelector([_s, Ct], (s4, e2) => e2 ? s4[e2] : void 0);
var Ue = createSelector([we, Ct], (s4, e2) => e2 ? s4[e2] : void 0);
createSelector([we, Ls], (s4, e2) => {
  var t2;
  return e2 ? (t2 = s4[e2]) == null ? void 0 : t2[0] : void 0;
});
u$1(createSelector(Ue, (s4) => s4 == null ? void 0 : s4[0]));
createSelector([we, xs], (s4, e2) => {
  var t2;
  return e2 ? (t2 = s4[e2]) == null ? void 0 : t2[0] : void 0;
});
u$1(createSelector(Ue, (s4) => s4));
const r$1 = "It seems like you forgot to add your component within a top level HMSRoomProvider, please refer to 100ms react docs(https://docs.100ms.live/javascript/v2/features/integration#react-hooks) to check on the required steps for using this hook.";
const e = "undefined" != typeof window;
const d$1 = react.exports.createContext(null), l$2 = ({ children: e$1, actions: s4, store: n9, notifications: c2, stats: f2, isHMSStatsOn: u2 = false, leaveOnUnload: l2 = true }) => {
  const m2 = react.exports.useMemo(() => {
    let e2;
    const o2 = () => {
      throw new Error("modifying store is not allowed");
    };
    if (s4 && n9)
      e2 = { actions: s4, store: create$1(Object.assign(Object.assign({}, n9), { setState: o2, destroy: o2 })) }, c2 && (e2.notifications = c2), f2 && (e2.statsStore = create$1({ getState: f2.getState, subscribe: f2.subscribe, setState: o2, destroy: o2 }));
    else {
      const t2 = new oe();
      if (e2 = { actions: t2.getActions(), store: create$1(Object.assign(Object.assign({}, t2.getStore()), { setState: o2, destroy: o2 })), notifications: t2.getNotifications() }, u2) {
        const r2 = t2.getStats();
        e2.statsStore = create$1({ getState: r2.getState, subscribe: r2.subscribe, setState: o2, destroy: o2 });
      }
    }
    return e2.actions.setFrameworkInfo({ type: "react-web", version: React.version, sdkVersion: "0.8.10" }), e2;
  }, [s4, n9, c2, f2, u2]);
  return react.exports.useEffect(() => {
    if (e && l2) {
      const t2 = () => m2.actions.leave();
      return window.addEventListener("beforeunload", t2), () => {
        window.removeEventListener("beforeunload", t2);
      };
    }
    return () => {
    };
  }, [l2, m2]), React.createElement(d$1.Provider, { value: m2 }, e$1);
}, v = () => {
  const t2 = react.exports.useContext(d$1);
  if (!t2)
    throw new Error(r$1);
  return t2.actions;
};
var createRoot;
var m$1 = reactDom.exports;
{
  createRoot = m$1.createRoot;
  m$1.hydrateRoot;
}
var tailwindCompat = "";
var __uno = "";
var player = "";
var isBrowser$1 = typeof window !== "undefined" && typeof window.document !== "undefined";
var colorHex = {
  [1]: "font-weight: bold",
  [30]: "color: #000000",
  [31]: "color: #cc0000",
  [32]: "color: #4e9a06",
  [33]: "color: #c4a000",
  [34]: "color: #729fcf",
  [35]: "color: #75507b",
  [36]: "color: #06989a",
  [37]: "color: #d3d7cf",
  [90]: "color: #555753"
};
var currentLevel = 2;
function formatConsoleDate(date, level) {
  var hour = date.getHours();
  var minutes = date.getMinutes();
  var seconds = date.getSeconds();
  var milliseconds = date.getMilliseconds();
  const str = (hour < 10 ? "0" + hour : hour) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds) + "." + ("00" + milliseconds).slice(-3);
  if (isBrowser$1) {
    const ts2 = colorize(str, 90).concat(level);
    return [ts2[0] + " " + level[0], ts2[1], level[1]];
  }
  return colorize(str, 90).concat(level);
}
var createLogger = (lvl, level) => {
  return (...args) => {
    if (lvl < currentLevel) {
      return;
    }
    if (args.length === 1) {
      switch (typeof args[0]) {
        case "string":
          for (const line of args[0].split("\n")) {
            console.log(...formatConsoleDate(/* @__PURE__ */ new Date(), level).concat(line));
          }
          return;
        case "object":
          if (args[0] instanceof Error) {
            const error2 = args[0];
            const prettyErr = error2.name + ": " + error2.message.replace(new RegExp(`^${error2.name}[: ]*`), "") + "\n" + (error2.stack || "").split("\n").map((line) => line.trim()).map((line) => {
              if (line.startsWith(error2.name + ": " + error2.message))
                return null;
              if (line.startsWith("at")) {
                return "  " + line;
              }
              return line;
            }).filter(Boolean).join("\n");
            for (const line of prettyErr.split("\n")) {
              console.log(...formatConsoleDate(/* @__PURE__ */ new Date(), level).concat(line));
            }
            return;
          }
      }
    }
    console.log(...formatConsoleDate(/* @__PURE__ */ new Date(), level).concat(args));
  };
};
function colorize(s4, ...cc2) {
  if (isBrowser$1) {
    const attr = [];
    for (const c2 of cc2) {
      attr.push(colorHex[c2]);
    }
    return [`%c${s4}`, attr.join("; ")];
  }
  let out = "";
  for (const c2 of cc2) {
    out += `\x1B[${c2}m`;
  }
  out += `${s4}\x1B[0m`;
  return [out];
}
var trace = createLogger(0, colorize("TRC", 35));
createLogger(1, colorize("DBG", 33));
createLogger(2, colorize("LOG", 33));
createLogger(2, colorize("INF", 32));
var warn = createLogger(3, colorize("WRN", 36));
var error = createLogger(4, colorize("ERR", 31, 1));
var extendStatics = function(d2, b2) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (Object.prototype.hasOwnProperty.call(b3, p2))
        d3[p2] = b3[p2];
  };
  return extendStatics(d2, b2);
};
function __extends(d2, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n9) {
    return function(v2) {
      return step([n9, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e2) {
        op = [6, e2];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o2) {
  var s4 = typeof Symbol === "function" && Symbol.iterator, m2 = s4 && o2[s4], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o2, n9) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n9 === void 0 || n9-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error2) {
    e2 = { error: error2 };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
}
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from2.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i2);
        ar[i2] = from2[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}
function __await(v2) {
  return this instanceof __await ? (this.v = v2, this) : new __await(v2);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
  return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2;
  function verb(n9) {
    if (g2[n9])
      i2[n9] = function(v2) {
        return new Promise(function(a2, b2) {
          q2.push([n9, v2, a2, b2]) > 1 || resume(n9, v2);
        });
      };
  }
  function resume(n9, v2) {
    try {
      step(g2[n9](v2));
    } catch (e2) {
      settle(q2[0][3], e2);
    }
  }
  function step(r2) {
    r2.value instanceof __await ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v2) {
    if (f2(v2), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncValues(o2) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o2[Symbol.asyncIterator], i2;
  return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2);
  function verb(n9) {
    i2[n9] = o2[n9] && function(v2) {
      return new Promise(function(resolve, reject) {
        v2 = o2[n9](v2), settle(resolve, reject, v2.done, v2.value);
      });
    };
  }
  function settle(resolve, reject, d2, v2) {
    Promise.resolve(v2).then(function(v3) {
      resolve({ value: v3, done: d2 });
    }, reject);
  }
}
function isFunction(value) {
  return typeof value === "function";
}
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i2) {
      return i2 + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});
function arrRemove(arr, item) {
  if (arr) {
    var index2 = arr.indexOf(item);
    0 <= index2 && arr.splice(index2, 1);
  }
}
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                _a.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e2) {
          errors = e2 instanceof UnsubscriptionError ? e2.errors : [e2];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty = new Subscription2();
    empty.closed = true;
    return empty;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    var args = [];
    for (var _i2 = 2; _i2 < arguments.length; _i2++) {
      args[_i2 - 2] = arguments[_i2];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    {
      throw err;
    }
  });
}
function noop$1() {
}
var context = null;
function errorContext(cb2) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb2();
    if (isRoot) {
      var _a = context, errorThrown = _a.errorThrown, error2 = _a.error;
      context = null;
      if (errorThrown) {
        throw error2;
      }
    }
  } else {
    cb2();
  }
}
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error2, complete) {
    return new SafeSubscriber(next, error2, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped)
      ;
    else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped)
      ;
    else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped)
      ;
    else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn2, thisArg) {
  return _bind.call(fn2, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error2) {
        handleUnhandledError(error2);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error2) {
        handleUnhandledError(error2);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error2) {
        handleUnhandledError(error2);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error2, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error2 !== null && error2 !== void 0 ? error2 : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error2) {
  {
    reportUnhandledError(error2);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop$1,
  error: defaultErrorHandler,
  complete: noop$1
};
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
function identity(x2) {
  return x2;
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn2) {
      return fn2(prev);
    }, input);
  };
}
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error2, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error2, complete);
    errorContext(function() {
      var _a = _this, operator = _a.operator, source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      operations[_i2] = arguments[_i2];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x2) {
        return value = x2;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a;
      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});
function isScheduler(value) {
  return value && isFunction(value.schedule);
}
function last(arr) {
  return arr[arr.length - 1];
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}
function popNumber(args, defaultValue) {
  return typeof last(args) === "number" ? args.pop() : defaultValue;
}
var isArrayLike = function(x2) {
  return x2 && typeof x2.length === "number" && typeof x2 !== "function";
};
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}
function isInteropObservable(input) {
  return isFunction(input[observable]);
}
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          return [4, __await(reader.read())];
        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done)
            return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i2 = 0; i2 < array.length && !subscriber.closed; i2++) {
      subscriber.next(array[i2]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
          _a.call(iterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process$1(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process$1(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
            return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)))
            return [3, 8];
          return [4, _a.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2)
            throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}
function executeSchedule(parentSubscription, scheduler2, work, delay, repeat) {
  if (delay === void 0) {
    delay = 0;
  }
  if (repeat === void 0) {
    repeat = false;
  }
  var scheduleSubscription = scheduler2.schedule(function() {
    work();
    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);
  if (!repeat) {
    return scheduleSubscription;
  }
}
function observeOn(scheduler2, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler2, function() {
        return subscriber.next(value);
      }, delay);
    }, function() {
      return executeSchedule(subscriber, scheduler2, function() {
        return subscriber.complete();
      }, delay);
    }, function(err) {
      return executeSchedule(subscriber, scheduler2, function() {
        return subscriber.error(err);
      }, delay);
    }));
  });
}
function subscribeOn(scheduler2, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler2.schedule(function() {
      return source.subscribe(subscriber);
    }, delay));
  });
}
function scheduleObservable(input, scheduler2) {
  return innerFrom(input).pipe(subscribeOn(scheduler2), observeOn(scheduler2));
}
function schedulePromise(input, scheduler2) {
  return innerFrom(input).pipe(subscribeOn(scheduler2), observeOn(scheduler2));
}
function scheduleArray(input, scheduler2) {
  return new Observable(function(subscriber) {
    var i2 = 0;
    return scheduler2.schedule(function() {
      if (i2 === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i2++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}
function scheduleIterable(input, scheduler2) {
  return new Observable(function(subscriber) {
    var iterator$1;
    executeSchedule(subscriber, scheduler2, function() {
      iterator$1 = input[iterator]();
      executeSchedule(subscriber, scheduler2, function() {
        var _a;
        var value;
        var done;
        try {
          _a = iterator$1.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return();
    };
  });
}
function scheduleAsyncIterable(input, scheduler2) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler2, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler2, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}
function scheduleReadableStreamLike(input, scheduler2) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler2);
}
function scheduled(input, scheduler2) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler2);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler2);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler2);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler2);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler2);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler2);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function from(input, scheduler2) {
  return scheduler2 ? scheduled(input, scheduler2) : innerFrom(input);
}
function map(project, thisArg) {
  return operate(function(source, subscriber) {
    var index2 = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index2++));
    }));
  });
}
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
  var buffer = [];
  var active = 0;
  var index2 = 0;
  var isComplete = false;
  var checkComplete = function() {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };
  var outerNext = function(value) {
    return active < concurrent ? doInnerSub(value) : buffer.push(value);
  };
  var doInnerSub = function(value) {
    expand && subscriber.next(value);
    active++;
    var innerComplete = false;
    innerFrom(project(value, index2++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function() {
      innerComplete = true;
    }, void 0, function() {
      if (innerComplete) {
        try {
          active--;
          var _loop_1 = function() {
            var bufferedValue = buffer.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, function() {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };
          while (buffer.length && active < concurrent) {
            _loop_1();
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
    isComplete = true;
    checkComplete();
  }));
  return function() {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  if (isFunction(resultSelector)) {
    return mergeMap(function(a2, i2) {
      return map(function(b2, ii2) {
        return resultSelector(a2, b2, i2, ii2);
      })(innerFrom(project(a2, i2)));
    }, concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate(function(source, subscriber) {
    return mergeInternals(source, subscriber, project, concurrent);
  });
}
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  return mergeMap(identity, concurrent);
}
function merge() {
  var args = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    args[_i2] = arguments[_i2];
  }
  var scheduler2 = popScheduler(args);
  var concurrent = popNumber(args, Infinity);
  var sources = args;
  return !sources.length ? EMPTY : sources.length === 1 ? innerFrom(sources[0]) : mergeAll(concurrent)(from(sources, scheduler2));
}
function concatMap(project, resultSelector) {
  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
}
function groupBy(keySelector, elementOrOptions, duration, connector) {
  return operate(function(source, subscriber) {
    var element;
    if (!elementOrOptions || typeof elementOrOptions === "function") {
      element = elementOrOptions;
    } else {
      duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;
    }
    var groups = /* @__PURE__ */ new Map();
    var notify = function(cb2) {
      groups.forEach(cb2);
      cb2(subscriber);
    };
    var handleError = function(err) {
      return notify(function(consumer) {
        return consumer.error(err);
      });
    };
    var activeGroups = 0;
    var teardownAttempted = false;
    var groupBySourceSubscriber = new OperatorSubscriber(subscriber, function(value) {
      try {
        var key_1 = keySelector(value);
        var group_1 = groups.get(key_1);
        if (!group_1) {
          groups.set(key_1, group_1 = connector ? connector() : new Subject());
          var grouped = createGroupedObservable(key_1, group_1);
          subscriber.next(grouped);
          if (duration) {
            var durationSubscriber_1 = createOperatorSubscriber(group_1, function() {
              group_1.complete();
              durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
            }, void 0, void 0, function() {
              return groups.delete(key_1);
            });
            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
          }
        }
        group_1.next(element ? element(value) : value);
      } catch (err) {
        handleError(err);
      }
    }, function() {
      return notify(function(consumer) {
        return consumer.complete();
      });
    }, handleError, function() {
      return groups.clear();
    }, function() {
      teardownAttempted = true;
      return activeGroups === 0;
    });
    source.subscribe(groupBySourceSubscriber);
    function createGroupedObservable(key, groupSubject) {
      var result = new Observable(function(groupSubscriber) {
        activeGroups++;
        var innerSub = groupSubject.subscribe(groupSubscriber);
        return function() {
          innerSub.unsubscribe();
          --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();
        };
      });
      result.key = key;
      return result;
    }
  });
}
function takeUntil(notifier) {
  return operate(function(source, subscriber) {
    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function() {
      return subscriber.complete();
    }, noop$1));
    !subscriber.closed && source.subscribe(subscriber);
  });
}
var Attributes = class {
  constructor(attributesObs, donesObs, setAttributes) {
    this.setAttributes = setAttributes;
    this.attrs = /* @__PURE__ */ new Map();
    this.updates = /* @__PURE__ */ new Map();
    attributesObs.subscribe({
      next: ({ attribute, removed }) => {
        this.update(attribute, removed);
      }
    });
    donesObs.subscribe({
      next: (scopeIDs) => {
        this.next(scopeIDs);
      }
    });
  }
  attribute(scopeID, key) {
    let scopeMap = this.attrs.get(scopeID);
    if (!scopeMap) {
      scopeMap = /* @__PURE__ */ new Map();
      this.attrs.set(scopeID, scopeMap);
    }
    let attr = scopeMap.get(key);
    if (!attr) {
      attr = new Attribute(this.setAttributes, scopeID, key);
      scopeMap.set(key, attr);
    }
    return attr;
  }
  attributes(scopeID) {
    let scopeMap = this.attrs.get(scopeID);
    if (!scopeMap) {
      scopeMap = /* @__PURE__ */ new Map();
      this.attrs.set(scopeID, scopeMap);
    }
    return Array.from(scopeMap.values());
  }
  attributePeek(scopeID, key) {
    let scopeUpdateMap = this.updates.get(scopeID);
    if (scopeUpdateMap) {
      const updated = scopeUpdateMap.get(key);
      if (updated) {
        if (typeof updated === "boolean") {
          return;
        } else {
          if (!updated.val) {
            return;
          } else {
            const attr2 = new Attribute(this.setAttributes, scopeID, key);
            attr2._update(updated);
            return attr2;
          }
        }
      }
    }
    let scopeMap = this.attrs.get(scopeID);
    if (!scopeMap) {
      return;
    }
    let attr = scopeMap.get(key);
    if (!attr) {
      return;
    }
    if (attr.value === void 0) {
      return;
    }
    return attr;
  }
  nextAttributeValue(scopeID, key) {
    const attr = this.attributePeek(scopeID, key);
    if (!attr) {
      return;
    }
    return attr.value;
  }
  update(attr, removed) {
    var _a;
    let nodeID = attr.nodeID;
    if (!nodeID) {
      if (!((_a = attr.node) == null ? void 0 : _a.id)) {
        error(`new attribute without node ID`);
        return;
      }
      nodeID = attr.node.id;
    }
    let scopeMap = this.updates.get(nodeID);
    if (!scopeMap) {
      scopeMap = /* @__PURE__ */ new Map();
      this.updates.set(nodeID, scopeMap);
    }
    if (removed) {
      scopeMap.set(attr.key, true);
    } else {
      let key = attr.key;
      if (attr.index !== void 0 && attr.index !== null) {
        key = `${key}[${attr.index}]`;
      }
      scopeMap.set(key, attr);
    }
  }
  scopeWasUpdated(scopeID) {
    if (!scopeID) {
      return false;
    }
    return this.updates.has(scopeID);
  }
  next(scopeIDs) {
    for (const [scopeID, attrs] of this.updates) {
      if (!scopeIDs.includes(scopeID)) {
        continue;
      }
      let scopeMap = this.attrs.get(scopeID);
      if (!scopeMap) {
        scopeMap = /* @__PURE__ */ new Map();
        this.attrs.set(scopeID, scopeMap);
      }
      for (const [key, attrOrDel] of attrs) {
        if (typeof attrOrDel === "boolean") {
          let attr = scopeMap.get(key);
          if (attr) {
            attr._update(void 0);
          }
        } else {
          let attr = scopeMap.get(attrOrDel.key);
          if (!attr) {
            attr = new Attribute(this.setAttributes, scopeID, attrOrDel.key);
            scopeMap.set(attrOrDel.key, attr);
          }
          attr._update(attrOrDel);
        }
      }
    }
    for (const scopeID of scopeIDs) {
      this.updates.delete(scopeID);
    }
  }
};
var Attribute = class {
  constructor(setAttributes, scopeID, key) {
    this.setAttributes = setAttributes;
    this.scopeID = scopeID;
    this.key = key;
    this.val = new BehaviorSubject(void 0);
  }
  get id() {
    var _a;
    return (_a = this.attr) == null ? void 0 : _a.id;
  }
  get createdAt() {
    return this.attr ? new Date(this.attr.createdAt) : null;
  }
  get obs() {
    return this.val;
  }
  get value() {
    return this.val.getValue();
  }
  get nodeID() {
    return this.scopeID;
  }
  get items() {
    if (!this.attrs) {
      return null;
    }
    return this.attrs;
  }
  set(value, ao) {
    const attrProps = this._prepSet(value, ao);
    if (!attrProps) {
      return;
    }
    this.setAttributes([attrProps]);
    trace(`SET ${this.key} = ${value} (${this.scopeID})`);
  }
  _prepSet(value, ao, item) {
    var _a;
    if ((ao == null ? void 0 : ao.append) !== void 0 && ao.index !== void 0) {
      error(`cannot set both append and index`);
      throw new Error(`cannot set both append and index`);
    }
    const serVal = JSON.stringify(value);
    if (!item && ((ao == null ? void 0 : ao.index) !== void 0 || (ao == null ? void 0 : ao.append))) {
      let index2 = ao.index || 0;
      if (ao == null ? void 0 : ao.append) {
        index2 = ((_a = this.attrs) == null ? void 0 : _a.length) || 0;
      }
      if (!this.attrs) {
        this.attrs = [];
      }
      if (!this.attrs[index2]) {
        this.attrs[index2] = new Attribute(
          this.setAttributes,
          this.scopeID,
          this.key
        );
      } else {
        const existing = this.attrs[index2];
        if (existing && existing.serVal === serVal) {
          return;
        }
      }
      this.attrs[index2]._prepSet(value, ao, true);
      const v2 = this._recalcVectorVal();
      this.val.next(v2);
    } else {
      if (this.serVal === serVal) {
        return;
      }
      this.val.next(value);
    }
    this.serVal = serVal;
    const attrProps = {
      key: this.key,
      nodeID: this.scopeID,
      val: serVal
    };
    if (ao) {
      attrProps.private = ao.private;
      attrProps.protected = ao.protected;
      attrProps.immutable = ao.immutable;
      attrProps.append = ao.append;
      attrProps.index = ao.index;
    }
    return attrProps;
  }
  _recalcVectorVal() {
    return this.attrs.map(
      (a2) => !a2 || a2.val == void 0 ? null : a2.value || null
    );
  }
  _update(attr, item) {
    var _a;
    if (attr && this.attr && this.attr.id === attr.id) {
      return;
    }
    if (attr && attr.vector && !item) {
      if (attr.index === void 0) {
        error(`vector attribute missing index`);
        return;
      }
      if (this.attrs == void 0) {
        this.attrs = [];
      }
      while (this.attrs.length < attr.index + 1) {
        const newAttr2 = new Attribute(
          this.setAttributes,
          this.scopeID,
          this.key
        );
        this.attrs.push(newAttr2);
      }
      const newAttr = new Attribute(this.setAttributes, this.scopeID, this.key);
      newAttr._update(attr, true);
      this.attrs[attr.index] = newAttr;
      const value2 = this._recalcVectorVal();
      this.val.next(value2);
      return;
    }
    this.attr = attr;
    let value = void 0;
    if ((_a = this.attr) == null ? void 0 : _a.val) {
      value = JSON.parse(this.attr.val);
    }
    this.val.next(value);
  }
};
var Scopes = class {
  constructor(scopesObs, donesObs, ctx, kinds2, attributes) {
    this.ctx = ctx;
    this.kinds = kinds2;
    this.attributes = attributes;
    this.scopes = /* @__PURE__ */ new Map();
    this.newScopes = /* @__PURE__ */ new Map();
    this.scopesByKind = /* @__PURE__ */ new Map();
    this.kindUpdated = /* @__PURE__ */ new Set();
    scopesObs.subscribe({
      next: ({ scope, removed }) => {
        this.update(scope, removed);
      }
    });
    donesObs.subscribe({
      next: (scopeIDs) => {
        this.next(scopeIDs);
      }
    });
  }
  scope(id2) {
    var _a;
    return (_a = this.scopes.get(id2)) == null ? void 0 : _a.getValue();
  }
  scopeObs(id2) {
    return this.scopes.get(id2);
  }
  byKind(kind) {
    let map2 = this.scopesByKind.get(kind);
    if (!map2) {
      map2 = /* @__PURE__ */ new Map();
      this.scopesByKind.set(kind, map2);
    }
    return map2;
  }
  kindWasUpdated(kind) {
    return this.kindUpdated.has(kind);
  }
  next(scopeIDs) {
    this.kindUpdated.clear();
    for (const [_2, scopeSubject] of this.scopes) {
      const scope = scopeSubject.getValue();
      if ((scope._updated || this.attributes.scopeWasUpdated(scope.id)) && scopeIDs.includes(scope.id)) {
        scope._updated = false;
        scopeSubject.next(scope);
      }
    }
  }
  update(scope, removed) {
    var _a;
    const existing = (_a = this.scopes.get(scope.id)) == null ? void 0 : _a.getValue();
    if (removed) {
      if (!existing) {
        warn("scopes: missing scope on removal", scope.id, scope.kind);
        return;
      }
      existing._deleted = true;
      existing._updated = true;
      this.scopes.delete(scope.id);
      if (!scope.kind) {
        warn("scopes: scope missing kind on scope on removal");
        return;
      }
      const kind2 = scope.kind;
      this.scopesByKind.get(kind2).delete(scope.id);
      this.kindUpdated.add(kind2);
      return;
    }
    if (existing) {
      existing._deleted = false;
      return;
    }
    if (!scope.kind) {
      warn("scopes: scope missing kind on scope");
      return;
    }
    const kind = scope.kind;
    const scopeClass = this.kinds[kind];
    if (!scopeClass) {
      warn(`scopes: unknown scope kind: ${scope.kind}`);
      return;
    }
    const obj = this.create(scopeClass, scope);
    const subj = new BehaviorSubject(obj);
    this.scopes.set(scope.id, subj);
    this.newScopes.set(scope.id, true);
    let skm = this.scopesByKind.get(kind);
    if (!skm) {
      skm = /* @__PURE__ */ new Map();
      this.scopesByKind.set(kind, skm);
    }
    skm.set(scope.id, obj);
    obj._updated = true;
    this.kindUpdated.add(kind);
  }
  create(scopeClass, scope) {
    return new scopeClass(this.ctx, scope, this.attributes);
  }
};
var Scope = class {
  constructor(ctx, scope, attributes) {
    this.ctx = ctx;
    this.scope = scope;
    this.attributes = attributes;
    this._deleted = false;
    this._updated = false;
  }
  get id() {
    return this.scope.id;
  }
  get kind() {
    return this.scope.kind;
  }
  get(key) {
    return this.attributes.attribute(this.scope.id, key).value;
  }
  getAttribute(key) {
    return this.attributes.attribute(this.scope.id, key);
  }
  obs(key) {
    return this.attributes.attribute(this.scope.id, key).obs;
  }
  set(keyOrAttributes, value, ao) {
    if (typeof keyOrAttributes === "string") {
      if (value === void 0) {
        value = null;
      }
      return this.attributes.attribute(this.scope.id, keyOrAttributes).set(value, ao);
    }
    const nextProps = [];
    for (const attr of keyOrAttributes) {
      const at2 = this.attributes.attribute(this.scope.id, attr.key)._prepSet(attr.value, attr.ao);
      if (!at2) {
        continue;
      }
      nextProps.push(at2);
    }
    if (nextProps.length === 0) {
      return;
    }
    this.attributes.setAttributes(nextProps);
  }
  append(key, value, ao) {
    if (!ao) {
      ao = {};
    }
    ao.append = true;
    return this.attributes.attribute(this.scope.id, key).set(value, ao);
  }
  inspect() {
    const attrs = this.attributes.attributes(this.scope.id);
    const out = {};
    for (const attr of attrs) {
      out[attr.key] = attr.value;
    }
    return out;
  }
  hasUpdated() {
    return this._updated || this.attributes.scopeWasUpdated(this.id);
  }
};
var Scopes2 = class extends Scopes {
  constructor(scopesObs, donesObs, ctx, kinds2, attributes, steps) {
    super(scopesObs, donesObs, ctx, kinds2, attributes);
    this.steps = steps;
  }
  create(scopeClass, scope) {
    return new scopeClass(
      this.ctx,
      scope,
      this,
      this.attributes,
      this.steps
    );
  }
};
var Scope2 = class extends Scope {
  constructor(ctx, scope, scopes, attributes, steps) {
    super(ctx, scope, attributes);
    this.scopes = scopes;
    this.steps = steps;
  }
  scopeByKey(key) {
    const id2 = this.get(key);
    if (!id2 || typeof id2 !== "string") {
      return;
    }
    return this.scopes.scope(id2);
  }
  ticker(id2) {
    return this.steps.step(id2);
  }
  tickerByKey(key) {
    const id2 = this.get(key);
    if (!id2 || typeof id2 !== "string") {
      return;
    }
    return this.ticker(id2);
  }
};
function pnow() {
  {
    return performance.now();
  }
}
function timeout(callback, ms) {
  {
    setTimeout(callback, ms);
  }
}
var Step = class {
  constructor(step, ticker) {
    this.running = false;
    this.ticker = new BehaviorSubject(void 0);
    this.startAt = 0;
    this.endAt = 0;
    ticker.pipe(map(this.recalc.bind(this))).subscribe({
      next: (val) => {
        this.ticker.next(val);
      }
    });
    this._update(step);
  }
  recalc(t2) {
    if (!this.running) {
      return void 0;
    }
    return {
      started: t2 >= this.startAt,
      ended: t2 >= this.endAt,
      elapsed: Math.round(t2 - this.startAt),
      remaining: Math.round(this.endAt - t2),
      duration: this.endAt - this.startAt
    };
  }
  obs() {
    return this.ticker;
  }
  get current() {
    return this.recalc(pnow());
  }
  _update(step) {
    if (!step.running) {
      this.running = false;
      this.ticker.next(void 0);
      return;
    }
    if (step.elapsed === null || step.remaining === null || step.elapsed === void 0 || step.remaining === void 0) {
      this.running = false;
      return;
    }
    const now = pnow();
    this.startAt = now - step.elapsed * 1e3;
    this.endAt = now + step.remaining * 1e3;
    this.running = step.elapsed >= 0 && step.remaining >= 0;
    this.ticker.next(this.recalc(now));
  }
  _stop() {
    this.running = false;
    this.ticker.next(void 0);
  }
};
var Steps$1 = class {
  constructor(stepsObs, donesObs) {
    this.steps = /* @__PURE__ */ new Map();
    this.updates = /* @__PURE__ */ new Map();
    this._hadUpdates = false;
    stepsObs.subscribe({
      next: ({ step, removed }) => {
        this.update(step, removed);
      }
    });
    donesObs.subscribe({
      next: () => {
        this.next();
      }
    });
    this.ticker = new BehaviorSubject(Math.floor(pnow()));
    const controller = new AbortController();
    timerInterval(1e3, controller.signal, (t2) => {
      this.ticker.next(t2);
    });
  }
  step(stepID) {
    return this.steps.get(stepID);
  }
  hadUpdates() {
    const hadUpdates = this._hadUpdates;
    this._hadUpdates = false;
    return hadUpdates;
  }
  update(step, removed) {
    if (removed) {
      this.updates.set(step.id, true);
    } else {
      this.updates.set(step.id, step);
    }
    this._hadUpdates = true;
  }
  next() {
    for (const [id2, stepOrDel] of this.updates) {
      let step = this.steps.get(id2);
      if (typeof stepOrDel === "boolean") {
        if (step) {
          step._stop();
          this.steps.delete(id2);
        }
      } else {
        if (!step) {
          step = new Step(stepOrDel, this.ticker);
          this.steps.set(id2, step);
        }
        step._update(stepOrDel);
      }
    }
    this.updates.clear();
  }
};
var root$1 = typeof self === "object" && self.self == self ? self : typeof global === "object" && global.global == global ? global : {};
if (!root$1["requestAnimationFrame"]) {
  root$1["requestAnimationFrame"] = (cb2) => cb2(pnow());
}
function timerInterval(ms = 1e3, signal, callback) {
  const start = Math.floor(pnow() / 1e3) * 1e3;
  function frame(time) {
    if (signal.aborted)
      return;
    callback(time);
    scheduleFrame(time);
  }
  function scheduleFrame(time) {
    const elapsed = time - start;
    const roundedElapsed = Math.round(elapsed / ms) * ms;
    const targetNext = start + roundedElapsed + ms;
    const delay = targetNext - pnow();
    timeout(() => requestAnimationFrame(frame), delay);
  }
  scheduleFrame(start);
}
var Globals = class {
  constructor(globals) {
    this.attrs = /* @__PURE__ */ new Map();
    this.updates = /* @__PURE__ */ new Map();
    this.self = new BehaviorSubject(void 0);
    globals.subscribe({
      next: ({ attribute, done }) => {
        if (attribute) {
          let val = void 0;
          if (attribute.val) {
            val = JSON.parse(attribute.val);
          }
          this.updates.set(attribute.key, val);
        }
        if (done) {
          for (const [key, val] of this.updates) {
            this.obs(key).next(val);
          }
          this.updates.clear();
          if (this.self) {
            this.self.next(this);
          }
        }
      }
    });
  }
  get(key) {
    const o2 = this.attrs.get(key);
    if (o2) {
      return o2.getValue();
    }
    return void 0;
  }
  obs(key) {
    let o2 = this.attrs.get(key);
    if (!o2) {
      o2 = new BehaviorSubject(void 0);
      this.attrs.set(key, o2);
    }
    return o2;
  }
};
var endedStatuses = ["ended", "terminated", "failed"];
var Game$1 = class extends Scope2 {
  get hasEnded() {
    return endedStatuses.includes(this.get("status"));
  }
  get stage() {
    return this.scopeByKey("stageID");
  }
  get round() {
    var _a;
    return (_a = this.stage) == null ? void 0 : _a.round;
  }
};
var Player = class extends Scope2 {
  get game() {
    const { game } = this.ctx;
    if (!game) {
      return;
    }
    const key = `playerGameID-${game.id}`;
    return this.scopeByKey(key);
  }
  get round() {
    const { stage } = this.ctx;
    if (!stage) {
      return;
    }
    const { round } = stage;
    if (!round) {
      return;
    }
    const key = `playerRoundID-${round.id}`;
    return this.scopeByKey(key);
  }
  get stage() {
    const { stage } = this.ctx;
    if (!stage) {
      return;
    }
    const key = `playerStageID-${stage.id}`;
    return this.scopeByKey(key);
  }
  hasUpdated() {
    var _a, _b, _c;
    if (super.hasUpdated()) {
      return true;
    }
    return Boolean(
      ((_a = this.round) == null ? void 0 : _a.hasUpdated()) || ((_b = this.stage) == null ? void 0 : _b.hasUpdated()) || ((_c = this.game) == null ? void 0 : _c.hasUpdated())
    );
  }
};
var PlayerGame = class extends Scope2 {
};
var PlayerRound = class extends Scope2 {
};
var PlayerStage = class extends Scope2 {
};
var Round = class extends Scope2 {
};
var Stage$1 = class extends Scope2 {
  get round() {
    return this.scopeByKey("roundID");
  }
  get timer() {
    return this.tickerByKey("timerID");
  }
};
var Context = class {
};
var kinds = {
  game: Game$1,
  player: Player,
  playerGame: PlayerGame,
  playerRound: PlayerRound,
  playerStage: PlayerStage,
  round: Round,
  stage: Stage$1
};
function EmpiricaClassic(participantID, provider) {
  const attributesDones = new Subject();
  const scopesDones = new Subject();
  const ctx = new Context();
  const attributes = new Attributes(
    provider.attributes,
    attributesDones,
    provider.setAttributes
  );
  const steps = new Steps$1(
    provider.steps,
    provider.dones
  );
  const scopes = new Scopes2(
    provider.scopes,
    scopesDones,
    ctx,
    kinds,
    attributes,
    steps
  );
  const participantIDs = /* @__PURE__ */ new Set();
  const glob = new Globals(provider.globals);
  const ret = {
    game: new BehaviorSubject(void 0),
    player: new BehaviorSubject(void 0),
    players: new BehaviorSubject(void 0),
    round: new BehaviorSubject(void 0),
    stage: new BehaviorSubject(void 0),
    globals: glob.self
  };
  provider.participants.subscribe({
    next: ({ participant, removed }) => {
      if (removed) {
        if (participantIDs.has(participant.id)) {
          participantIDs.delete(participant.id);
        }
      } else {
        if (!participantIDs.has(participant.id)) {
          participantIDs.add(participant.id);
        }
      }
    }
  });
  let scopesUpdated = /* @__PURE__ */ new Set();
  provider.attributes.subscribe({
    next: (attr) => {
      var _a;
      const nodeID = ((_a = attr.attribute.node) == null ? void 0 : _a.id) || attr.attribute.nodeID;
      if (!nodeID) {
        return;
      }
      scopesUpdated.add(nodeID);
    }
  });
  provider.dones.subscribe({
    next: () => {
      var _a, _b, _c;
      const current = getCurrent(ret);
      const updated = getMainObjects(participantID, scopes, attributes);
      ctx.game = updated.game;
      ctx.stage = updated.stage;
      if (scopeChanged(current.game, updated.game)) {
        ret.game.next(updated.game);
      }
      if (scopeChanged(current.player, updated.player)) {
        ret.player.next(updated.player);
      }
      if (scopeChanged(current.round, updated.round)) {
        ret.round.next(updated.round);
      }
      if (scopeChanged(current.stage, updated.stage) || steps.hadUpdates()) {
        ret.stage.next(updated.stage);
      }
      let playersChanged = false;
      const players = [];
      for (let i2 = 0; i2 < (updated.players || []).length; i2++) {
        let p2 = updated.players[i2];
        if (p2) {
          const partID = attributes.nextAttributeValue(
            p2.id,
            "participantID"
          );
          if (!participantIDs.has(partID)) {
            p2 = void 0;
          }
        }
        if (!playersChanged && scopeChanged(p2, (current.players || [])[i2])) {
          playersChanged = true;
        }
        if (!playersChanged && scopeChanged(p2 == null ? void 0 : p2.stage, (_a = (current.players || [])[i2]) == null ? void 0 : _a.stage)) {
          playersChanged = true;
        }
        if (!playersChanged && scopeChanged(p2 == null ? void 0 : p2.round, (_b = (current.players || [])[i2]) == null ? void 0 : _b.round)) {
          playersChanged = true;
        }
        if (!playersChanged && scopeChanged(p2 == null ? void 0 : p2.game, (_c = (current.players || [])[i2]) == null ? void 0 : _c.game)) {
          playersChanged = true;
        }
        if (p2) {
          players.push(p2);
        }
      }
      if (playersChanged) {
        ret.players.next(players);
      }
      const scopeIDs = Array.from(scopesUpdated);
      scopesDones.next(scopeIDs);
      attributesDones.next(scopeIDs);
      scopesUpdated.clear();
    }
  });
  return ret;
}
function scopeChanged(current, updated) {
  if (!current && !updated) {
    if (current === void 0 && updated === null) {
      return true;
    }
    return false;
  }
  if (!current || !updated) {
    return true;
  }
  return current.id !== updated.id || updated.hasUpdated();
}
function getCurrent(ctx) {
  return {
    game: ctx.game.getValue(),
    player: ctx.player.getValue(),
    round: ctx.round.getValue(),
    stage: ctx.stage.getValue(),
    players: ctx.players.getValue()
  };
}
function getMainObjects(participantID, scopes, attributes) {
  const players = Array.from(scopes.byKind("player").values());
  players.sort();
  const res = {
    players,
    game: null,
    player: null,
    round: null,
    stage: null
  };
  if (players.length === 0) {
    return res;
  }
  res.player = players.find((p2) => {
    const pID = attributes.nextAttributeValue(p2.id, "participantID");
    return pID === participantID;
  });
  if (!res.player) {
    return res;
  }
  res.game = nextScopeByKey(scopes, attributes, res.player, "gameID");
  if (!res.game) {
    return res;
  }
  for (const player2 of players || []) {
    const key = `playerGameID-${res.game.id}`;
    if (!nextScopeByKey(scopes, attributes, player2, key)) {
      return res;
    }
  }
  res.stage = nextScopeByKey(scopes, attributes, res.game, "stageID");
  if (!res.stage) {
    return res;
  }
  for (const player2 of players || []) {
    const key = `playerStageID-${res.stage.id}`;
    if (!nextScopeByKey(scopes, attributes, player2, key)) {
      delete res.stage;
      return res;
    }
  }
  res.round = nextScopeByKey(scopes, attributes, res.stage, "roundID");
  if (!res.round) {
    return res;
  }
  for (const player2 of players || []) {
    const key = `playerRoundID-${res.round.id}`;
    if (!nextScopeByKey(scopes, attributes, player2, key)) {
      delete res.stage;
      delete res.round;
      return res;
    }
  }
  return res;
}
function nextScopeByKey(scopes, attributes, scope, key) {
  const id2 = attributes.nextAttributeValue(scope.id, key);
  if (!id2 || typeof id2 !== "string") {
    return null;
  }
  return scopes.scope(id2) || null;
}
var TajribaProvider = class {
  constructor(changes, globals, setAttributes) {
    this.globals = globals;
    this.setAttributes = setAttributes;
    this.scopes = new Subject();
    this.attributes = new Subject();
    this.participants = new Subject();
    this.steps = new Subject();
    this.dones = new Subject();
    let scopeIDs = [];
    changes.pipe(groupBy((chg) => {
      var _a;
      return (_a = chg == null ? void 0 : chg.change) == null ? void 0 : _a.__typename;
    })).subscribe({
      next: (group) => {
        switch (group.key) {
          case "ScopeChange":
            group.subscribe({
              next: (msg) => {
                if (!msg.change || msg.removed === null || msg.removed === void 0) {
                  trace("AttributeChange empty");
                } else {
                  this.scopes.next({
                    scope: msg.change,
                    removed: msg.removed
                  });
                }
                if (msg.done) {
                  this.dones.next(scopeIDs);
                }
              }
            });
            break;
          case "AttributeChange":
            group.subscribe({
              next: (msg) => {
                if (!msg.change || msg.removed === null || msg.removed === void 0) {
                  trace("AttributeChange empty");
                } else {
                  const atChange = msg.change;
                  scopeIDs.push(atChange.nodeID || atChange.node.id);
                  this.attributes.next({
                    attribute: atChange,
                    removed: msg.removed
                  });
                }
                if (msg.done) {
                  this.dones.next(scopeIDs);
                  scopeIDs = [];
                }
              }
            });
            break;
          case "ParticipantChange":
            group.subscribe({
              next: (msg) => {
                if (!msg.change || msg.removed === null || msg.removed === void 0) {
                  trace("ParticipantChange empty");
                } else {
                  this.participants.next({
                    participant: msg.change,
                    removed: msg.removed
                  });
                }
                if (msg.done) {
                  this.dones.next([]);
                }
              }
            });
            break;
          case "StepChange":
            group.subscribe({
              next: (msg) => {
                if (!msg.change || msg.removed === null || msg.removed === void 0) {
                  trace("StepChange empty");
                } else {
                  this.steps.next({
                    step: msg.change,
                    removed: msg.removed
                  });
                }
                if (msg.done) {
                  this.dones.next([]);
                }
              }
            });
            break;
          default:
            group.subscribe({
              next: (change) => {
                if (change.done) {
                  this.dones.next([]);
                }
              }
            });
            break;
        }
      }
    });
  }
};
var isDevelopment = false;
var createNewParticipant = (key = "participantKey") => {
  var _a;
  const url = new URL(document.location.href);
  url.searchParams.set(key, (/* @__PURE__ */ new Date()).getTime().toString());
  (_a = window.open(url.href, "_blank")) == null ? void 0 : _a.focus();
};
var util;
(function(util2) {
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
    const filtered = {};
    for (const k2 of validKeys) {
      filtered[k2] = obj[k2];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e2) {
      return obj[e2];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
})(util || (util = {}));
const ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
const getParsedType = (data) => {
  const t2 = typeof data;
  switch (t2) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
const ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of"
]);
const quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error2) => {
      for (const issue of error2.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i2 = 0;
          while (i2 < issue.path.length) {
            const el2 = issue.path[i2];
            const terminal = i2 === issue.path.length - 1;
            if (!terminal) {
              curr[el2] = curr[el2] || { _errors: [] };
            } else {
              curr[el2] = curr[el2] || { _errors: [] };
              curr[el2]._errors.push(mapper(issue));
            }
            curr = curr[el2];
            i2++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, null, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
}
ZodError.create = (issues) => {
  const error2 = new ZodError(issues);
  return error2;
};
const defaultErrorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (issue.validation !== "regex")
        message = `Invalid ${issue.validation}`;
      else
        message = "Invalid";
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
let overrideErrorMap = defaultErrorMap;
const setErrorMap = (map2) => {
  overrideErrorMap = map2;
};
const makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  let errorMessage = "";
  const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
  for (const map2 of maps) {
    errorMessage = map2(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: issueData.message || errorMessage
  };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideErrorMap,
      defaultErrorMap
    ].filter((x2) => !!x2)
  });
  ctx.common.issues.push(issue);
}
class ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s4 of results) {
      if (s4.status === "aborted")
        return INVALID;
      if (s4.status === "dirty")
        status.dirty();
      arrayValue.push(s4.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      syncPairs.push({
        key: await pair.key,
        value: await pair.value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (typeof value.value !== "undefined" || pair.alwaysSet) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
}
const INVALID = Object.freeze({
  status: "aborted"
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x2) => x2.status === "aborted";
const isDirty = (x2) => x2.status === "dirty";
const isValid = (x2) => x2.status === "valid";
const isAsync = (x2) => typeof Promise !== void 0 && x2 instanceof Promise;
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
class ParseInputLazyPath {
  constructor(parent, value, path, key) {
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    return this._path.concat(this._key);
  }
}
const handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    const error2 = new ZodError(ctx.common.issues);
    return { success: false, error: error2 };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap, invalid_type_error, required_error, description } = params;
  if (errorMap && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid" or "required" in conjunction with custom error map.`);
  }
  if (errorMap)
    return { errorMap, description };
  const customMap = (iss, ctx) => {
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    if (typeof ctx.data === "undefined" && required_error)
      return { message: required_error };
    if (params.invalid_type_error)
      return { message: params.invalid_type_error };
    return { message: ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
class ZodType {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this.superRefine = this._refinement;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.default = this.default.bind(this);
    this.describe = this.describe.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: [], parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  optional() {
    return ZodOptional.create(this);
  }
  nullable() {
    return ZodNullable.create(this);
  }
  nullish() {
    return this.optional().nullable();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this);
  }
  or(option) {
    return ZodUnion.create([this, option]);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming);
  }
  transform(transform) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
class ZodString extends ZodType {
  constructor() {
    super(...arguments);
    this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
    this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
    this.trim = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(
        ctx2,
        {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        }
      );
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this.min(len, message).max(len, message);
  }
  get isEmail() {
    return !!this._def.checks.find((ch2) => ch2.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch2) => ch2.kind === "url");
  }
  get isUUID() {
    return !!this._def.checks.find((ch2) => ch2.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch2) => ch2.kind === "cuid");
  }
  get minLength() {
    let min = -Infinity;
    this._def.checks.map((ch2) => {
      if (ch2.kind === "min") {
        if (min === null || ch2.value > min) {
          min = ch2.value;
        }
      }
    });
    return min;
  }
  get maxLength() {
    let max = null;
    this._def.checks.map((ch2) => {
      if (ch2.kind === "max") {
        if (max === null || ch2.value < max) {
          max = ch2.value;
        }
      }
    });
    return max;
  }
}
ZodString.create = (params) => {
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "min") {
        if (min === null || ch2.value > min)
          min = ch2.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "max") {
        if (max === null || ch2.value < max)
          max = ch2.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch2) => ch2.kind === "int");
  }
}
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    ...processCreateParams(params)
  });
};
class ZodBigInt extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodBigInt.create = (params) => {
  return new ZodBigInt({
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    ...processCreateParams(params)
  });
};
class ZodBoolean extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    ...processCreateParams(params)
  });
};
class ZodDate extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    return {
      status: "valid",
      value: new Date(input.data.getTime())
    };
  }
}
ZodDate.create = (params) => {
  return new ZodDate({
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
class ZodUndefined extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
class ZodNull extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
class ZodAny extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
class ZodUnknown extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
class ZodNever extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
}
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
class ZodVoid extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
class ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all(ctx.data.map((item, i2) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = ctx.data.map((item, i2) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return this.min(len, message).max(len, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
    };
  };
})(objectUtil || (objectUtil = {}));
const AugmentFactory = (def) => (augmentation) => {
  return new ZodObject({
    ...def,
    shape: () => ({
      ...def.shape(),
      ...augmentation
    })
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return ZodArray.create(deepPartialify(schema.element));
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
class ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = AugmentFactory(this._def);
    this.extend = AugmentFactory(this._def);
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    for (const key in ctx.data) {
      if (!shapeKeys.includes(key)) {
        extraKeys.push(key);
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          syncPairs.push({
            key,
            value: await pair.value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a, _b, _c, _d;
          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  catchall(index2) {
    return new ZodObject({
      ...this._def,
      catchall: index2
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).map((key) => {
      if (this.shape[key])
        shape[key] = this.shape[key];
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).map((key) => {
      if (util.objectKeys(mask).indexOf(key) === -1) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    if (mask) {
      util.objectKeys(this.shape).map((key) => {
        if (util.objectKeys(mask).indexOf(key) === -1) {
          newShape[key] = this.shape[key];
        } else {
          newShape[key] = this.shape[key].optional();
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    } else {
      for (const key in this.shape) {
        const fieldSchema = this.shape[key];
        newShape[key] = fieldSchema.optional();
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required() {
    const newShape = {};
    for (const key in this.shape) {
      const fieldSchema = this.shape[key];
      let newField = fieldSchema;
      while (newField instanceof ZodOptional) {
        newField = newField._def.innerType;
      }
      newShape[key] = newField;
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
}
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
class ZodUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
}
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
class ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.options.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: this.validDiscriminatorValues,
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get validDiscriminatorValues() {
    return Array.from(this.options.keys());
  }
  get options() {
    return this._def.options;
  }
  static create(discriminator, types, params) {
    const options = /* @__PURE__ */ new Map();
    try {
      types.forEach((type) => {
        const discriminatorValue = type.shape[discriminator].value;
        options.set(discriminatorValue, type);
      });
    } catch (e2) {
      throw new Error("The discriminator value could not be extracted from all the provided schemas");
    }
    if (options.size !== types.length) {
      throw new Error("Some of the discriminator values are not unique");
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      ...processCreateParams(params)
    });
  }
}
function mergeValues(a2, b2) {
  const aType = getParsedType(a2);
  const bType = getParsedType(b2);
  if (a2 === b2) {
    return { valid: true, data: a2 };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b2);
    const sharedKeys = util.objectKeys(a2).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a2, ...b2 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a2[key], b2[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a2.length !== b2.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index2 = 0; index2 < a2.length; index2++) {
      const itemA = a2[index2];
      const itemB = b2[index2];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a2 === +b2) {
    return { valid: true, data: a2 };
  } else {
    return { valid: false };
  }
}
class ZodIntersection extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
}
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
class ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        type: "array"
      });
      status.dirty();
    }
    const items = ctx.data.map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x2) => !!x2);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
}
ZodTuple.create = (schemas, params) => {
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
class ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
}
class ZodMap extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index2) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index2, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index2, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
}
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
class ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
class ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error2) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          overrideErrorMap,
          defaultErrorMap
        ].filter((x2) => !!x2),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error2
        }
      });
    }
    function makeReturnsIssue(returns, error2) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          overrideErrorMap,
          defaultErrorMap
        ].filter((x2) => !!x2),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error2
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn2 = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      return OK(async (...args) => {
        const error2 = new ZodError([]);
        const parsedArgs = await this._def.args.parseAsync(args, params).catch((e2) => {
          error2.addIssue(makeArgsIssue(args, e2));
          throw error2;
        });
        const result = await fn2(...parsedArgs);
        const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e2) => {
          error2.addIssue(makeReturnsIssue(result, e2));
          throw error2;
        });
        return parsedReturns;
      });
    } else {
      return OK((...args) => {
        const parsedArgs = this._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = fn2(...parsedArgs.data);
        const parsedReturns = this._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
}
ZodFunction.create = (args, returns, params) => {
  return new ZodFunction({
    args: args ? args.rest(ZodUnknown.create()) : ZodTuple.create([]).rest(ZodUnknown.create()),
    returns: returns || ZodUnknown.create(),
    typeName: ZodFirstPartyTypeKind.ZodFunction,
    ...processCreateParams(params)
  });
};
class ZodLazy extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
}
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
class ZodLiteral extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
}
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
class ZodEnum extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (this._def.values.indexOf(input.data) === -1) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (nativeEnumValues.indexOf(input.data) === -1) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
}
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
class ZodPromise extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
}
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
class ZodEffects extends ZodType {
  innerType() {
    return this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data);
      if (ctx.common.async) {
        return Promise.resolve(processed).then((processed2) => {
          return this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
        });
      } else {
        return this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base2 = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base2))
          return base2;
        const result = effect.transform(base2.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base2) => {
          if (!isValid(base2))
            return base2;
          return Promise.resolve(effect.transform(base2.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
}
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
class ZodOptional extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
class ZodNullable extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
class ZodDefault extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
ZodDefault.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
class ZodNaN extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
}
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
const custom = (check, params = {}, fatal) => {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      if (!check(data)) {
        const p2 = typeof params === "function" ? params(data) : params;
        const p22 = typeof p2 === "string" ? { message: p2 } : p2;
        ctx.addIssue({ code: "custom", ...p22, fatal });
      }
    });
  return ZodAny.create();
};
const late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params, true);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
var mod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  getParsedType,
  ZodParsedType,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  get objectUtil() {
    return objectUtil;
  },
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodNaN,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  ZodIssueCode,
  quotelessJson,
  ZodError,
  defaultErrorMap,
  get overrideErrorMap() {
    return overrideErrorMap;
  },
  setErrorMap
});
function devAssert(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}
const MAX_ARRAY_LENGTH = 10;
const MAX_RECURSIVE_DEPTH = 2;
function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function isJSONable(value) {
  return typeof value.toJSON === "function";
}
function formatObject(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[" + getObjectTag(object) + "]";
  }
  const properties = entries.map(
    ([key, value]) => key + ": " + formatValue(value, seenValues)
  );
  return "{ " + properties.join(", ") + " }";
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[Array]";
  }
  const len = Math.min(MAX_ARRAY_LENGTH, array.length);
  const remaining = array.length - len;
  const items = [];
  for (let i2 = 0; i2 < len; ++i2) {
    items.push(formatValue(array[i2], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}
class Location {
  constructor(startToken, endToken, source) {
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }
  get [Symbol.toStringTag]() {
    return "Location";
  }
  toJSON() {
    return {
      start: this.start,
      end: this.end
    };
  }
}
class Token {
  constructor(kind, start, end, line, column, value) {
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column;
    this.value = value;
    this.prev = null;
    this.next = null;
  }
  get [Symbol.toStringTag]() {
    return "Token";
  }
  toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column
    };
  }
}
const QueryDocumentKeys = {
  Name: [],
  Document: ["definitions"],
  OperationDefinition: [
    "name",
    "variableDefinitions",
    "directives",
    "selectionSet"
  ],
  VariableDefinition: ["variable", "type", "defaultValue", "directives"],
  Variable: ["name"],
  SelectionSet: ["selections"],
  Field: ["alias", "name", "arguments", "directives", "selectionSet"],
  Argument: ["name", "value"],
  FragmentSpread: ["name", "directives"],
  InlineFragment: ["typeCondition", "directives", "selectionSet"],
  FragmentDefinition: [
    "name",
    "variableDefinitions",
    "typeCondition",
    "directives",
    "selectionSet"
  ],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ["values"],
  ObjectValue: ["fields"],
  ObjectField: ["name", "value"],
  Directive: ["name", "arguments"],
  NamedType: ["name"],
  ListType: ["type"],
  NonNullType: ["type"],
  SchemaDefinition: ["description", "directives", "operationTypes"],
  OperationTypeDefinition: ["type"],
  ScalarTypeDefinition: ["description", "name", "directives"],
  ObjectTypeDefinition: [
    "description",
    "name",
    "interfaces",
    "directives",
    "fields"
  ],
  FieldDefinition: ["description", "name", "arguments", "type", "directives"],
  InputValueDefinition: [
    "description",
    "name",
    "type",
    "defaultValue",
    "directives"
  ],
  InterfaceTypeDefinition: [
    "description",
    "name",
    "interfaces",
    "directives",
    "fields"
  ],
  UnionTypeDefinition: ["description", "name", "directives", "types"],
  EnumTypeDefinition: ["description", "name", "directives", "values"],
  EnumValueDefinition: ["description", "name", "directives"],
  InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
  DirectiveDefinition: ["description", "name", "arguments", "locations"],
  SchemaExtension: ["directives", "operationTypes"],
  ScalarTypeExtension: ["name", "directives"],
  ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
  InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
  UnionTypeExtension: ["name", "directives", "types"],
  EnumTypeExtension: ["name", "directives", "values"],
  InputObjectTypeExtension: ["name", "directives", "fields"]
};
const kindValues = new Set(Object.keys(QueryDocumentKeys));
function isNode(maybeNode) {
  const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
  return typeof maybeKind === "string" && kindValues.has(maybeKind);
}
let OperationTypeNode;
(function(OperationTypeNode2) {
  OperationTypeNode2["QUERY"] = "query";
  OperationTypeNode2["MUTATION"] = "mutation";
  OperationTypeNode2["SUBSCRIPTION"] = "subscription";
})(OperationTypeNode || (OperationTypeNode = {}));
let Kind;
(function(Kind2) {
  Kind2["NAME"] = "Name";
  Kind2["DOCUMENT"] = "Document";
  Kind2["OPERATION_DEFINITION"] = "OperationDefinition";
  Kind2["VARIABLE_DEFINITION"] = "VariableDefinition";
  Kind2["SELECTION_SET"] = "SelectionSet";
  Kind2["FIELD"] = "Field";
  Kind2["ARGUMENT"] = "Argument";
  Kind2["FRAGMENT_SPREAD"] = "FragmentSpread";
  Kind2["INLINE_FRAGMENT"] = "InlineFragment";
  Kind2["FRAGMENT_DEFINITION"] = "FragmentDefinition";
  Kind2["VARIABLE"] = "Variable";
  Kind2["INT"] = "IntValue";
  Kind2["FLOAT"] = "FloatValue";
  Kind2["STRING"] = "StringValue";
  Kind2["BOOLEAN"] = "BooleanValue";
  Kind2["NULL"] = "NullValue";
  Kind2["ENUM"] = "EnumValue";
  Kind2["LIST"] = "ListValue";
  Kind2["OBJECT"] = "ObjectValue";
  Kind2["OBJECT_FIELD"] = "ObjectField";
  Kind2["DIRECTIVE"] = "Directive";
  Kind2["NAMED_TYPE"] = "NamedType";
  Kind2["LIST_TYPE"] = "ListType";
  Kind2["NON_NULL_TYPE"] = "NonNullType";
  Kind2["SCHEMA_DEFINITION"] = "SchemaDefinition";
  Kind2["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
  Kind2["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
  Kind2["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
  Kind2["FIELD_DEFINITION"] = "FieldDefinition";
  Kind2["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
  Kind2["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
  Kind2["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
  Kind2["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
  Kind2["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
  Kind2["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
  Kind2["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
  Kind2["SCHEMA_EXTENSION"] = "SchemaExtension";
  Kind2["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
  Kind2["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
  Kind2["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
  Kind2["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
  Kind2["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
  Kind2["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
})(Kind || (Kind = {}));
const BREAK = Object.freeze({});
function visit(root2, visitor, visitorKeys = QueryDocumentKeys) {
  const enterLeaveMap = /* @__PURE__ */ new Map();
  for (const kind of Object.values(Kind)) {
    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
  }
  let stack = void 0;
  let inArray = Array.isArray(root2);
  let keys = [root2];
  let index2 = -1;
  let edits = [];
  let node = root2;
  let key = void 0;
  let parent = void 0;
  const path = [];
  const ancestors = [];
  do {
    index2++;
    const isLeaving = index2 === keys.length;
    const isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
          let editOffset = 0;
          for (const [editKey, editValue] of edits) {
            const arrayKey = editKey - editOffset;
            if (editValue === null) {
              node.splice(arrayKey, 1);
              editOffset++;
            } else {
              node[arrayKey] = editValue;
            }
          }
        } else {
          node = Object.defineProperties(
            {},
            Object.getOwnPropertyDescriptors(node)
          );
          for (const [editKey, editValue] of edits) {
            node[editKey] = editValue;
          }
        }
      }
      index2 = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else if (parent) {
      key = inArray ? index2 : keys[index2];
      node = parent[key];
      if (node === null || node === void 0) {
        continue;
      }
      path.push(key);
    }
    let result;
    if (!Array.isArray(node)) {
      var _enterLeaveMap$get, _enterLeaveMap$get2;
      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);
      const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);
      if (result === BREAK) {
        break;
      }
      if (result === false) {
        if (!isLeaving) {
          path.pop();
          continue;
        }
      } else if (result !== void 0) {
        edits.push([key, result]);
        if (!isLeaving) {
          if (isNode(result)) {
            node = result;
          } else {
            path.pop();
            continue;
          }
        }
      }
    }
    if (result === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path.pop();
    } else {
      var _node$kind;
      stack = {
        inArray,
        index: index2,
        keys,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
      index2 = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    return edits[edits.length - 1][1];
  }
  return root2;
}
function getEnterLeaveForKind(visitor, kind) {
  const kindVisitor = visitor[kind];
  if (typeof kindVisitor === "object") {
    return kindVisitor;
  } else if (typeof kindVisitor === "function") {
    return {
      enter: kindVisitor,
      leave: void 0
    };
  }
  return {
    enter: visitor.enter,
    leave: visitor.leave
  };
}
function isWhiteSpace(code) {
  return code === 9 || code === 32;
}
function isDigit(code) {
  return code >= 48 && code <= 57;
}
function isLetter(code) {
  return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function isNameStart(code) {
  return isLetter(code) || code === 95;
}
function isNameContinue(code) {
  return isLetter(code) || isDigit(code) || code === 95;
}
function dedentBlockStringLines(lines) {
  var _firstNonEmptyLine2;
  let commonIndent = Number.MAX_SAFE_INTEGER;
  let firstNonEmptyLine = null;
  let lastNonEmptyLine = -1;
  for (let i2 = 0; i2 < lines.length; ++i2) {
    var _firstNonEmptyLine;
    const line = lines[i2];
    const indent2 = leadingWhitespace(line);
    if (indent2 === line.length) {
      continue;
    }
    firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i2;
    lastNonEmptyLine = i2;
    if (i2 !== 0 && indent2 < commonIndent) {
      commonIndent = indent2;
    }
  }
  return lines.map((line, i2) => i2 === 0 ? line : line.slice(commonIndent)).slice(
    (_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0,
    lastNonEmptyLine + 1
  );
}
function leadingWhitespace(str) {
  let i2 = 0;
  while (i2 < str.length && isWhiteSpace(str.charCodeAt(i2))) {
    ++i2;
  }
  return i2;
}
function printBlockString(value, options) {
  const escapedValue = value.replace(/"""/g, '\\"""');
  const lines = escapedValue.split(/\r\n|[\n\r]/g);
  const isSingleLine = lines.length === 1;
  const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0)));
  const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
  const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
  const hasTrailingSlash = value.endsWith("\\");
  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
  const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
  let result = "";
  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));
  if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
    result += "\n";
  }
  result += escapedValue;
  if (printAsMultipleLines || forceTrailingNewline) {
    result += "\n";
  }
  return '"""' + result + '"""';
}
function printString(str) {
  return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
}
const escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
function escapedReplacer(str) {
  return escapeSequences[str.charCodeAt(0)];
}
const escapeSequences = [
  "\\u0000",
  "\\u0001",
  "\\u0002",
  "\\u0003",
  "\\u0004",
  "\\u0005",
  "\\u0006",
  "\\u0007",
  "\\b",
  "\\t",
  "\\n",
  "\\u000B",
  "\\f",
  "\\r",
  "\\u000E",
  "\\u000F",
  "\\u0010",
  "\\u0011",
  "\\u0012",
  "\\u0013",
  "\\u0014",
  "\\u0015",
  "\\u0016",
  "\\u0017",
  "\\u0018",
  "\\u0019",
  "\\u001A",
  "\\u001B",
  "\\u001C",
  "\\u001D",
  "\\u001E",
  "\\u001F",
  "",
  "",
  '\\"',
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\\\",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\u007F",
  "\\u0080",
  "\\u0081",
  "\\u0082",
  "\\u0083",
  "\\u0084",
  "\\u0085",
  "\\u0086",
  "\\u0087",
  "\\u0088",
  "\\u0089",
  "\\u008A",
  "\\u008B",
  "\\u008C",
  "\\u008D",
  "\\u008E",
  "\\u008F",
  "\\u0090",
  "\\u0091",
  "\\u0092",
  "\\u0093",
  "\\u0094",
  "\\u0095",
  "\\u0096",
  "\\u0097",
  "\\u0098",
  "\\u0099",
  "\\u009A",
  "\\u009B",
  "\\u009C",
  "\\u009D",
  "\\u009E",
  "\\u009F"
];
function print(ast) {
  return visit(ast, printDocASTReducer);
}
const MAX_LINE_LENGTH = 80;
const printDocASTReducer = {
  Name: {
    leave: (node) => node.value
  },
  Variable: {
    leave: (node) => "$" + node.name
  },
  Document: {
    leave: (node) => join(node.definitions, "\n\n")
  },
  OperationDefinition: {
    leave(node) {
      const varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
      const prefix = join(
        [
          node.operation,
          join([node.name, varDefs]),
          join(node.directives, " ")
        ],
        " "
      );
      return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
    }
  },
  VariableDefinition: {
    leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "))
  },
  SelectionSet: {
    leave: ({ selections }) => block(selections)
  },
  Field: {
    leave({ alias, name, arguments: args, directives, selectionSet }) {
      const prefix = wrap("", alias, ": ") + name;
      let argsLine = prefix + wrap("(", join(args, ", "), ")");
      if (argsLine.length > MAX_LINE_LENGTH) {
        argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
      }
      return join([argsLine, join(directives, " "), selectionSet], " ");
    }
  },
  Argument: {
    leave: ({ name, value }) => name + ": " + value
  },
  FragmentSpread: {
    leave: ({ name, directives }) => "..." + name + wrap(" ", join(directives, " "))
  },
  InlineFragment: {
    leave: ({ typeCondition, directives, selectionSet }) => join(
      [
        "...",
        wrap("on ", typeCondition),
        join(directives, " "),
        selectionSet
      ],
      " "
    )
  },
  FragmentDefinition: {
    leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => `fragment ${name}${wrap("(", join(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join(directives, " "), " ")}` + selectionSet
  },
  IntValue: {
    leave: ({ value }) => value
  },
  FloatValue: {
    leave: ({ value }) => value
  },
  StringValue: {
    leave: ({ value, block: isBlockString }) => isBlockString ? printBlockString(value) : printString(value)
  },
  BooleanValue: {
    leave: ({ value }) => value ? "true" : "false"
  },
  NullValue: {
    leave: () => "null"
  },
  EnumValue: {
    leave: ({ value }) => value
  },
  ListValue: {
    leave: ({ values }) => "[" + join(values, ", ") + "]"
  },
  ObjectValue: {
    leave: ({ fields }) => "{" + join(fields, ", ") + "}"
  },
  ObjectField: {
    leave: ({ name, value }) => name + ": " + value
  },
  Directive: {
    leave: ({ name, arguments: args }) => "@" + name + wrap("(", join(args, ", "), ")")
  },
  NamedType: {
    leave: ({ name }) => name
  },
  ListType: {
    leave: ({ type }) => "[" + type + "]"
  },
  NonNullType: {
    leave: ({ type }) => type + "!"
  },
  SchemaDefinition: {
    leave: ({ description, directives, operationTypes }) => wrap("", description, "\n") + join(["schema", join(directives, " "), block(operationTypes)], " ")
  },
  OperationTypeDefinition: {
    leave: ({ operation, type }) => operation + ": " + type
  },
  ScalarTypeDefinition: {
    leave: ({ description, name, directives }) => wrap("", description, "\n") + join(["scalar", name, join(directives, " ")], " ")
  },
  ObjectTypeDefinition: {
    leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join(
      [
        "type",
        name,
        wrap("implements ", join(interfaces, " & ")),
        join(directives, " "),
        block(fields)
      ],
      " "
    )
  },
  FieldDefinition: {
    leave: ({ description, name, arguments: args, type, directives }) => wrap("", description, "\n") + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives, " "))
  },
  InputValueDefinition: {
    leave: ({ description, name, type, defaultValue, directives }) => wrap("", description, "\n") + join(
      [name + ": " + type, wrap("= ", defaultValue), join(directives, " ")],
      " "
    )
  },
  InterfaceTypeDefinition: {
    leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join(
      [
        "interface",
        name,
        wrap("implements ", join(interfaces, " & ")),
        join(directives, " "),
        block(fields)
      ],
      " "
    )
  },
  UnionTypeDefinition: {
    leave: ({ description, name, directives, types }) => wrap("", description, "\n") + join(
      ["union", name, join(directives, " "), wrap("= ", join(types, " | "))],
      " "
    )
  },
  EnumTypeDefinition: {
    leave: ({ description, name, directives, values }) => wrap("", description, "\n") + join(["enum", name, join(directives, " "), block(values)], " ")
  },
  EnumValueDefinition: {
    leave: ({ description, name, directives }) => wrap("", description, "\n") + join([name, join(directives, " ")], " ")
  },
  InputObjectTypeDefinition: {
    leave: ({ description, name, directives, fields }) => wrap("", description, "\n") + join(["input", name, join(directives, " "), block(fields)], " ")
  },
  DirectiveDefinition: {
    leave: ({ description, name, arguments: args, repeatable, locations }) => wrap("", description, "\n") + "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ")
  },
  SchemaExtension: {
    leave: ({ directives, operationTypes }) => join(
      ["extend schema", join(directives, " "), block(operationTypes)],
      " "
    )
  },
  ScalarTypeExtension: {
    leave: ({ name, directives }) => join(["extend scalar", name, join(directives, " ")], " ")
  },
  ObjectTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join(
      [
        "extend type",
        name,
        wrap("implements ", join(interfaces, " & ")),
        join(directives, " "),
        block(fields)
      ],
      " "
    )
  },
  InterfaceTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join(
      [
        "extend interface",
        name,
        wrap("implements ", join(interfaces, " & ")),
        join(directives, " "),
        block(fields)
      ],
      " "
    )
  },
  UnionTypeExtension: {
    leave: ({ name, directives, types }) => join(
      [
        "extend union",
        name,
        join(directives, " "),
        wrap("= ", join(types, " | "))
      ],
      " "
    )
  },
  EnumTypeExtension: {
    leave: ({ name, directives, values }) => join(["extend enum", name, join(directives, " "), block(values)], " ")
  },
  InputObjectTypeExtension: {
    leave: ({ name, directives, fields }) => join(["extend input", name, join(directives, " "), block(fields)], " ")
  }
};
function join(maybeArray, separator = "") {
  var _maybeArray$filter$jo;
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x2) => x2).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
}
function block(array) {
  return wrap("{\n", indent(join(array, "\n")), "\n}");
}
function wrap(start, maybeString, end = "") {
  return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
}
function indent(str) {
  return wrap("  ", str.replace(/\n/g, "\n  "));
}
function hasMultilineItems(maybeArray) {
  var _maybeArray$some;
  return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
}
function isObjectLike(value) {
  return typeof value == "object" && value !== null;
}
function invariant(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(
      message != null ? message : "Unexpected invariant triggered."
    );
  }
}
const LineRegExp = /\r\n|[\n\r]/g;
function getLocation(source, position) {
  let lastLineStart = 0;
  let line = 1;
  for (const match of source.body.matchAll(LineRegExp)) {
    typeof match.index === "number" || invariant(false);
    if (match.index >= position) {
      break;
    }
    lastLineStart = match.index + match[0].length;
    line += 1;
  }
  return {
    line,
    column: position + 1 - lastLineStart
  };
}
function printLocation(location) {
  return printSourceLocation(
    location.source,
    getLocation(location.source, location.start)
  );
}
function printSourceLocation(source, sourceLocation) {
  const firstLineColumnOffset = source.locationOffset.column - 1;
  const body = "".padStart(firstLineColumnOffset) + source.body;
  const lineIndex = sourceLocation.line - 1;
  const lineOffset = source.locationOffset.line - 1;
  const lineNum = sourceLocation.line + lineOffset;
  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  const columnNum = sourceLocation.column + columnOffset;
  const locationStr = `${source.name}:${lineNum}:${columnNum}
`;
  const lines = body.split(/\r\n|[\n\r]/g);
  const locationLine = lines[lineIndex];
  if (locationLine.length > 120) {
    const subLineIndex = Math.floor(columnNum / 80);
    const subLineColumnNum = columnNum % 80;
    const subLines = [];
    for (let i2 = 0; i2 < locationLine.length; i2 += 80) {
      subLines.push(locationLine.slice(i2, i2 + 80));
    }
    return locationStr + printPrefixedLines([
      [`${lineNum} |`, subLines[0]],
      ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
      ["|", "^".padStart(subLineColumnNum)],
      ["|", subLines[subLineIndex + 1]]
    ]);
  }
  return locationStr + printPrefixedLines([
    [`${lineNum - 1} |`, lines[lineIndex - 1]],
    [`${lineNum} |`, locationLine],
    ["|", "^".padStart(columnNum)],
    [`${lineNum + 1} |`, lines[lineIndex + 1]]
  ]);
}
function printPrefixedLines(lines) {
  const existingLines = lines.filter(([_2, line]) => line !== void 0);
  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
  return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? " " + line : "")).join("\n");
}
function toNormalizedOptions(args) {
  const firstArg = args[0];
  if (firstArg == null || "kind" in firstArg || "length" in firstArg) {
    return {
      nodes: firstArg,
      source: args[1],
      positions: args[2],
      path: args[3],
      originalError: args[4],
      extensions: args[5]
    };
  }
  return firstArg;
}
class GraphQLError extends Error {
  constructor(message, ...rawArgs) {
    var _this$nodes, _nodeLocations$, _ref;
    const { nodes, source, positions, path, originalError, extensions } = toNormalizedOptions(rawArgs);
    super(message);
    this.name = "GraphQLError";
    this.path = path !== null && path !== void 0 ? path : void 0;
    this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
    this.nodes = undefinedIfEmpty(
      Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0
    );
    const nodeLocations = undefinedIfEmpty(
      (_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null)
    );
    this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
    this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => loc.start);
    this.locations = positions && source ? positions.map((pos) => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => getLocation(loc.source, loc.start));
    const originalExtensions = isObjectLike(
      originalError === null || originalError === void 0 ? void 0 : originalError.extensions
    ) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : void 0;
    this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null);
    Object.defineProperties(this, {
      message: {
        writable: true,
        enumerable: true
      },
      name: {
        enumerable: false
      },
      nodes: {
        enumerable: false
      },
      source: {
        enumerable: false
      },
      positions: {
        enumerable: false
      },
      originalError: {
        enumerable: false
      }
    });
    if (originalError !== null && originalError !== void 0 && originalError.stack) {
      Object.defineProperty(this, "stack", {
        value: originalError.stack,
        writable: true,
        configurable: true
      });
    } else if (Error.captureStackTrace) {
      Error.captureStackTrace(this, GraphQLError);
    } else {
      Object.defineProperty(this, "stack", {
        value: Error().stack,
        writable: true,
        configurable: true
      });
    }
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
  toString() {
    let output = this.message;
    if (this.nodes) {
      for (const node of this.nodes) {
        if (node.loc) {
          output += "\n\n" + printLocation(node.loc);
        }
      }
    } else if (this.source && this.locations) {
      for (const location of this.locations) {
        output += "\n\n" + printSourceLocation(this.source, location);
      }
    }
    return output;
  }
  toJSON() {
    const formattedError = {
      message: this.message
    };
    if (this.locations != null) {
      formattedError.locations = this.locations;
    }
    if (this.path != null) {
      formattedError.path = this.path;
    }
    if (this.extensions != null && Object.keys(this.extensions).length > 0) {
      formattedError.extensions = this.extensions;
    }
    return formattedError;
  }
}
function undefinedIfEmpty(array) {
  return array === void 0 || array.length === 0 ? void 0 : array;
}
function syntaxError(source, position, description) {
  return new GraphQLError(`Syntax Error: ${description}`, {
    source,
    positions: [position]
  });
}
let DirectiveLocation;
(function(DirectiveLocation2) {
  DirectiveLocation2["QUERY"] = "QUERY";
  DirectiveLocation2["MUTATION"] = "MUTATION";
  DirectiveLocation2["SUBSCRIPTION"] = "SUBSCRIPTION";
  DirectiveLocation2["FIELD"] = "FIELD";
  DirectiveLocation2["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
  DirectiveLocation2["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
  DirectiveLocation2["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
  DirectiveLocation2["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
  DirectiveLocation2["SCHEMA"] = "SCHEMA";
  DirectiveLocation2["SCALAR"] = "SCALAR";
  DirectiveLocation2["OBJECT"] = "OBJECT";
  DirectiveLocation2["FIELD_DEFINITION"] = "FIELD_DEFINITION";
  DirectiveLocation2["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
  DirectiveLocation2["INTERFACE"] = "INTERFACE";
  DirectiveLocation2["UNION"] = "UNION";
  DirectiveLocation2["ENUM"] = "ENUM";
  DirectiveLocation2["ENUM_VALUE"] = "ENUM_VALUE";
  DirectiveLocation2["INPUT_OBJECT"] = "INPUT_OBJECT";
  DirectiveLocation2["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
})(DirectiveLocation || (DirectiveLocation = {}));
let TokenKind;
(function(TokenKind2) {
  TokenKind2["SOF"] = "<SOF>";
  TokenKind2["EOF"] = "<EOF>";
  TokenKind2["BANG"] = "!";
  TokenKind2["DOLLAR"] = "$";
  TokenKind2["AMP"] = "&";
  TokenKind2["PAREN_L"] = "(";
  TokenKind2["PAREN_R"] = ")";
  TokenKind2["SPREAD"] = "...";
  TokenKind2["COLON"] = ":";
  TokenKind2["EQUALS"] = "=";
  TokenKind2["AT"] = "@";
  TokenKind2["BRACKET_L"] = "[";
  TokenKind2["BRACKET_R"] = "]";
  TokenKind2["BRACE_L"] = "{";
  TokenKind2["PIPE"] = "|";
  TokenKind2["BRACE_R"] = "}";
  TokenKind2["NAME"] = "Name";
  TokenKind2["INT"] = "Int";
  TokenKind2["FLOAT"] = "Float";
  TokenKind2["STRING"] = "String";
  TokenKind2["BLOCK_STRING"] = "BlockString";
  TokenKind2["COMMENT"] = "Comment";
})(TokenKind || (TokenKind = {}));
class Lexer {
  constructor(source) {
    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);
    this.source = source;
    this.lastToken = startOfFileToken;
    this.token = startOfFileToken;
    this.line = 1;
    this.lineStart = 0;
  }
  get [Symbol.toStringTag]() {
    return "Lexer";
  }
  advance() {
    this.lastToken = this.token;
    const token = this.token = this.lookahead();
    return token;
  }
  lookahead() {
    let token = this.token;
    if (token.kind !== TokenKind.EOF) {
      do {
        if (token.next) {
          token = token.next;
        } else {
          const nextToken = readNextToken(this, token.end);
          token.next = nextToken;
          nextToken.prev = token;
          token = nextToken;
        }
      } while (token.kind === TokenKind.COMMENT);
    }
    return token;
  }
}
function isPunctuatorTokenKind(kind) {
  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
}
function isUnicodeScalarValue(code) {
  return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
}
function isSupplementaryCodePoint(body, location) {
  return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
}
function isLeadingSurrogate(code) {
  return code >= 55296 && code <= 56319;
}
function isTrailingSurrogate(code) {
  return code >= 56320 && code <= 57343;
}
function printCodePointAt(lexer, location) {
  const code = lexer.source.body.codePointAt(location);
  if (code === void 0) {
    return TokenKind.EOF;
  } else if (code >= 32 && code <= 126) {
    const char = String.fromCodePoint(code);
    return char === '"' ? `'"'` : `"${char}"`;
  }
  return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
}
function createToken(lexer, kind, start, end, value) {
  const line = lexer.line;
  const col = 1 + start - lexer.lineStart;
  return new Token(kind, start, end, line, col, value);
}
function readNextToken(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    switch (code) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++position;
        continue;
      case 10:
        ++position;
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 13:
        if (body.charCodeAt(position + 1) === 10) {
          position += 2;
        } else {
          ++position;
        }
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 35:
        return readComment(lexer, position);
      case 33:
        return createToken(lexer, TokenKind.BANG, position, position + 1);
      case 36:
        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);
      case 38:
        return createToken(lexer, TokenKind.AMP, position, position + 1);
      case 40:
        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);
      case 41:
        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);
      case 46:
        if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46) {
          return createToken(lexer, TokenKind.SPREAD, position, position + 3);
        }
        break;
      case 58:
        return createToken(lexer, TokenKind.COLON, position, position + 1);
      case 61:
        return createToken(lexer, TokenKind.EQUALS, position, position + 1);
      case 64:
        return createToken(lexer, TokenKind.AT, position, position + 1);
      case 91:
        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);
      case 93:
        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);
      case 123:
        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);
      case 124:
        return createToken(lexer, TokenKind.PIPE, position, position + 1);
      case 125:
        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);
      case 34:
        if (body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          return readBlockString(lexer, position);
        }
        return readString(lexer, position);
    }
    if (isDigit(code) || code === 45) {
      return readNumber(lexer, position, code);
    }
    if (isNameStart(code)) {
      return readName(lexer, position);
    }
    throw syntaxError(
      lexer.source,
      position,
      code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`
    );
  }
  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);
}
function readComment(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      break;
    }
  }
  return createToken(
    lexer,
    TokenKind.COMMENT,
    start,
    position,
    body.slice(start + 1, position)
  );
}
function readNumber(lexer, start, firstCode) {
  const body = lexer.source.body;
  let position = start;
  let code = firstCode;
  let isFloat = false;
  if (code === 45) {
    code = body.charCodeAt(++position);
  }
  if (code === 48) {
    code = body.charCodeAt(++position);
    if (isDigit(code)) {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid number, unexpected digit after 0: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  } else {
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46) {
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 69 || code === 101) {
    isFloat = true;
    code = body.charCodeAt(++position);
    if (code === 43 || code === 45) {
      code = body.charCodeAt(++position);
    }
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46 || isNameStart(code)) {
    throw syntaxError(
      lexer.source,
      position,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        position
      )}.`
    );
  }
  return createToken(
    lexer,
    isFloat ? TokenKind.FLOAT : TokenKind.INT,
    start,
    position,
    body.slice(start, position)
  );
}
function readDigits(lexer, start, firstCode) {
  if (!isDigit(firstCode)) {
    throw syntaxError(
      lexer.source,
      start,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        start
      )}.`
    );
  }
  const body = lexer.source.body;
  let position = start + 1;
  while (isDigit(body.charCodeAt(position))) {
    ++position;
  }
  return position;
}
function readString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  let chunkStart = position;
  let value = "";
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return createToken(lexer, TokenKind.STRING, start, position + 1, value);
    }
    if (code === 92) {
      value += body.slice(chunkStart, position);
      const escape2 = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
      value += escape2.value;
      position += escape2.size;
      chunkStart = position;
      continue;
    }
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readEscapedUnicodeVariableWidth(lexer, position) {
  const body = lexer.source.body;
  let point = 0;
  let size = 3;
  while (size < 12) {
    const code = body.charCodeAt(position + size++);
    if (code === 125) {
      if (size < 5 || !isUnicodeScalarValue(point)) {
        break;
      }
      return {
        value: String.fromCodePoint(point),
        size
      };
    }
    point = point << 4 | readHexDigit(code);
    if (point < 0) {
      break;
    }
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(
      position,
      position + size
    )}".`
  );
}
function readEscapedUnicodeFixedWidth(lexer, position) {
  const body = lexer.source.body;
  const code = read16BitHexCode(body, position + 2);
  if (isUnicodeScalarValue(code)) {
    return {
      value: String.fromCodePoint(code),
      size: 6
    };
  }
  if (isLeadingSurrogate(code)) {
    if (body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
      const trailingCode = read16BitHexCode(body, position + 8);
      if (isTrailingSurrogate(trailingCode)) {
        return {
          value: String.fromCodePoint(code, trailingCode),
          size: 12
        };
      }
    }
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`
  );
}
function read16BitHexCode(body, position) {
  return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
}
function readHexDigit(code) {
  return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
}
function readEscapedCharacter(lexer, position) {
  const body = lexer.source.body;
  const code = body.charCodeAt(position + 1);
  switch (code) {
    case 34:
      return {
        value: '"',
        size: 2
      };
    case 92:
      return {
        value: "\\",
        size: 2
      };
    case 47:
      return {
        value: "/",
        size: 2
      };
    case 98:
      return {
        value: "\b",
        size: 2
      };
    case 102:
      return {
        value: "\f",
        size: 2
      };
    case 110:
      return {
        value: "\n",
        size: 2
      };
    case 114:
      return {
        value: "\r",
        size: 2
      };
    case 116:
      return {
        value: "	",
        size: 2
      };
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid character escape sequence: "${body.slice(
      position,
      position + 2
    )}".`
  );
}
function readBlockString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let lineStart = lexer.lineStart;
  let position = start + 3;
  let chunkStart = position;
  let currentLine = "";
  const blockLines = [];
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      const token = createToken(
        lexer,
        TokenKind.BLOCK_STRING,
        start,
        position + 3,
        dedentBlockStringLines(blockLines).join("\n")
      );
      lexer.line += blockLines.length - 1;
      lexer.lineStart = lineStart;
      return token;
    }
    if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
      currentLine += body.slice(chunkStart, position);
      chunkStart = position + 1;
      position += 4;
      continue;
    }
    if (code === 10 || code === 13) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      if (code === 13 && body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }
      currentLine = "";
      chunkStart = position;
      lineStart = position;
      continue;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readName(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (isNameContinue(code)) {
      ++position;
    } else {
      break;
    }
  }
  return createToken(
    lexer,
    TokenKind.NAME,
    start,
    position,
    body.slice(start, position)
  );
}
const instanceOf = function instanceOf2(value, constructor) {
  return value instanceof constructor;
};
class Source {
  constructor(body, name = "GraphQL request", locationOffset = {
    line: 1,
    column: 1
  }) {
    typeof body === "string" || devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);
    this.body = body;
    this.name = name;
    this.locationOffset = locationOffset;
    this.locationOffset.line > 0 || devAssert(
      false,
      "line in locationOffset is 1-indexed and must be positive."
    );
    this.locationOffset.column > 0 || devAssert(
      false,
      "column in locationOffset is 1-indexed and must be positive."
    );
  }
  get [Symbol.toStringTag]() {
    return "Source";
  }
}
function isSource(source) {
  return instanceOf(source, Source);
}
function parse(source, options) {
  const parser2 = new Parser(source, options);
  return parser2.parseDocument();
}
class Parser {
  constructor(source, options) {
    const sourceObj = isSource(source) ? source : new Source(source);
    this._lexer = new Lexer(sourceObj);
    this._options = options;
  }
  parseName() {
    const token = this.expectToken(TokenKind.NAME);
    return this.node(token, {
      kind: Kind.NAME,
      value: token.value
    });
  }
  parseDocument() {
    return this.node(this._lexer.token, {
      kind: Kind.DOCUMENT,
      definitions: this.many(
        TokenKind.SOF,
        this.parseDefinition,
        TokenKind.EOF
      )
    });
  }
  parseDefinition() {
    if (this.peek(TokenKind.BRACE_L)) {
      return this.parseOperationDefinition();
    }
    const hasDescription = this.peekDescription();
    const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case "schema":
          return this.parseSchemaDefinition();
        case "scalar":
          return this.parseScalarTypeDefinition();
        case "type":
          return this.parseObjectTypeDefinition();
        case "interface":
          return this.parseInterfaceTypeDefinition();
        case "union":
          return this.parseUnionTypeDefinition();
        case "enum":
          return this.parseEnumTypeDefinition();
        case "input":
          return this.parseInputObjectTypeDefinition();
        case "directive":
          return this.parseDirectiveDefinition();
      }
      if (hasDescription) {
        throw syntaxError(
          this._lexer.source,
          this._lexer.token.start,
          "Unexpected description, descriptions are supported only on type definitions."
        );
      }
      switch (keywordToken.value) {
        case "query":
        case "mutation":
        case "subscription":
          return this.parseOperationDefinition();
        case "fragment":
          return this.parseFragmentDefinition();
        case "extend":
          return this.parseTypeSystemExtension();
      }
    }
    throw this.unexpected(keywordToken);
  }
  parseOperationDefinition() {
    const start = this._lexer.token;
    if (this.peek(TokenKind.BRACE_L)) {
      return this.node(start, {
        kind: Kind.OPERATION_DEFINITION,
        operation: OperationTypeNode.QUERY,
        name: void 0,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet()
      });
    }
    const operation = this.parseOperationType();
    let name;
    if (this.peek(TokenKind.NAME)) {
      name = this.parseName();
    }
    return this.node(start, {
      kind: Kind.OPERATION_DEFINITION,
      operation,
      name,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet()
    });
  }
  parseOperationType() {
    const operationToken = this.expectToken(TokenKind.NAME);
    switch (operationToken.value) {
      case "query":
        return OperationTypeNode.QUERY;
      case "mutation":
        return OperationTypeNode.MUTATION;
      case "subscription":
        return OperationTypeNode.SUBSCRIPTION;
    }
    throw this.unexpected(operationToken);
  }
  parseVariableDefinitions() {
    return this.optionalMany(
      TokenKind.PAREN_L,
      this.parseVariableDefinition,
      TokenKind.PAREN_R
    );
  }
  parseVariableDefinition() {
    return this.node(this._lexer.token, {
      kind: Kind.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
      directives: this.parseConstDirectives()
    });
  }
  parseVariable() {
    const start = this._lexer.token;
    this.expectToken(TokenKind.DOLLAR);
    return this.node(start, {
      kind: Kind.VARIABLE,
      name: this.parseName()
    });
  }
  parseSelectionSet() {
    return this.node(this._lexer.token, {
      kind: Kind.SELECTION_SET,
      selections: this.many(
        TokenKind.BRACE_L,
        this.parseSelection,
        TokenKind.BRACE_R
      )
    });
  }
  parseSelection() {
    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
  }
  parseField() {
    const start = this._lexer.token;
    const nameOrAlias = this.parseName();
    let alias;
    let name;
    if (this.expectOptionalToken(TokenKind.COLON)) {
      alias = nameOrAlias;
      name = this.parseName();
    } else {
      name = nameOrAlias;
    }
    return this.node(start, {
      kind: Kind.FIELD,
      alias,
      name,
      arguments: this.parseArguments(false),
      directives: this.parseDirectives(false),
      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
    });
  }
  parseArguments(isConst) {
    const item = isConst ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
  }
  parseArgument(isConst = false) {
    const start = this._lexer.token;
    const name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return this.node(start, {
      kind: Kind.ARGUMENT,
      name,
      value: this.parseValueLiteral(isConst)
    });
  }
  parseConstArgument() {
    return this.parseArgument(true);
  }
  parseFragment() {
    const start = this._lexer.token;
    this.expectToken(TokenKind.SPREAD);
    const hasTypeCondition = this.expectOptionalKeyword("on");
    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
      return this.node(start, {
        kind: Kind.FRAGMENT_SPREAD,
        name: this.parseFragmentName(),
        directives: this.parseDirectives(false)
      });
    }
    return this.node(start, {
      kind: Kind.INLINE_FRAGMENT,
      typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet()
    });
  }
  parseFragmentDefinition() {
    var _this$_options;
    const start = this._lexer.token;
    this.expectKeyword("fragment");
    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.allowLegacyFragmentVariables) === true) {
      return this.node(start, {
        kind: Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        variableDefinitions: this.parseVariableDefinitions(),
        typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet()
      });
    }
    return this.node(start, {
      kind: Kind.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet()
    });
  }
  parseFragmentName() {
    if (this._lexer.token.value === "on") {
      throw this.unexpected();
    }
    return this.parseName();
  }
  parseValueLiteral(isConst) {
    const token = this._lexer.token;
    switch (token.kind) {
      case TokenKind.BRACKET_L:
        return this.parseList(isConst);
      case TokenKind.BRACE_L:
        return this.parseObject(isConst);
      case TokenKind.INT:
        this._lexer.advance();
        return this.node(token, {
          kind: Kind.INT,
          value: token.value
        });
      case TokenKind.FLOAT:
        this._lexer.advance();
        return this.node(token, {
          kind: Kind.FLOAT,
          value: token.value
        });
      case TokenKind.STRING:
      case TokenKind.BLOCK_STRING:
        return this.parseStringLiteral();
      case TokenKind.NAME:
        this._lexer.advance();
        switch (token.value) {
          case "true":
            return this.node(token, {
              kind: Kind.BOOLEAN,
              value: true
            });
          case "false":
            return this.node(token, {
              kind: Kind.BOOLEAN,
              value: false
            });
          case "null":
            return this.node(token, {
              kind: Kind.NULL
            });
          default:
            return this.node(token, {
              kind: Kind.ENUM,
              value: token.value
            });
        }
      case TokenKind.DOLLAR:
        if (isConst) {
          this.expectToken(TokenKind.DOLLAR);
          if (this._lexer.token.kind === TokenKind.NAME) {
            const varName = this._lexer.token.value;
            throw syntaxError(
              this._lexer.source,
              token.start,
              `Unexpected variable "$${varName}" in constant value.`
            );
          } else {
            throw this.unexpected(token);
          }
        }
        return this.parseVariable();
      default:
        throw this.unexpected();
    }
  }
  parseConstValueLiteral() {
    return this.parseValueLiteral(true);
  }
  parseStringLiteral() {
    const token = this._lexer.token;
    this._lexer.advance();
    return this.node(token, {
      kind: Kind.STRING,
      value: token.value,
      block: token.kind === TokenKind.BLOCK_STRING
    });
  }
  parseList(isConst) {
    const item = () => this.parseValueLiteral(isConst);
    return this.node(this._lexer.token, {
      kind: Kind.LIST,
      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)
    });
  }
  parseObject(isConst) {
    const item = () => this.parseObjectField(isConst);
    return this.node(this._lexer.token, {
      kind: Kind.OBJECT,
      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)
    });
  }
  parseObjectField(isConst) {
    const start = this._lexer.token;
    const name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return this.node(start, {
      kind: Kind.OBJECT_FIELD,
      name,
      value: this.parseValueLiteral(isConst)
    });
  }
  parseDirectives(isConst) {
    const directives = [];
    while (this.peek(TokenKind.AT)) {
      directives.push(this.parseDirective(isConst));
    }
    return directives;
  }
  parseConstDirectives() {
    return this.parseDirectives(true);
  }
  parseDirective(isConst) {
    const start = this._lexer.token;
    this.expectToken(TokenKind.AT);
    return this.node(start, {
      kind: Kind.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(isConst)
    });
  }
  parseTypeReference() {
    const start = this._lexer.token;
    let type;
    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
      const innerType = this.parseTypeReference();
      this.expectToken(TokenKind.BRACKET_R);
      type = this.node(start, {
        kind: Kind.LIST_TYPE,
        type: innerType
      });
    } else {
      type = this.parseNamedType();
    }
    if (this.expectOptionalToken(TokenKind.BANG)) {
      return this.node(start, {
        kind: Kind.NON_NULL_TYPE,
        type
      });
    }
    return type;
  }
  parseNamedType() {
    return this.node(this._lexer.token, {
      kind: Kind.NAMED_TYPE,
      name: this.parseName()
    });
  }
  peekDescription() {
    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
  }
  parseDescription() {
    if (this.peekDescription()) {
      return this.parseStringLiteral();
    }
  }
  parseSchemaDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("schema");
    const directives = this.parseConstDirectives();
    const operationTypes = this.many(
      TokenKind.BRACE_L,
      this.parseOperationTypeDefinition,
      TokenKind.BRACE_R
    );
    return this.node(start, {
      kind: Kind.SCHEMA_DEFINITION,
      description,
      directives,
      operationTypes
    });
  }
  parseOperationTypeDefinition() {
    const start = this._lexer.token;
    const operation = this.parseOperationType();
    this.expectToken(TokenKind.COLON);
    const type = this.parseNamedType();
    return this.node(start, {
      kind: Kind.OPERATION_TYPE_DEFINITION,
      operation,
      type
    });
  }
  parseScalarTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("scalar");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: Kind.SCALAR_TYPE_DEFINITION,
      description,
      name,
      directives
    });
  }
  parseObjectTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("type");
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    return this.node(start, {
      kind: Kind.OBJECT_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields
    });
  }
  parseImplementsInterfaces() {
    return this.expectOptionalKeyword("implements") ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];
  }
  parseFieldsDefinition() {
    return this.optionalMany(
      TokenKind.BRACE_L,
      this.parseFieldDefinition,
      TokenKind.BRACE_R
    );
  }
  parseFieldDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseName();
    const args = this.parseArgumentDefs();
    this.expectToken(TokenKind.COLON);
    const type = this.parseTypeReference();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: Kind.FIELD_DEFINITION,
      description,
      name,
      arguments: args,
      type,
      directives
    });
  }
  parseArgumentDefs() {
    return this.optionalMany(
      TokenKind.PAREN_L,
      this.parseInputValueDef,
      TokenKind.PAREN_R
    );
  }
  parseInputValueDef() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseName();
    this.expectToken(TokenKind.COLON);
    const type = this.parseTypeReference();
    let defaultValue;
    if (this.expectOptionalToken(TokenKind.EQUALS)) {
      defaultValue = this.parseConstValueLiteral();
    }
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: Kind.INPUT_VALUE_DEFINITION,
      description,
      name,
      type,
      defaultValue,
      directives
    });
  }
  parseInterfaceTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("interface");
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    return this.node(start, {
      kind: Kind.INTERFACE_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields
    });
  }
  parseUnionTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("union");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const types = this.parseUnionMemberTypes();
    return this.node(start, {
      kind: Kind.UNION_TYPE_DEFINITION,
      description,
      name,
      directives,
      types
    });
  }
  parseUnionMemberTypes() {
    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
  }
  parseEnumTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("enum");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const values = this.parseEnumValuesDefinition();
    return this.node(start, {
      kind: Kind.ENUM_TYPE_DEFINITION,
      description,
      name,
      directives,
      values
    });
  }
  parseEnumValuesDefinition() {
    return this.optionalMany(
      TokenKind.BRACE_L,
      this.parseEnumValueDefinition,
      TokenKind.BRACE_R
    );
  }
  parseEnumValueDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseEnumValueName();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: Kind.ENUM_VALUE_DEFINITION,
      description,
      name,
      directives
    });
  }
  parseEnumValueName() {
    if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null") {
      throw syntaxError(
        this._lexer.source,
        this._lexer.token.start,
        `${getTokenDesc(
          this._lexer.token
        )} is reserved and cannot be used for an enum value.`
      );
    }
    return this.parseName();
  }
  parseInputObjectTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("input");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const fields = this.parseInputFieldsDefinition();
    return this.node(start, {
      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
      description,
      name,
      directives,
      fields
    });
  }
  parseInputFieldsDefinition() {
    return this.optionalMany(
      TokenKind.BRACE_L,
      this.parseInputValueDef,
      TokenKind.BRACE_R
    );
  }
  parseTypeSystemExtension() {
    const keywordToken = this._lexer.lookahead();
    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case "schema":
          return this.parseSchemaExtension();
        case "scalar":
          return this.parseScalarTypeExtension();
        case "type":
          return this.parseObjectTypeExtension();
        case "interface":
          return this.parseInterfaceTypeExtension();
        case "union":
          return this.parseUnionTypeExtension();
        case "enum":
          return this.parseEnumTypeExtension();
        case "input":
          return this.parseInputObjectTypeExtension();
      }
    }
    throw this.unexpected(keywordToken);
  }
  parseSchemaExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("schema");
    const directives = this.parseConstDirectives();
    const operationTypes = this.optionalMany(
      TokenKind.BRACE_L,
      this.parseOperationTypeDefinition,
      TokenKind.BRACE_R
    );
    if (directives.length === 0 && operationTypes.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.SCHEMA_EXTENSION,
      directives,
      operationTypes
    });
  }
  parseScalarTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("scalar");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    if (directives.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.SCALAR_TYPE_EXTENSION,
      name,
      directives
    });
  }
  parseObjectTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("type");
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.OBJECT_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields
    });
  }
  parseInterfaceTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("interface");
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.INTERFACE_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields
    });
  }
  parseUnionTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("union");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const types = this.parseUnionMemberTypes();
    if (directives.length === 0 && types.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.UNION_TYPE_EXTENSION,
      name,
      directives,
      types
    });
  }
  parseEnumTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("enum");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const values = this.parseEnumValuesDefinition();
    if (directives.length === 0 && values.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.ENUM_TYPE_EXTENSION,
      name,
      directives,
      values
    });
  }
  parseInputObjectTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("input");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const fields = this.parseInputFieldsDefinition();
    if (directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
      name,
      directives,
      fields
    });
  }
  parseDirectiveDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("directive");
    this.expectToken(TokenKind.AT);
    const name = this.parseName();
    const args = this.parseArgumentDefs();
    const repeatable = this.expectOptionalKeyword("repeatable");
    this.expectKeyword("on");
    const locations = this.parseDirectiveLocations();
    return this.node(start, {
      kind: Kind.DIRECTIVE_DEFINITION,
      description,
      name,
      arguments: args,
      repeatable,
      locations
    });
  }
  parseDirectiveLocations() {
    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
  }
  parseDirectiveLocation() {
    const start = this._lexer.token;
    const name = this.parseName();
    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {
      return name;
    }
    throw this.unexpected(start);
  }
  node(startToken, node) {
    var _this$_options2;
    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.noLocation) !== true) {
      node.loc = new Location(
        startToken,
        this._lexer.lastToken,
        this._lexer.source
      );
    }
    return node;
  }
  peek(kind) {
    return this._lexer.token.kind === kind;
  }
  expectToken(kind) {
    const token = this._lexer.token;
    if (token.kind === kind) {
      this._lexer.advance();
      return token;
    }
    throw syntaxError(
      this._lexer.source,
      token.start,
      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`
    );
  }
  expectOptionalToken(kind) {
    const token = this._lexer.token;
    if (token.kind === kind) {
      this._lexer.advance();
      return true;
    }
    return false;
  }
  expectKeyword(value) {
    const token = this._lexer.token;
    if (token.kind === TokenKind.NAME && token.value === value) {
      this._lexer.advance();
    } else {
      throw syntaxError(
        this._lexer.source,
        token.start,
        `Expected "${value}", found ${getTokenDesc(token)}.`
      );
    }
  }
  expectOptionalKeyword(value) {
    const token = this._lexer.token;
    if (token.kind === TokenKind.NAME && token.value === value) {
      this._lexer.advance();
      return true;
    }
    return false;
  }
  unexpected(atToken) {
    const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
    return syntaxError(
      this._lexer.source,
      token.start,
      `Unexpected ${getTokenDesc(token)}.`
    );
  }
  any(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    const nodes = [];
    while (!this.expectOptionalToken(closeKind)) {
      nodes.push(parseFn.call(this));
    }
    return nodes;
  }
  optionalMany(openKind, parseFn, closeKind) {
    if (this.expectOptionalToken(openKind)) {
      const nodes = [];
      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));
      return nodes;
    }
    return [];
  }
  many(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    const nodes = [];
    do {
      nodes.push(parseFn.call(this));
    } while (!this.expectOptionalToken(closeKind));
    return nodes;
  }
  delimitedMany(delimiterKind, parseFn) {
    this.expectOptionalToken(delimiterKind);
    const nodes = [];
    do {
      nodes.push(parseFn.call(this));
    } while (this.expectOptionalToken(delimiterKind));
    return nodes;
  }
}
function getTokenDesc(token) {
  const value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
}
function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? `"${kind}"` : kind;
}
function l$1(a2, b2) {
  b2.tag = a2;
  return b2;
}
function m() {
}
function p$1(a2) {
  return function(b2) {
    var c2 = a2.length;
    let d2 = false, e2 = false, f2 = false, g2 = 0;
    b2(
      l$1(0, [
        function(h2) {
          if (h2) {
            d2 = true;
          } else if (e2) {
            f2 = true;
          } else {
            for (e2 = f2 = true; f2 && !d2; ) {
              g2 < c2 ? (h2 = a2[g2], g2 = g2 + 1 | 0, f2 = false, b2(l$1(1, [h2]))) : (d2 = true, b2(0));
            }
            e2 = false;
          }
        }
      ])
    );
  };
}
function r() {
}
function t(a2) {
  a2(0);
}
function C(a2) {
  return a2(0);
}
function D(a2) {
  return function(b2) {
    return function(c2) {
      let e2 = m, f2 = false, g2 = [], h2 = false;
      b2(function(b3) {
        "number" == typeof b3 ? h2 || (h2 = true, 0 === g2.length && c2(0)) : b3.tag ? h2 || (f2 = false, function(a3) {
          function b4(a4) {
            "number" == typeof a4 ? 0 !== g2.length && (g2 = g2.filter(d2), a4 = 0 === g2.length, h2 && a4 ? c2(0) : !f2 && a4 && (f2 = true, e2(0))) : a4.tag ? 0 !== g2.length && (c2(l$1(1, [a4[0]])), k2(0)) : (k2 = a4 = a4[0], g2 = g2.concat(a4), a4(0));
          }
          function d2(a4) {
            return a4 !== k2;
          }
          let k2 = m;
          1 === a3.length ? a3(b4) : a3.bind(null, b4);
        }(a2(b3[0])), f2 || (f2 = true, e2(0))) : e2 = b3[0];
      });
      c2(
        l$1(0, [
          function(a3) {
            a3 ? (h2 || (h2 = true, e2(a3)), g2.forEach(function(c3) {
              return c3(a3);
            }), g2 = []) : (f2 || h2 ? f2 = false : (f2 = true, e2(0)), g2.forEach(C));
          }
        ])
      );
    };
  };
}
function E(a2) {
  return a2;
}
function H(a2) {
  return function(b2) {
    return function(c2) {
      let d2 = false;
      return b2(function(e2) {
        if ("number" == typeof e2) {
          d2 || (d2 = true, c2(e2));
        } else if (e2.tag) {
          d2 || (a2(e2[0]), c2(e2));
        } else {
          var g2 = e2[0];
          c2(
            l$1(0, [
              function(a3) {
                if (!d2) {
                  return a3 && (d2 = true), g2(a3);
                }
              }
            ])
          );
        }
      });
    };
  };
}
function J$1(a2) {
  a2(0);
}
function K(a2) {
  return function(b2) {
    return function(c2) {
      function d2(a3) {
        h2 && ("number" == typeof a3 ? (h2 = false, n9 ? c2(a3) : f2 || (f2 = true, e2(0))) : a3.tag ? (c2(a3), k2 ? k2 = false : g2(0)) : (g2 = a3 = a3[0], k2 = false, a3(0)));
      }
      let e2 = m, f2 = false, g2 = m, h2 = false, k2 = false, n9 = false;
      b2(function(b3) {
        "number" == typeof b3 ? n9 || (n9 = true, h2 || c2(0)) : b3.tag ? n9 || (h2 && (g2(1), g2 = m), f2 ? f2 = false : (f2 = true, e2(0)), b3 = a2(b3[0]), h2 = true, b3(d2)) : e2 = b3[0];
      });
      c2(
        l$1(0, [
          function(a3) {
            if (a3) {
              if (n9 || (n9 = true, e2(1)), h2) {
                return h2 = false, g2(1);
              }
            } else {
              n9 || f2 || (f2 = true, e2(0)), h2 && !k2 && (k2 = true, g2(0));
            }
          }
        ])
      );
    };
  };
}
function N(a2) {
  return function(b2) {
    let c2 = m, d2 = false;
    b2(function(e2) {
      "number" == typeof e2 ? d2 = true : e2.tag ? d2 || (a2(e2[0]), c2(0)) : (c2 = e2 = e2[0], e2(0));
    });
    return {
      unsubscribe: function() {
        if (!d2) {
          return d2 = true, c2(1);
        }
      }
    };
  };
}
function O() {
}
function filter$1(a2) {
  return function(b2) {
    return function(c2) {
      let d2 = m;
      return b2(function(b3) {
        "number" == typeof b3 ? c2(b3) : b3.tag ? a2(b3[0]) ? c2(b3) : d2(0) : (d2 = b3[0], c2(b3));
      });
    };
  };
}
function fromValue$1(a2) {
  return function(b2) {
    let c2 = false;
    b2(
      l$1(0, [
        function(d2) {
          d2 ? c2 = true : c2 || (c2 = true, b2(l$1(1, [a2])), b2(0));
        }
      ])
    );
  };
}
function make$1(a2) {
  return function(b2) {
    let c2 = r, d2 = false;
    c2 = a2({
      next: function(a3) {
        d2 || b2(l$1(1, [a3]));
      },
      complete: function() {
        d2 || (d2 = true, b2(0));
      }
    });
    b2(
      l$1(0, [
        function(a3) {
          if (a3 && !d2) {
            return d2 = true, c2();
          }
        }
      ])
    );
  };
}
function makeSubject$1() {
  let a2 = [], b2 = false;
  return {
    source: function(c2) {
      function b3(a3) {
        return a3 !== c2;
      }
      a2 = a2.concat(c2);
      c2(
        l$1(0, [
          function(c3) {
            c3 && (a2 = a2.filter(b3));
          }
        ])
      );
    },
    next: function(c2) {
      b2 || a2.forEach(function(a3) {
        a3(l$1(1, [c2]));
      });
    },
    complete: function() {
      b2 || (b2 = true, a2.forEach(t));
    }
  };
}
function map$1(a2) {
  return function(b2) {
    return function(c2) {
      return b2(function(b3) {
        b3 = "number" == typeof b3 ? 0 : b3.tag ? l$1(1, [a2(b3[0])]) : l$1(0, [b3[0]]);
        c2(b3);
      });
    };
  };
}
function merge$1(a2) {
  return D(E)(p$1(a2));
}
function onEnd$1(a2) {
  return function(b2) {
    return function(c2) {
      let d2 = false;
      return b2(function(b3) {
        if ("number" == typeof b3) {
          if (d2) {
            return;
          }
          d2 = true;
          c2(b3);
          return a2();
        }
        if (b3.tag) {
          d2 || c2(b3);
        } else {
          var e2 = b3[0];
          c2(
            l$1(0, [
              function(c3) {
                if (!d2) {
                  return c3 ? (d2 = true, e2(c3), a2()) : e2(c3);
                }
              }
            ])
          );
        }
      });
    };
  };
}
function onStart$1(a2) {
  return function(b2) {
    return function(c2) {
      return b2(function(b3) {
        "number" == typeof b3 ? c2(b3) : b3.tag ? c2(b3) : (c2(b3), a2());
      });
    };
  };
}
function pipe() {
  for (var a2 = arguments, b2 = arguments[0], c2 = 1, d2 = arguments.length; c2 < d2; c2++) {
    b2 = a2[c2](b2);
  }
  return b2;
}
function publish$1(a2) {
  return N(O)(a2);
}
function share$1(a2) {
  function b2(a3) {
    "number" == typeof a3 ? (c2.forEach(J$1), c2 = []) : a3.tag ? (e2 = false, c2.forEach(function(b3) {
      b3(a3);
    })) : d2 = a3[0];
  }
  let c2 = [], d2 = m, e2 = false;
  return function(f2) {
    function g2(a3) {
      return a3 !== f2;
    }
    c2 = c2.concat(f2);
    1 === c2.length && a2(b2);
    f2(
      l$1(0, [
        function(a3) {
          if (a3) {
            if (c2 = c2.filter(g2), 0 === c2.length) {
              return d2(1);
            }
          } else {
            e2 || (e2 = true, d2(a3));
          }
        }
      ])
    );
  };
}
function take$1(a2) {
  return function(b2) {
    return function(c2) {
      let d2 = false, e2 = 0, f2 = m;
      b2(function(b3) {
        "number" == typeof b3 ? d2 || (d2 = true, c2(0)) : b3.tag ? e2 < a2 && !d2 && (e2 = e2 + 1 | 0, c2(b3), !d2 && e2 >= a2 && (d2 = true, c2(0), f2(1))) : (b3 = b3[0], 0 >= a2 ? (d2 = true, c2(0), b3(1)) : f2 = b3);
      });
      c2(
        l$1(0, [
          function(b3) {
            if (!d2) {
              if (b3) {
                return d2 = true, f2(1);
              }
              if (e2 < a2) {
                return f2(0);
              }
            }
          }
        ])
      );
    };
  };
}
function takeUntil$1(a2) {
  return function(b2) {
    return function(c2) {
      function d2(a3) {
        "number" != typeof a3 && (a3.tag ? (e2 = true, f2(1), c2(0)) : (g2 = a3 = a3[0], a3(0)));
      }
      let e2 = false, f2 = m, g2 = m;
      b2(function(b3) {
        "number" == typeof b3 ? e2 || (e2 = true, g2(1), c2(0)) : b3.tag ? e2 || c2(b3) : (f2 = b3[0], a2(d2));
      });
      c2(
        l$1(0, [
          function(a3) {
            if (!e2) {
              return a3 ? (e2 = true, f2(1), g2(1)) : f2(0);
            }
          }
        ])
      );
    };
  };
}
"function" == typeof Symbol ? Symbol.observable || (Symbol.observable = Symbol("observable")) : "@@observable";
function rehydrateGraphQlError(r2) {
  if ("string" == typeof r2) {
    return new GraphQLError(r2);
  } else if ("object" == typeof r2 && r2.message) {
    return new GraphQLError(r2.message, r2.nodes, r2.source, r2.positions, r2.path, r2, r2.extensions || {});
  } else {
    return r2;
  }
}
var o = function(e2) {
  function CombinedError(r2) {
    var t2 = r2.networkError;
    var n9 = r2.response;
    var a2 = (r2.graphQLErrors || []).map(rehydrateGraphQlError);
    var o2 = function generateErrorMessage(e3, r3) {
      var t3 = "";
      if (void 0 !== e3) {
        return t3 = "[Network] " + e3.message;
      }
      if (void 0 !== r3) {
        r3.forEach(function(e4) {
          t3 += "[GraphQL] " + e4.message + "\n";
        });
      }
      return t3.trim();
    }(t2, a2);
    e2.call(this, o2);
    this.name = "CombinedError";
    this.message = o2;
    this.graphQLErrors = a2;
    this.networkError = t2;
    this.response = n9;
  }
  if (e2) {
    CombinedError.__proto__ = e2;
  }
  (CombinedError.prototype = Object.create(e2 && e2.prototype)).constructor = CombinedError;
  CombinedError.prototype.toString = function toString() {
    return this.message;
  };
  return CombinedError;
}(Error);
function phash(e2, r2) {
  e2 |= 0;
  for (var t2 = 0, n9 = 0 | r2.length; t2 < n9; t2++) {
    e2 = (e2 << 5) + e2 + r2.charCodeAt(t2);
  }
  return e2;
}
function hash(e2) {
  return phash(5381, e2) >>> 0;
}
var i = /* @__PURE__ */ new Set();
var s = /* @__PURE__ */ new WeakMap();
function stringify(e2) {
  if (null === e2 || i.has(e2)) {
    return "null";
  } else if ("object" != typeof e2) {
    return JSON.stringify(e2) || "";
  } else if (e2.toJSON) {
    return stringify(e2.toJSON());
  } else if (Array.isArray(e2)) {
    var r2 = "[";
    for (var t2 = 0, n9 = e2.length; t2 < n9; t2++) {
      if (t2 > 0) {
        r2 += ",";
      }
      var a2 = stringify(e2[t2]);
      r2 += a2.length > 0 ? a2 : "null";
    }
    return r2 += "]";
  }
  var o2 = Object.keys(e2).sort();
  if (!o2.length && e2.constructor && e2.constructor !== Object) {
    var u2 = s.get(e2) || Math.random().toString(36).slice(2);
    s.set(e2, u2);
    return '{"__key":"' + u2 + '"}';
  }
  i.add(e2);
  var f2 = "{";
  for (var c2 = 0, l2 = o2.length; c2 < l2; c2++) {
    var p2 = o2[c2];
    var h2 = stringify(e2[p2]);
    if (h2) {
      if (f2.length > 1) {
        f2 += ",";
      }
      f2 += stringify(p2) + ":" + h2;
    }
  }
  i.delete(e2);
  return f2 += "}";
}
function stringifyVariables(e2) {
  i.clear();
  return stringify(e2);
}
var u = /("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g;
var f = /([\s,]|#[^\n\r]+)+/g;
function replaceOutsideStrings(e2, r2) {
  return r2 % 2 == 0 ? e2.replace(f, " ").trim() : e2;
}
function stringifyDocument(e2) {
  var r2 = ("string" != typeof e2 ? e2.loc && e2.loc.source.body || print(e2) : e2).split(u).map(replaceOutsideStrings).join("");
  if ("string" != typeof e2) {
    var t2 = "definitions" in e2 && getOperationName(e2);
    if (t2) {
      r2 = "# " + t2 + "\n" + r2;
    }
    if (!e2.loc) {
      e2.loc = {
        start: 0,
        end: r2.length,
        source: {
          body: r2,
          name: "gql",
          locationOffset: {
            line: 1,
            column: 1
          }
        }
      };
    }
  }
  return r2;
}
var c = /* @__PURE__ */ new Map();
function keyDocument(e2) {
  var r2;
  var n9;
  if ("string" == typeof e2) {
    r2 = hash(stringifyDocument(e2));
    n9 = c.get(r2) || parse(e2, {
      noLocation: true
    });
  } else {
    r2 = e2.__key || hash(stringifyDocument(e2));
    n9 = c.get(r2) || e2;
  }
  if (!n9.loc) {
    stringifyDocument(n9);
  }
  n9.__key = r2;
  c.set(r2, n9);
  return n9;
}
function createRequest(e2, r2) {
  if (!r2) {
    r2 = {};
  }
  var t2 = keyDocument(e2);
  return {
    key: phash(t2.__key, stringifyVariables(r2)) >>> 0,
    query: t2,
    variables: r2
  };
}
function getOperationName(e2) {
  for (var t2 = 0, n9 = e2.definitions.length; t2 < n9; t2++) {
    var a2 = e2.definitions[t2];
    if (a2.kind === Kind.OPERATION_DEFINITION && a2.name) {
      return a2.name.value;
    }
  }
}
function getOperationType(e2) {
  for (var t2 = 0, n9 = e2.definitions.length; t2 < n9; t2++) {
    var a2 = e2.definitions[t2];
    if (a2.kind === Kind.OPERATION_DEFINITION) {
      return a2.operation;
    }
  }
}
function _extends() {
  return (_extends = Object.assign || function(e2) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = arguments[r2];
      for (var n9 in t2) {
        if (Object.prototype.hasOwnProperty.call(t2, n9)) {
          e2[n9] = t2[n9];
        }
      }
    }
    return e2;
  }).apply(this, arguments);
}
function makeResult(e2, r2, t2) {
  if (!("data" in r2) && !("errors" in r2) || "path" in r2) {
    throw new Error("No Content");
  }
  return {
    operation: e2,
    data: r2.data,
    error: Array.isArray(r2.errors) ? new o({
      graphQLErrors: r2.errors,
      response: t2
    }) : void 0,
    extensions: "object" == typeof r2.extensions && r2.extensions || void 0,
    hasNext: !!r2.hasNext
  };
}
function mergeResultPatch(e2, r2, t2) {
  var n9 = _extends({}, e2);
  n9.hasNext = !!r2.hasNext;
  if (!("path" in r2)) {
    if ("data" in r2) {
      n9.data = r2.data;
    }
    return n9;
  }
  if (Array.isArray(r2.errors)) {
    n9.error = new o({
      graphQLErrors: n9.error ? n9.error.graphQLErrors.concat(r2.errors) : r2.errors,
      response: t2
    });
  }
  var a2 = n9.data = _extends({}, n9.data);
  var i2 = 0;
  var s4;
  while (i2 < r2.path.length) {
    a2 = a2[s4 = r2.path[i2++]] = Array.isArray(a2[s4]) ? [].concat(a2[s4]) : _extends({}, a2[s4]);
  }
  _extends(a2, r2.data);
  return n9;
}
function makeErrorResult(e2, r2, t2) {
  return {
    operation: e2,
    data: void 0,
    error: new o({
      networkError: r2,
      response: t2
    }),
    extensions: void 0
  };
}
function shouldUseGet(e2) {
  return "query" === e2.kind && !!e2.context.preferGetMethod;
}
function makeFetchBody(e2) {
  return {
    query: print(e2.query),
    operationName: getOperationName(e2.query),
    variables: e2.variables || void 0,
    extensions: void 0
  };
}
function makeFetchURL(e2, r2) {
  var t2 = shouldUseGet(e2);
  var n9 = e2.context.url;
  if (!t2 || !r2) {
    return n9;
  }
  var a2 = [];
  if (r2.operationName) {
    a2.push("operationName=" + encodeURIComponent(r2.operationName));
  }
  if (r2.query) {
    a2.push("query=" + encodeURIComponent(r2.query.replace(/#[^\n\r]+/g, " ").trim()));
  }
  if (r2.variables) {
    a2.push("variables=" + encodeURIComponent(stringifyVariables(r2.variables)));
  }
  if (r2.extensions) {
    a2.push("extensions=" + encodeURIComponent(stringifyVariables(r2.extensions)));
  }
  var o2 = n9 + "?" + a2.join("&");
  if (o2.length > 2047) {
    e2.context.preferGetMethod = false;
    return n9;
  }
  return o2;
}
function makeFetchOptions(e2, r2) {
  var t2 = shouldUseGet(e2);
  var n9 = {
    accept: "application/graphql+json, application/json"
  };
  if (!t2) {
    n9["content-type"] = "application/json";
  }
  var a2 = ("function" == typeof e2.context.fetchOptions ? e2.context.fetchOptions() : e2.context.fetchOptions) || {};
  if (a2.headers) {
    for (var o2 in a2.headers) {
      n9[o2.toLowerCase()] = a2.headers[o2];
    }
  }
  return _extends({}, a2, {
    body: !t2 && r2 ? JSON.stringify(r2) : void 0,
    method: t2 ? "GET" : "POST",
    headers: n9
  });
}
var l = "undefined" != typeof Symbol ? Symbol.asyncIterator : null;
var p = "undefined" != typeof TextDecoder ? new TextDecoder() : null;
var h = /content-type:[^\r\n]*application\/json/i;
var d = /boundary="?([^=";]+)"?/i;
function makeFetchSource(e2, r2, t2) {
  var n9 = "manual" === t2.redirect ? 400 : 300;
  var o2 = e2.context.fetch;
  return make$1(function(a2) {
    var i2 = a2.next;
    var s4 = a2.complete;
    var u2 = "undefined" != typeof AbortController ? new AbortController() : null;
    if (u2) {
      t2.signal = u2.signal;
    }
    var f2 = false;
    function executeIncrementalFetch(e3, r3, t3) {
      var n10 = t3.headers && t3.headers.get("Content-Type") || "";
      if (/text\//i.test(n10)) {
        return t3.text().then(function(n11) {
          e3(makeErrorResult(r3, new Error(n11), t3));
        });
      } else if (!/multipart\/mixed/i.test(n10)) {
        return t3.text().then(function(n11) {
          e3(makeResult(r3, JSON.parse(n11), t3));
        });
      }
      var a3 = "---";
      var o3 = n10.match(d);
      if (o3) {
        a3 = "--" + o3[1];
      }
      var i3;
      var cancel = function() {
      };
      if (l && t3[l]) {
        var s5 = t3[l]();
        i3 = s5.next.bind(s5);
      } else if ("body" in t3 && t3.body) {
        var u3 = t3.body.getReader();
        cancel = u3.cancel.bind(u3);
        i3 = u3.read.bind(u3);
      } else {
        throw new TypeError("Streaming requests unsupported");
      }
      var c3 = "";
      var v3 = true;
      var m3 = null;
      var g2 = null;
      return i3().then(function next(n11) {
        if (!n11.done) {
          var o4 = function toString(e4) {
            return "Buffer" === e4.constructor.name ? e4.toString() : p.decode(e4);
          }(n11.value);
          var s6 = o4.indexOf(a3);
          if (s6 > -1) {
            s6 += c3.length;
          } else {
            s6 = c3.indexOf(a3);
          }
          c3 += o4;
          while (s6 > -1) {
            var u4 = c3.slice(0, s6);
            var l2 = c3.slice(s6 + a3.length);
            if (v3) {
              v3 = false;
            } else {
              var d2 = u4.indexOf("\r\n\r\n") + 4;
              var y2 = u4.slice(0, d2);
              var x2 = u4.slice(d2, u4.lastIndexOf("\r\n"));
              var b2 = void 0;
              if (h.test(y2)) {
                try {
                  b2 = JSON.parse(x2);
                  m3 = g2 = g2 ? mergeResultPatch(g2, b2, t3) : makeResult(r3, b2, t3);
                } catch (e4) {
                }
              }
              if ("--" === l2.slice(0, 2) || b2 && !b2.hasNext) {
                if (!g2) {
                  return e3(makeResult(r3, {}, t3));
                }
                break;
              }
            }
            s6 = (c3 = l2).indexOf(a3);
          }
        } else {
          f2 = true;
        }
        if (m3) {
          e3(m3);
          m3 = null;
        }
        if (!n11.done && (!g2 || g2.hasNext)) {
          return i3().then(next);
        }
      }).finally(cancel);
    }
    var c2 = false;
    var v2 = false;
    var m2;
    Promise.resolve().then(function() {
      if (c2) {
        return;
      }
      return (o2 || fetch)(r2, t2);
    }).then(function(r3) {
      if (!r3) {
        return;
      }
      v2 = (m2 = r3).status < 200 || m2.status >= n9;
      return executeIncrementalFetch(i2, e2, m2);
    }).then(s4).catch(function(r3) {
      if (f2) {
        throw r3;
      }
      var t3 = makeErrorResult(e2, v2 ? m2.statusText ? new Error(m2.statusText) : r3 : r3, m2);
      i2(t3);
      s4();
    });
    return function() {
      c2 = true;
      if (u2) {
        u2.abort();
      }
    };
  });
}
function collectTypes(e2, n9) {
  if (Array.isArray(e2)) {
    for (var r2 = 0; r2 < e2.length; r2++) {
      collectTypes(e2[r2], n9);
    }
  } else if ("object" == typeof e2 && null !== e2) {
    for (var t2 in e2) {
      if ("__typename" === t2 && "string" == typeof e2[t2]) {
        n9[e2[t2]] = 0;
      } else {
        collectTypes(e2[t2], n9);
      }
    }
  }
  return n9;
}
function collectTypesFromResponse(e2) {
  return Object.keys(collectTypes(e2, {}));
}
var formatNode = function(e2) {
  if (e2.selectionSet && !e2.selectionSet.selections.some(function(e3) {
    return e3.kind === Kind.FIELD && "__typename" === e3.name.value && !e3.alias;
  })) {
    return _extends({}, e2, {
      selectionSet: _extends({}, e2.selectionSet, {
        selections: e2.selectionSet.selections.concat([{
          kind: Kind.FIELD,
          name: {
            kind: Kind.NAME,
            value: "__typename"
          }
        }])
      })
    });
  }
};
var F = /* @__PURE__ */ new Map();
function formatDocument(n9) {
  var r2 = keyDocument(n9);
  var a2 = F.get(r2.__key);
  if (!a2) {
    a2 = visit(r2, {
      Field: formatNode,
      InlineFragment: formatNode
    });
    Object.defineProperty(a2, "__key", {
      value: r2.__key,
      enumerable: false
    });
    F.set(r2.__key, a2);
  }
  return a2;
}
function maskTypename(e2) {
  if (!e2 || "object" != typeof e2) {
    return e2;
  }
  return Object.keys(e2).reduce(function(n9, r2) {
    var t2 = e2[r2];
    if ("__typename" === r2) {
      Object.defineProperty(n9, "__typename", {
        enumerable: false,
        value: t2
      });
    } else if (Array.isArray(t2)) {
      n9[r2] = t2.map(maskTypename);
    } else if (t2 && "object" == typeof t2 && "__typename" in t2) {
      n9[r2] = maskTypename(t2);
    } else {
      n9[r2] = t2;
    }
    return n9;
  }, Array.isArray(e2) ? [] : {});
}
function withPromise(e2) {
  e2.toPromise = function() {
    return new Promise(function(n9) {
      var r2 = N(function(e3) {
        if (!e3.stale && !e3.hasNext) {
          Promise.resolve().then(function() {
            r2.unsubscribe();
            n9(e3);
          });
        }
      })(e2);
    });
  };
  return e2;
}
function makeOperation(e2, n9, r2) {
  if (!r2) {
    r2 = n9.context;
  }
  return {
    key: n9.key,
    query: n9.query,
    variables: n9.variables,
    kind: e2,
    context: r2
  };
}
function addMetadata(e2, n9) {
  return makeOperation(e2.kind, e2, _extends({}, e2.context, {
    meta: _extends({}, e2.context.meta, n9)
  }));
}
function noop() {
}
function shouldSkip(e2) {
  var n9 = e2.kind;
  return "mutation" !== n9 && "query" !== n9;
}
function cacheExchange(e2) {
  var n9 = e2.forward;
  var r2 = e2.client;
  e2.dispatchDebug;
  var a2 = /* @__PURE__ */ new Map();
  var i2 = /* @__PURE__ */ Object.create(null);
  function mapTypeNames(e3) {
    var n10 = makeOperation(e3.kind, e3);
    n10.query = formatDocument(e3.query);
    return n10;
  }
  function isOperationCached(e3) {
    var n10 = e3.context.requestPolicy;
    return "query" === e3.kind && "network-only" !== n10 && ("cache-only" === n10 || a2.has(e3.key));
  }
  return function(e3) {
    var u2 = share$1(e3);
    var c2 = map$1(function(e4) {
      var n10 = a2.get(e4.key);
      var i3 = _extends({}, n10, {
        operation: addMetadata(e4, {
          cacheOutcome: n10 ? "hit" : "miss"
        })
      });
      if ("cache-and-network" === e4.context.requestPolicy) {
        i3.stale = true;
        reexecuteOperation(r2, e4);
      }
      return i3;
    })(filter$1(function(e4) {
      return !shouldSkip(e4) && isOperationCached(e4);
    })(u2));
    var s4 = H(function(e4) {
      var n10 = e4.operation;
      if (!n10) {
        return;
      }
      var o2 = collectTypesFromResponse(e4.data).concat(n10.context.additionalTypenames || []);
      if ("mutation" === e4.operation.kind) {
        var u3 = /* @__PURE__ */ new Set();
        for (var c3 = 0; c3 < o2.length; c3++) {
          var s5 = o2[c3];
          var f2 = i2[s5] || (i2[s5] = /* @__PURE__ */ new Set());
          f2.forEach(function(e5) {
            u3.add(e5);
          });
          f2.clear();
        }
        u3.forEach(function(e5) {
          if (a2.has(e5)) {
            n10 = a2.get(e5).operation;
            a2.delete(e5);
            reexecuteOperation(r2, n10);
          }
        });
      } else if ("query" === n10.kind && e4.data) {
        a2.set(n10.key, e4);
        for (var p2 = 0; p2 < o2.length; p2++) {
          var l2 = o2[p2];
          (i2[l2] || (i2[l2] = /* @__PURE__ */ new Set())).add(n10.key);
        }
      }
    })(n9(filter$1(function(e4) {
      return "query" !== e4.kind || "cache-only" !== e4.context.requestPolicy;
    })(map$1(function(e4) {
      return addMetadata(e4, {
        cacheOutcome: "miss"
      });
    })(merge$1([map$1(mapTypeNames)(filter$1(function(e4) {
      return !shouldSkip(e4) && !isOperationCached(e4);
    })(u2)), filter$1(function(e4) {
      return shouldSkip(e4);
    })(u2)])))));
    return merge$1([c2, s4]);
  };
}
function reexecuteOperation(e2, n9) {
  return e2.reexecuteOperation(makeOperation(n9.kind, n9, _extends({}, n9.context, {
    requestPolicy: "network-only"
  })));
}
function subscriptionExchange(e2) {
  var n9 = e2.forwardSubscription;
  var t2 = e2.enableAllOperations;
  return function(e3) {
    var a2 = e3.client;
    var i2 = e3.forward;
    function isSubscriptionOperation(e4) {
      var n10 = e4.kind;
      return "subscription" === n10 || !!t2 && ("query" === n10 || "mutation" === n10);
    }
    return function(e4) {
      var t3 = share$1(e4);
      var u2 = D(function(e5) {
        var i3 = e5.key;
        var u3 = filter$1(function(e6) {
          return "teardown" === e6.kind && e6.key === i3;
        })(t3);
        return takeUntil$1(u3)(function createSubscriptionSource(e6) {
          var t4 = n9({
            key: e6.key.toString(36),
            query: print(e6.query),
            variables: e6.variables,
            context: _extends({}, e6.context)
          });
          return make$1(function(n10) {
            var r2 = n10.next;
            var o2 = n10.complete;
            var i4 = false;
            var u4;
            Promise.resolve().then(function() {
              if (i4) {
                return;
              }
              u4 = t4.subscribe({
                next: function(n11) {
                  return r2(makeResult(e6, n11));
                },
                error: function(n11) {
                  return r2(makeErrorResult(e6, n11));
                },
                complete: function() {
                  if (!i4) {
                    i4 = true;
                    if ("subscription" === e6.kind) {
                      a2.reexecuteOperation(makeOperation("teardown", e6, e6.context));
                    }
                    o2();
                  }
                }
              });
            });
            return function() {
              i4 = true;
              if (u4) {
                u4.unsubscribe();
              }
            };
          });
        }(e5));
      })(filter$1(isSubscriptionOperation)(t3));
      var c2 = i2(filter$1(function(e5) {
        return !isSubscriptionOperation(e5);
      })(t3));
      return merge$1([u2, c2]);
    };
  };
}
function dedupExchange(e2) {
  var n9 = e2.forward;
  e2.dispatchDebug;
  var t2 = /* @__PURE__ */ new Set();
  function filterIncomingOperation(e3) {
    var n10 = e3.key;
    var a2 = e3.kind;
    if ("teardown" === a2) {
      t2.delete(n10);
      return true;
    }
    if ("query" !== a2 && "subscription" !== a2) {
      return true;
    }
    var o2 = t2.has(n10);
    t2.add(n10);
    return !o2;
  }
  function afterOperationResult(e3) {
    if (!e3.hasNext) {
      t2.delete(e3.operation.key);
    }
  }
  return function(e3) {
    var r2 = filter$1(filterIncomingOperation)(e3);
    return H(afterOperationResult)(n9(r2));
  };
}
function fetchExchange(e2) {
  var n9 = e2.forward;
  e2.dispatchDebug;
  return function(e3) {
    var t2 = share$1(e3);
    var a2 = D(function(e4) {
      var n10 = e4.key;
      var a3 = filter$1(function(e5) {
        return "teardown" === e5.kind && e5.key === n10;
      })(t2);
      var o3 = makeFetchBody(e4);
      var i2 = makeFetchURL(e4, o3);
      var u2 = makeFetchOptions(e4, o3);
      return H(function(n11) {
        !n11.data ? n11.error : void 0;
      })(takeUntil$1(a3)(makeFetchSource(e4, i2, u2)));
    })(filter$1(function(e4) {
      return "query" === e4.kind || "mutation" === e4.kind;
    })(t2));
    var o2 = n9(filter$1(function(e4) {
      return "query" !== e4.kind && "mutation" !== e4.kind;
    })(t2));
    return merge$1([a2, o2]);
  };
}
function fallbackExchange(e2) {
  e2.dispatchDebug;
  return function(e3) {
    return filter$1(function() {
      return false;
    })(H(function(e4) {
      if ("teardown" !== e4.kind && false) {
        var r2 = 'No exchange has handled operations of kind "' + e4.kind + `". Check whether you've added an exchange responsible for these operations.`;
        console.warn(r2);
      }
    })(e3));
  };
}
fallbackExchange({
  dispatchDebug: noop
});
function composeExchanges(e2) {
  return function(n9) {
    var r2 = n9.client;
    n9.dispatchDebug;
    return e2.reduceRight(function(e3, n10) {
      return n10({
        client: r2,
        forward: e3,
        dispatchDebug: function dispatchDebug$1(e4) {
        }
      });
    }, n9.forward);
  };
}
var L = [dedupExchange, cacheExchange, fetchExchange];
var J = function Client(e2) {
  var n9 = /* @__PURE__ */ new Map();
  var r2 = /* @__PURE__ */ new Map();
  var t2 = [];
  var a2 = makeSubject$1();
  var i2 = a2.source;
  var u2 = a2.next;
  var c2 = false;
  function dispatchOperation(e3) {
    c2 = true;
    if (e3) {
      u2(e3);
    }
    while (e3 = t2.shift()) {
      u2(e3);
    }
    c2 = false;
  }
  function makeResultSource(e3) {
    var a3 = filter$1(function(n10) {
      return n10.operation.kind === e3.kind && n10.operation.key === e3.key && (!n10.operation.context._instance || n10.operation.context._instance === e3.context._instance);
    })(y2);
    if (f2.maskTypename) {
      a3 = map$1(function(e4) {
        return _extends({}, e4, {
          data: maskTypename(e4.data)
        });
      })(a3);
    }
    if ("mutation" === e3.kind) {
      return take$1(1)(onStart$1(function() {
        return dispatchOperation(e3);
      })(a3));
    }
    return share$1(onEnd$1(function() {
      n9.delete(e3.key);
      r2.delete(e3.key);
      for (var a4 = t2.length - 1; a4 >= 0; a4--) {
        if (t2[a4].key === e3.key) {
          t2.splice(a4, 1);
        }
      }
      dispatchOperation(makeOperation("teardown", e3, e3.context));
    })(H(function(r3) {
      n9.set(e3.key, r3);
    })(K(function(n10) {
      if ("query" !== e3.kind || n10.stale) {
        return fromValue$1(n10);
      }
      return merge$1([fromValue$1(n10), map$1(function() {
        return _extends({}, n10, {
          stale: true
        });
      })(take$1(1)(filter$1(function(n11) {
        return "query" === n11.kind && n11.key === e3.key && "cache-only" !== n11.context.requestPolicy;
      })(i2)))]);
    })(takeUntil$1(filter$1(function(n10) {
      return "teardown" === n10.kind && n10.key === e3.key;
    })(i2))(a3)))));
  }
  var s4 = this instanceof Client ? this : Object.create(Client.prototype);
  var f2 = _extends(s4, {
    url: e2.url,
    fetchOptions: e2.fetchOptions,
    fetch: e2.fetch,
    suspense: !!e2.suspense,
    requestPolicy: e2.requestPolicy || "cache-first",
    preferGetMethod: !!e2.preferGetMethod,
    maskTypename: !!e2.maskTypename,
    operations$: i2,
    reexecuteOperation: function reexecuteOperation2(e3) {
      if ("mutation" === e3.kind || r2.has(e3.key)) {
        t2.push(e3);
        if (!c2) {
          Promise.resolve().then(dispatchOperation);
        }
      }
    },
    createOperationContext: function createOperationContext(e3) {
      if (!e3) {
        e3 = {};
      }
      return _extends({}, {
        _instance: void 0,
        url: f2.url,
        fetchOptions: f2.fetchOptions,
        fetch: f2.fetch,
        preferGetMethod: f2.preferGetMethod
      }, e3, {
        suspense: e3.suspense || false !== e3.suspense && f2.suspense,
        requestPolicy: e3.requestPolicy || f2.requestPolicy
      });
    },
    createRequestOperation: function createRequestOperation(e3, n10, r3) {
      getOperationType(n10.query);
      var a3 = f2.createOperationContext(r3);
      if ("mutation" === e3) {
        a3._instance = [];
      }
      return makeOperation(e3, n10, a3);
    },
    executeRequestOperation: function executeRequestOperation(e3) {
      if ("mutation" === e3.kind) {
        return makeResultSource(e3);
      }
      return make$1(function(t3) {
        var a3 = r2.get(e3.key);
        if (!a3) {
          r2.set(e3.key, a3 = makeResultSource(e3));
        }
        var i3 = "cache-and-network" === e3.context.requestPolicy || "network-only" === e3.context.requestPolicy;
        return N(t3.next)(onEnd$1(t3.complete)(onStart$1(function() {
          var r3 = n9.get(e3.key);
          if ("subscription" === e3.kind) {
            return dispatchOperation(e3);
          } else if (i3) {
            dispatchOperation(e3);
          }
          if (null != r3 && r3 === n9.get(e3.key)) {
            t3.next(i3 ? _extends({}, r3, {
              stale: true
            }) : r3);
          } else if (!i3) {
            dispatchOperation(e3);
          }
        })(a3))).unsubscribe;
      });
    },
    executeQuery: function executeQuery(e3, n10) {
      var r3 = f2.createRequestOperation("query", e3, n10);
      return f2.executeRequestOperation(r3);
    },
    executeSubscription: function executeSubscription(e3, n10) {
      var r3 = f2.createRequestOperation("subscription", e3, n10);
      return f2.executeRequestOperation(r3);
    },
    executeMutation: function executeMutation(e3, n10) {
      var r3 = f2.createRequestOperation("mutation", e3, n10);
      return f2.executeRequestOperation(r3);
    },
    query: function query(e3, n10, r3) {
      if (!r3 || "boolean" != typeof r3.suspense) {
        r3 = _extends({}, r3, {
          suspense: false
        });
      }
      return withPromise(f2.executeQuery(createRequest(e3, n10), r3));
    },
    readQuery: function readQuery(e3, n10, r3) {
      var t3 = null;
      N(function(e4) {
        t3 = e4;
      })(f2.query(e3, n10, r3)).unsubscribe();
      return t3;
    },
    subscription: function subscription(e3, n10, r3) {
      return f2.executeSubscription(createRequest(e3, n10), r3);
    },
    mutation: function mutation(e3, n10, r3) {
      return withPromise(f2.executeMutation(createRequest(e3, n10), r3));
    }
  });
  var p2 = noop;
  var h2 = composeExchanges(void 0 !== e2.exchanges ? e2.exchanges : L);
  var y2 = share$1(h2({
    client: f2,
    dispatchDebug: p2,
    forward: fallbackExchange({
      dispatchDebug: p2
    })
  })(i2));
  publish$1(y2);
  return f2;
};
var W = J;
function extendedTypeof(val) {
  if (val === null) {
    return "null";
  }
  if (Array.isArray(val)) {
    return "array";
  }
  return typeof val;
}
function isObject(val) {
  return extendedTypeof(val) === "object";
}
function areGraphQLErrors(obj) {
  return Array.isArray(obj) && obj.length > 0 && obj.every((ob2) => "message" in ob2);
}
function limitCloseReason(reason, whenTooLong) {
  return reason.length < 124 ? reason : whenTooLong;
}
const GRAPHQL_TRANSPORT_WS_PROTOCOL = "graphql-transport-ws";
var CloseCode;
(function(CloseCode2) {
  CloseCode2[CloseCode2["InternalServerError"] = 4500] = "InternalServerError";
  CloseCode2[CloseCode2["InternalClientError"] = 4005] = "InternalClientError";
  CloseCode2[CloseCode2["BadRequest"] = 4400] = "BadRequest";
  CloseCode2[CloseCode2["BadResponse"] = 4004] = "BadResponse";
  CloseCode2[CloseCode2["Unauthorized"] = 4401] = "Unauthorized";
  CloseCode2[CloseCode2["Forbidden"] = 4403] = "Forbidden";
  CloseCode2[CloseCode2["SubprotocolNotAcceptable"] = 4406] = "SubprotocolNotAcceptable";
  CloseCode2[CloseCode2["ConnectionInitialisationTimeout"] = 4408] = "ConnectionInitialisationTimeout";
  CloseCode2[CloseCode2["ConnectionAcknowledgementTimeout"] = 4504] = "ConnectionAcknowledgementTimeout";
  CloseCode2[CloseCode2["SubscriberAlreadyExists"] = 4409] = "SubscriberAlreadyExists";
  CloseCode2[CloseCode2["TooManyInitialisationRequests"] = 4429] = "TooManyInitialisationRequests";
})(CloseCode || (CloseCode = {}));
var MessageType;
(function(MessageType2) {
  MessageType2["ConnectionInit"] = "connection_init";
  MessageType2["ConnectionAck"] = "connection_ack";
  MessageType2["Ping"] = "ping";
  MessageType2["Pong"] = "pong";
  MessageType2["Subscribe"] = "subscribe";
  MessageType2["Next"] = "next";
  MessageType2["Error"] = "error";
  MessageType2["Complete"] = "complete";
})(MessageType || (MessageType = {}));
function validateMessage(val) {
  if (!isObject(val)) {
    throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);
  }
  if (!val.type) {
    throw new Error(`Message is missing the 'type' property`);
  }
  if (typeof val.type !== "string") {
    throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);
  }
  switch (val.type) {
    case MessageType.ConnectionInit:
    case MessageType.ConnectionAck:
    case MessageType.Ping:
    case MessageType.Pong: {
      if ("payload" in val && !isObject(val.payload)) {
        throw new Error(`"${val.type}" message expects the 'payload' property to be an object or missing, but got "${val.payload}"`);
      }
      break;
    }
    case MessageType.Subscribe: {
      if (typeof val.id !== "string") {
        throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
      }
      if (!val.id) {
        throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
      }
      if (!isObject(val.payload)) {
        throw new Error(`"${val.type}" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);
      }
      if (typeof val.payload.query !== "string") {
        throw new Error(`"${val.type}" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);
      }
      if (val.payload.variables != null && !isObject(val.payload.variables)) {
        throw new Error(`"${val.type}" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);
      }
      if (val.payload.operationName != null && extendedTypeof(val.payload.operationName) !== "string") {
        throw new Error(`"${val.type}" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);
      }
      if (val.payload.extensions != null && !isObject(val.payload.extensions)) {
        throw new Error(`"${val.type}" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);
      }
      break;
    }
    case MessageType.Next: {
      if (typeof val.id !== "string") {
        throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
      }
      if (!val.id) {
        throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
      }
      if (!isObject(val.payload)) {
        throw new Error(`"${val.type}" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);
      }
      break;
    }
    case MessageType.Error: {
      if (typeof val.id !== "string") {
        throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
      }
      if (!val.id) {
        throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
      }
      if (!areGraphQLErrors(val.payload)) {
        throw new Error(`"${val.type}" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);
      }
      break;
    }
    case MessageType.Complete: {
      if (typeof val.id !== "string") {
        throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
      }
      if (!val.id) {
        throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
      }
      break;
    }
    default:
      throw new Error(`Invalid message 'type' property "${val.type}"`);
  }
  return val;
}
function parseMessage(data, reviver) {
  try {
    return validateMessage(data);
  } catch (_a) {
    if (typeof data !== "string") {
      throw new Error("Only strings are parsable messages");
    }
    const message = JSON.parse(data, reviver);
    return validateMessage(message);
  }
}
function stringifyMessage(msg, replacer) {
  validateMessage(msg);
  return JSON.stringify(msg, replacer);
}
function createClient(options) {
  const {
    url,
    connectionParams,
    lazy = true,
    onNonLazyError = console.error,
    lazyCloseTimeout = 0,
    keepAlive = 0,
    disablePong,
    connectionAckWaitTimeout = 0,
    retryAttempts = 5,
    retryWait = async function randomisedExponentialBackoff(retries2) {
      let retryDelay = 1e3;
      for (let i2 = 0; i2 < retries2; i2++) {
        retryDelay *= 2;
      }
      await new Promise((resolve) => setTimeout(resolve, retryDelay + Math.floor(Math.random() * (3e3 - 300) + 300)));
    },
    shouldRetry = isLikeCloseEvent,
    isFatalConnectionProblem,
    on: on2,
    webSocketImpl,
    generateID = function generateUUID() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c2) => {
        const r2 = Math.random() * 16 | 0, v2 = c2 == "x" ? r2 : r2 & 3 | 8;
        return v2.toString(16);
      });
    },
    jsonMessageReplacer: replacer,
    jsonMessageReviver: reviver
  } = options;
  let ws2;
  if (webSocketImpl) {
    if (!isWebSocket(webSocketImpl)) {
      throw new Error("Invalid WebSocket implementation provided");
    }
    ws2 = webSocketImpl;
  } else if (typeof WebSocket !== "undefined") {
    ws2 = WebSocket;
  } else if (typeof global !== "undefined") {
    ws2 = global.WebSocket || global.MozWebSocket;
  } else if (typeof window !== "undefined") {
    ws2 = window.WebSocket || window.MozWebSocket;
  }
  if (!ws2)
    throw new Error("WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`");
  const WebSocketImpl = ws2;
  const emitter = (() => {
    const message = (() => {
      const listeners3 = {};
      return {
        on(id2, listener) {
          listeners3[id2] = listener;
          return () => {
            delete listeners3[id2];
          };
        },
        emit(message2) {
          var _a;
          if ("id" in message2)
            (_a = listeners3[message2.id]) === null || _a === void 0 ? void 0 : _a.call(listeners3, message2);
        }
      };
    })();
    const listeners2 = {
      connecting: (on2 === null || on2 === void 0 ? void 0 : on2.connecting) ? [on2.connecting] : [],
      opened: (on2 === null || on2 === void 0 ? void 0 : on2.opened) ? [on2.opened] : [],
      connected: (on2 === null || on2 === void 0 ? void 0 : on2.connected) ? [on2.connected] : [],
      ping: (on2 === null || on2 === void 0 ? void 0 : on2.ping) ? [on2.ping] : [],
      pong: (on2 === null || on2 === void 0 ? void 0 : on2.pong) ? [on2.pong] : [],
      message: (on2 === null || on2 === void 0 ? void 0 : on2.message) ? [message.emit, on2.message] : [message.emit],
      closed: (on2 === null || on2 === void 0 ? void 0 : on2.closed) ? [on2.closed] : [],
      error: (on2 === null || on2 === void 0 ? void 0 : on2.error) ? [on2.error] : []
    };
    return {
      onMessage: message.on,
      on(event, listener) {
        const l2 = listeners2[event];
        l2.push(listener);
        return () => {
          l2.splice(l2.indexOf(listener), 1);
        };
      },
      emit(event, ...args) {
        for (const listener of [...listeners2[event]]) {
          listener(...args);
        }
      }
    };
  })();
  function errorOrClosed(cb2) {
    const listening = [
      emitter.on("error", (err) => {
        listening.forEach((unlisten) => unlisten());
        cb2(err);
      }),
      emitter.on("closed", (event) => {
        listening.forEach((unlisten) => unlisten());
        cb2(event);
      })
    ];
  }
  let connecting, locks = 0, retrying = false, retries = 0, disposed = false;
  async function connect() {
    const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : connecting = new Promise((connected, denied) => (async () => {
      if (retrying) {
        await retryWait(retries);
        if (!locks) {
          connecting = void 0;
          return denied({ code: 1e3, reason: "All Subscriptions Gone" });
        }
        retries++;
      }
      emitter.emit("connecting");
      const socket2 = new WebSocketImpl(typeof url === "function" ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);
      let connectionAckTimeout, queuedPing;
      function enqueuePing() {
        if (isFinite(keepAlive) && keepAlive > 0) {
          clearTimeout(queuedPing);
          queuedPing = setTimeout(() => {
            if (socket2.readyState === WebSocketImpl.OPEN) {
              socket2.send(stringifyMessage({ type: MessageType.Ping }));
              emitter.emit("ping", false, void 0);
            }
          }, keepAlive);
        }
      }
      errorOrClosed((errOrEvent) => {
        connecting = void 0;
        clearTimeout(connectionAckTimeout);
        clearTimeout(queuedPing);
        denied(errOrEvent);
        if (isLikeCloseEvent(errOrEvent) && errOrEvent.code === 4499) {
          socket2.close(4499, "Terminated");
          socket2.onerror = null;
          socket2.onclose = null;
        }
      });
      socket2.onerror = (err) => emitter.emit("error", err);
      socket2.onclose = (event) => emitter.emit("closed", event);
      socket2.onopen = async () => {
        try {
          emitter.emit("opened", socket2);
          const payload = typeof connectionParams === "function" ? await connectionParams() : connectionParams;
          if (socket2.readyState !== WebSocketImpl.OPEN)
            return;
          socket2.send(stringifyMessage(payload ? {
            type: MessageType.ConnectionInit,
            payload
          } : {
            type: MessageType.ConnectionInit
          }, replacer));
          if (isFinite(connectionAckWaitTimeout) && connectionAckWaitTimeout > 0) {
            connectionAckTimeout = setTimeout(() => {
              socket2.close(CloseCode.ConnectionAcknowledgementTimeout, "Connection acknowledgement timeout");
            }, connectionAckWaitTimeout);
          }
          enqueuePing();
        } catch (err) {
          emitter.emit("error", err);
          socket2.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, "Internal client error"));
        }
      };
      let acknowledged = false;
      socket2.onmessage = ({ data }) => {
        try {
          const message = parseMessage(data, reviver);
          emitter.emit("message", message);
          if (message.type === "ping" || message.type === "pong") {
            emitter.emit(message.type, true, message.payload);
            if (message.type === "pong") {
              enqueuePing();
            } else if (!disablePong) {
              socket2.send(stringifyMessage(message.payload ? {
                type: MessageType.Pong,
                payload: message.payload
              } : {
                type: MessageType.Pong
              }));
              emitter.emit("pong", false, message.payload);
            }
            return;
          }
          if (acknowledged)
            return;
          if (message.type !== MessageType.ConnectionAck)
            throw new Error(`First message cannot be of type ${message.type}`);
          clearTimeout(connectionAckTimeout);
          acknowledged = true;
          emitter.emit("connected", socket2, message.payload);
          retrying = false;
          retries = 0;
          connected([
            socket2,
            new Promise((_2, reject) => errorOrClosed(reject))
          ]);
        } catch (err) {
          socket2.onmessage = null;
          emitter.emit("error", err);
          socket2.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, "Bad response"));
        }
      };
    })()));
    if (socket.readyState === WebSocketImpl.CLOSING)
      await throwOnClose;
    let release = () => {
    };
    const released = new Promise((resolve) => release = resolve);
    return [
      socket,
      release,
      Promise.race([
        released.then(() => {
          if (!locks) {
            const complete = () => socket.close(1e3, "Normal Closure");
            if (isFinite(lazyCloseTimeout) && lazyCloseTimeout > 0) {
              setTimeout(() => {
                if (!locks && socket.readyState === WebSocketImpl.OPEN)
                  complete();
              }, lazyCloseTimeout);
            } else {
              complete();
            }
          }
        }),
        throwOnClose
      ])
    ];
  }
  function shouldRetryConnectOrThrow(errOrCloseEvent) {
    if (isLikeCloseEvent(errOrCloseEvent) && (isFatalInternalCloseCode(errOrCloseEvent.code) || [
      CloseCode.InternalServerError,
      CloseCode.InternalClientError,
      CloseCode.BadRequest,
      CloseCode.BadResponse,
      CloseCode.Unauthorized,
      CloseCode.SubprotocolNotAcceptable,
      CloseCode.SubscriberAlreadyExists,
      CloseCode.TooManyInitialisationRequests
    ].includes(errOrCloseEvent.code)))
      throw errOrCloseEvent;
    if (disposed)
      return false;
    if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1e3)
      return locks > 0;
    if (!retryAttempts || retries >= retryAttempts)
      throw errOrCloseEvent;
    if (!shouldRetry(errOrCloseEvent))
      throw errOrCloseEvent;
    if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))
      throw errOrCloseEvent;
    return retrying = true;
  }
  if (!lazy) {
    (async () => {
      locks++;
      for (; ; ) {
        try {
          const [, , throwOnClose] = await connect();
          await throwOnClose;
        } catch (errOrCloseEvent) {
          try {
            if (!shouldRetryConnectOrThrow(errOrCloseEvent))
              return;
          } catch (errOrCloseEvent2) {
            return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent2);
          }
        }
      }
    })();
  }
  return {
    on: emitter.on,
    subscribe(payload, sink) {
      const id2 = generateID();
      let done = false, errored = false, releaser = () => {
        locks--;
        done = true;
      };
      (async () => {
        locks++;
        for (; ; ) {
          try {
            const [socket, release, waitForReleaseOrThrowOnClose] = await connect();
            if (done)
              return release();
            const unlisten = emitter.onMessage(id2, (message) => {
              switch (message.type) {
                case MessageType.Next: {
                  sink.next(message.payload);
                  return;
                }
                case MessageType.Error: {
                  errored = true, done = true;
                  sink.error(message.payload);
                  releaser();
                  return;
                }
                case MessageType.Complete: {
                  done = true;
                  releaser();
                  return;
                }
              }
            });
            socket.send(stringifyMessage({
              id: id2,
              type: MessageType.Subscribe,
              payload
            }, replacer));
            releaser = () => {
              if (!done && socket.readyState === WebSocketImpl.OPEN)
                socket.send(stringifyMessage({
                  id: id2,
                  type: MessageType.Complete
                }, replacer));
              locks--;
              done = true;
              release();
            };
            await waitForReleaseOrThrowOnClose.finally(unlisten);
            return;
          } catch (errOrCloseEvent) {
            if (!shouldRetryConnectOrThrow(errOrCloseEvent))
              return;
          }
        }
      })().then(() => {
        if (!errored)
          sink.complete();
      }).catch((err) => {
        sink.error(err);
      });
      return () => {
        if (!done)
          releaser();
      };
    },
    async dispose() {
      disposed = true;
      if (connecting) {
        const [socket] = await connecting;
        socket.close(1e3, "Normal Closure");
      }
    },
    terminate() {
      if (connecting) {
        emitter.emit("closed", {
          code: 4499,
          reason: "Terminated",
          wasClean: false
        });
      }
    }
  };
}
function isLikeCloseEvent(val) {
  return isObject(val) && "code" in val && "reason" in val;
}
function isFatalInternalCloseCode(code) {
  if ([
    1e3,
    1001,
    1006,
    1005,
    1012,
    1013,
    1013
  ].includes(code))
    return false;
  return code >= 1e3 && code <= 1999;
}
function isWebSocket(val) {
  return typeof val === "function" && "constructor" in val && "CLOSED" in val && "CLOSING" in val && "CONNECTING" in val && "OPEN" in val;
}
(function(self2) {
  (function(exports) {
    var global2 = typeof globalThis !== "undefined" && globalThis || typeof self2 !== "undefined" && self2 || typeof global2 !== "undefined" && global2;
    var support = {
      searchParams: "URLSearchParams" in global2,
      iterable: "Symbol" in global2 && "iterator" in Symbol,
      blob: "FileReader" in global2 && "Blob" in global2 && function() {
        try {
          new Blob();
          return true;
        } catch (e2) {
          return false;
        }
      }(),
      formData: "FormData" in global2,
      arrayBuffer: "ArrayBuffer" in global2
    };
    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }
    if (support.arrayBuffer) {
      var viewClasses = [
        "[object Int8Array]",
        "[object Uint8Array]",
        "[object Uint8ClampedArray]",
        "[object Int16Array]",
        "[object Uint16Array]",
        "[object Int32Array]",
        "[object Uint32Array]",
        "[object Float32Array]",
        "[object Float64Array]"
      ];
      var isArrayBufferView = ArrayBuffer.isView || function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }
    function normalizeName(name) {
      if (typeof name !== "string") {
        name = String(name);
      }
      if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
        throw new TypeError('Invalid character in header field name: "' + name + '"');
      }
      return name.toLowerCase();
    }
    function normalizeValue(value) {
      if (typeof value !== "string") {
        value = String(value);
      }
      return value;
    }
    function iteratorFor(items) {
      var iterator2 = {
        next: function() {
          var value = items.shift();
          return { done: value === void 0, value };
        }
      };
      if (support.iterable) {
        iterator2[Symbol.iterator] = function() {
          return iterator2;
        };
      }
      return iterator2;
    }
    function Headers(headers) {
      this.map = {};
      if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function(header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
          this.append(name, headers[name]);
        }, this);
      }
    }
    Headers.prototype.append = function(name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ", " + value : value;
    };
    Headers.prototype["delete"] = function(name) {
      delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function(name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };
    Headers.prototype.keys = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };
    Headers.prototype.values = function() {
      var items = [];
      this.forEach(function(value) {
        items.push(value);
      });
      return iteratorFor(items);
    };
    Headers.prototype.entries = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError("Already read"));
      }
      body.bodyUsed = true;
    }
    function fileReaderReady(reader) {
      return new Promise(function(resolve, reject) {
        reader.onload = function() {
          resolve(reader.result);
        };
        reader.onerror = function() {
          reject(reader.error);
        };
      });
    }
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }
    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);
      for (var i2 = 0; i2 < view.length; i2++) {
        chars[i2] = String.fromCharCode(view[i2]);
      }
      return chars.join("");
    }
    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }
    function Body() {
      this.bodyUsed = false;
      this._initBody = function(body) {
        this.bodyUsed = this.bodyUsed;
        this._bodyInit = body;
        if (!body) {
          this._bodyText = "";
        } else if (typeof body === "string") {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }
        if (!this.headers.get("content-type")) {
          if (typeof body === "string") {
            this.headers.set("content-type", "text/plain;charset=UTF-8");
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set("content-type", this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
          }
        }
      };
      if (support.blob) {
        this.blob = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error("could not read FormData body as blob");
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };
        this.arrayBuffer = function() {
          if (this._bodyArrayBuffer) {
            var isConsumed = consumed(this);
            if (isConsumed) {
              return isConsumed;
            }
            if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
              return Promise.resolve(
                this._bodyArrayBuffer.buffer.slice(
                  this._bodyArrayBuffer.byteOffset,
                  this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                )
              );
            } else {
              return Promise.resolve(this._bodyArrayBuffer);
            }
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }
      this.text = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }
        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error("could not read FormData body as text");
        } else {
          return Promise.resolve(this._bodyText);
        }
      };
      if (support.formData) {
        this.formData = function() {
          return this.text().then(decode);
        };
      }
      this.json = function() {
        return this.text().then(JSON.parse);
      };
      return this;
    }
    var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }
    function Request(input, options) {
      if (!(this instanceof Request)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }
      options = options || {};
      var body = options.body;
      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError("Already read");
        }
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }
      this.credentials = options.credentials || this.credentials || "same-origin";
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }
      this.method = normalizeMethod(options.method || this.method || "GET");
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;
      if ((this.method === "GET" || this.method === "HEAD") && body) {
        throw new TypeError("Body not allowed for GET or HEAD requests");
      }
      this._initBody(body);
      if (this.method === "GET" || this.method === "HEAD") {
        if (options.cache === "no-store" || options.cache === "no-cache") {
          var reParamSearch = /([?&])_=[^&]*/;
          if (reParamSearch.test(this.url)) {
            this.url = this.url.replace(reParamSearch, "$1_=" + new Date().getTime());
          } else {
            var reQueryString = /\?/;
            this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + new Date().getTime();
          }
        }
      }
    }
    Request.prototype.clone = function() {
      return new Request(this, { body: this._bodyInit });
    };
    function decode(body) {
      var form = new FormData();
      body.trim().split("&").forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split("=");
          var name = split.shift().replace(/\+/g, " ");
          var value = split.join("=").replace(/\+/g, " ");
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }
    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
      preProcessedHeaders.split("\r").map(function(header) {
        return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
      }).forEach(function(line) {
        var parts = line.split(":");
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(":").trim();
          headers.append(key, value);
        }
      });
      return headers;
    }
    Body.call(Request.prototype);
    function Response(bodyInit, options) {
      if (!(this instanceof Response)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }
      if (!options) {
        options = {};
      }
      this.type = "default";
      this.status = options.status === void 0 ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
      this.headers = new Headers(options.headers);
      this.url = options.url || "";
      this._initBody(bodyInit);
    }
    Body.call(Response.prototype);
    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };
    Response.error = function() {
      var response = new Response(null, { status: 0, statusText: "" });
      response.type = "error";
      return response;
    };
    var redirectStatuses = [301, 302, 303, 307, 308];
    Response.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError("Invalid status code");
      }
      return new Response(null, { status, headers: { location: url } });
    };
    exports.DOMException = global2.DOMException;
    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function(message, name) {
        this.message = message;
        this.name = name;
        var error2 = Error(message);
        this.stack = error2.stack;
      };
      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }
    function fetch2(input, init) {
      return new Promise(function(resolve, reject) {
        var request = new Request(input, init);
        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException("Aborted", "AbortError"));
        }
        var xhr = new XMLHttpRequest();
        function abortXhr() {
          xhr.abort();
        }
        xhr.onload = function() {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || "")
          };
          options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
          var body = "response" in xhr ? xhr.response : xhr.responseText;
          setTimeout(function() {
            resolve(new Response(body, options));
          }, 0);
        };
        xhr.onerror = function() {
          setTimeout(function() {
            reject(new TypeError("Network request failed"));
          }, 0);
        };
        xhr.ontimeout = function() {
          setTimeout(function() {
            reject(new TypeError("Network request failed"));
          }, 0);
        };
        xhr.onabort = function() {
          setTimeout(function() {
            reject(new exports.DOMException("Aborted", "AbortError"));
          }, 0);
        };
        function fixUrl(url) {
          try {
            return url === "" && global2.location.href ? global2.location.href : url;
          } catch (e2) {
            return url;
          }
        }
        xhr.open(request.method, fixUrl(request.url), true);
        if (request.credentials === "include") {
          xhr.withCredentials = true;
        } else if (request.credentials === "omit") {
          xhr.withCredentials = false;
        }
        if ("responseType" in xhr) {
          if (support.blob) {
            xhr.responseType = "blob";
          } else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) {
            xhr.responseType = "arraybuffer";
          }
        }
        if (init && typeof init.headers === "object" && !(init.headers instanceof Headers)) {
          Object.getOwnPropertyNames(init.headers).forEach(function(name) {
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
          });
        } else {
          request.headers.forEach(function(value, name) {
            xhr.setRequestHeader(name, value);
          });
        }
        if (request.signal) {
          request.signal.addEventListener("abort", abortXhr);
          xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
              request.signal.removeEventListener("abort", abortXhr);
            }
          };
        }
        xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
      });
    }
    fetch2.polyfill = true;
    if (!global2.fetch) {
      global2.fetch = fetch2;
      global2.Headers = Headers;
      global2.Request = Request;
      global2.Response = Response;
    }
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch2;
    return exports;
  })({});
})(typeof self !== "undefined" ? self : commonjsGlobal);
var ws = null;
if (typeof WebSocket !== "undefined") {
  ws = WebSocket;
} else if (typeof MozWebSocket !== "undefined") {
  ws = MozWebSocket;
} else if (typeof global !== "undefined") {
  ws = global.WebSocket || global.MozWebSocket;
} else if (typeof window !== "undefined") {
  ws = window.WebSocket || window.MozWebSocket;
} else if (typeof self !== "undefined") {
  ws = self.WebSocket || self.MozWebSocket;
}
var WebSocket$1 = ws;
var EventType = /* @__PURE__ */ ((EventType2) => {
  EventType2["AttributeUpdate"] = "ATTRIBUTE_UPDATE";
  EventType2["GroupAdd"] = "GROUP_ADD";
  EventType2["LinkAdd"] = "LINK_ADD";
  EventType2["ParticipantAdd"] = "PARTICIPANT_ADD";
  EventType2["ParticipantConnect"] = "PARTICIPANT_CONNECT";
  EventType2["ParticipantConnected"] = "PARTICIPANT_CONNECTED";
  EventType2["ParticipantDisconnect"] = "PARTICIPANT_DISCONNECT";
  EventType2["ScopeAdd"] = "SCOPE_ADD";
  EventType2["StepAdd"] = "STEP_ADD";
  EventType2["TransitionAdd"] = "TRANSITION_ADD";
  return EventType2;
})(EventType || {});
var OrderDirection = /* @__PURE__ */ ((OrderDirection2) => {
  OrderDirection2["Asc"] = "ASC";
  OrderDirection2["Desc"] = "DESC";
  return OrderDirection2;
})(OrderDirection || {});
var Role = /* @__PURE__ */ ((Role2) => {
  Role2["Admin"] = "ADMIN";
  Role2["Participant"] = "PARTICIPANT";
  return Role2;
})(Role || {});
var State = /* @__PURE__ */ ((State2) => {
  State2["Created"] = "CREATED";
  State2["Ended"] = "ENDED";
  State2["Failed"] = "FAILED";
  State2["Paused"] = "PAUSED";
  State2["Running"] = "RUNNING";
  State2["Terminated"] = "TERMINATED";
  return State2;
})(State || {});
var StepOrderField = /* @__PURE__ */ ((StepOrderField2) => {
  StepOrderField2["CreatedAt"] = "CREATED_AT";
  StepOrderField2["Duration"] = "DURATION";
  StepOrderField2["StartedAt"] = "STARTED_AT";
  return StepOrderField2;
})(StepOrderField || {});
var AttributesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "Attributes" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "scopeID" }
          },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ID" } }
          }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "after" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "first" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "before" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attributes" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "scopeID" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "scopeID" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "after" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "first" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "before" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "last" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "pageInfo" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasNextPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasPreviousPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "startCursor" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "endCursor" }
                      }
                    ]
                  }
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "edges" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "private" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "protected" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "immutable" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "deletedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "key" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "val" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "index" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "current" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "version" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "vector" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "node" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "__typename" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Scope" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "kind" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "cursor" }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var SetAttributesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "SetAttributes" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: { kind: "Name", value: "SetAttributeInput" }
                }
              }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "setAttributes" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attribute" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdBy" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "User" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "username" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Service" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Participant" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "identifier" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "private" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "protected" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "immutable" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "deletedAt" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "key" } },
                      { kind: "Field", name: { kind: "Name", value: "val" } },
                      { kind: "Field", name: { kind: "Name", value: "index" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "current" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "version" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "vector" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Scope" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "kind" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var ChangesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "subscription",
      name: { kind: "Name", value: "Changes" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "changes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "done" } },
                { kind: "Field", name: { kind: "Name", value: "removed" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "change" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "ScopeChange" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "name" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "kind" }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "StepChange" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "state" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "since" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "remaining" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "elapsed" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "running" }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "AttributeChange" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "nodeID" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "deleted" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "isNew" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "index" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "vector" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "version" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "key" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "val" }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "ParticipantChange" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var AddGroupsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "AddGroups" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: { kind: "Name", value: "AddGroupInput" }
                }
              }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "addGroups" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "group" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "Field", name: { kind: "Name", value: "id" } }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var GroupsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "Groups" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "after" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "first" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "before" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "groups" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "after" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "first" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "before" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "last" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "edges" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "pageInfo" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasNextPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasPreviousPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "startCursor" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "endCursor" }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var OnEventDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "subscription",
      name: { kind: "Name", value: "OnEvent" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NamedType",
            name: { kind: "Name", value: "OnEventInput" }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "onEvent" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "eventID" } },
                { kind: "Field", name: { kind: "Name", value: "eventType" } },
                { kind: "Field", name: { kind: "Name", value: "done" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "node" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Participant" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "identifier" }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Attribute" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "private" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "protected" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "immutable" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "deletedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "key" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "val" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "index" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "current" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "version" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "vector" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "node" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "__typename" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Scope" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "kind" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Step" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "duration" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "startedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "endedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "state" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "transitions" },
                              arguments: [
                                {
                                  kind: "Argument",
                                  name: { kind: "Name", value: "first" },
                                  value: { kind: "IntValue", value: "100" }
                                }
                              ],
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "totalCount" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "pageInfo" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasNextPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasPreviousPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "startCursor"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "endCursor"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "edges" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "node" },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "__typename"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "id"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdBy"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "User"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "username"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Service"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Participant"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "identifier"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "from"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "to"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "node"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Step"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "duration"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "state"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "startedAt"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "endedAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "cursor"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Group" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Scope" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "name" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "kind" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "attributes" },
                              arguments: [
                                {
                                  kind: "Argument",
                                  name: { kind: "Name", value: "first" },
                                  value: { kind: "IntValue", value: "100" }
                                }
                              ],
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "totalCount" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "pageInfo" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasNextPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasPreviousPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "startCursor"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "endCursor"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "edges" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "node" },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "__typename"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "id"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdBy"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "User"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "username"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Service"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Participant"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "identifier"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "private"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "protected"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "immutable"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "deletedAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "key"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "val"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "index"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "current"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "version"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "vector"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "node"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Scope"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "kind"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "cursor"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Transition" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "from" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "to" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "node" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "__typename" }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Step" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "duration"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "state"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "startedAt"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "endedAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Link" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "link" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "participant" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "node" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var OnAnyEventDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "subscription",
      name: { kind: "Name", value: "OnAnyEvent" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NamedType",
            name: { kind: "Name", value: "OnAnyEventInput" }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "onAnyEvent" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "eventID" } },
                { kind: "Field", name: { kind: "Name", value: "eventType" } },
                { kind: "Field", name: { kind: "Name", value: "done" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "node" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Participant" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "identifier" }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Attribute" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "private" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "protected" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "immutable" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "deletedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "key" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "val" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "index" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "current" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "version" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "vector" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "node" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "__typename" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Scope" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "kind" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Step" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "duration" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "startedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "endedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "state" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "transitions" },
                              arguments: [
                                {
                                  kind: "Argument",
                                  name: { kind: "Name", value: "first" },
                                  value: { kind: "IntValue", value: "100" }
                                }
                              ],
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "totalCount" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "pageInfo" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasNextPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasPreviousPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "startCursor"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "endCursor"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "edges" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "node" },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "__typename"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "id"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdBy"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "User"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "username"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Service"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Participant"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "identifier"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "from"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "to"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "node"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Step"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "duration"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "state"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "startedAt"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "endedAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "cursor"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Group" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Scope" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "name" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "kind" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "attributes" },
                              arguments: [
                                {
                                  kind: "Argument",
                                  name: { kind: "Name", value: "first" },
                                  value: { kind: "IntValue", value: "100" }
                                }
                              ],
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "totalCount" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "pageInfo" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasNextPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasPreviousPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "startCursor"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "endCursor"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "edges" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "node" },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "__typename"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "id"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdBy"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "User"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "username"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Service"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Participant"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "identifier"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "private"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "protected"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "immutable"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "deletedAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "key"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "val"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "index"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "current"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "version"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "vector"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "node"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Scope"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "kind"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "cursor"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Transition" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "from" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "to" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "node" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "__typename" }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Step" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "duration"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "state"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "startedAt"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "endedAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "InlineFragment",
                        typeCondition: {
                          kind: "NamedType",
                          name: { kind: "Name", value: "Link" }
                        },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "link" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "participant" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "node" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var LinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "Link" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "LinkInput" }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "link" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "nodes" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "Field", name: { kind: "Name", value: "id" } }
                    ]
                  }
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "participants" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "Field", name: { kind: "Name", value: "id" } }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var ParticipantsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "Participants" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "after" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "first" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "before" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "participants" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "after" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "first" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "before" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "last" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "edges" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "identifier" }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "pageInfo" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasNextPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasPreviousPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "startCursor" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "endCursor" }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var AddParticipantDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "AddParticipant" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "AddParticipantInput" }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "addParticipant" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "participant" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "identifier" }
                      }
                    ]
                  }
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "sessionToken" }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var AddScopesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "AddScopes" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: { kind: "Name", value: "AddScopeInput" }
                }
              }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "addScopes" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "scope" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      { kind: "Field", name: { kind: "Name", value: "name" } },
                      { kind: "Field", name: { kind: "Name", value: "kind" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdBy" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "User" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "username" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Service" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Participant" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "identifier" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "attributes" },
                        arguments: [
                          {
                            kind: "Argument",
                            name: { kind: "Name", value: "first" },
                            value: { kind: "IntValue", value: "100" }
                          }
                        ],
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "totalCount" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "pageInfo" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "hasNextPage"
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "hasPreviousPage"
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "startCursor"
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "endCursor" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "edges" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "node" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "__typename"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdBy"
                                          },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                  kind: "NamedType",
                                                  name: {
                                                    kind: "Name",
                                                    value: "User"
                                                  }
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "username"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "name"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "createdAt"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                  kind: "NamedType",
                                                  name: {
                                                    kind: "Name",
                                                    value: "Service"
                                                  }
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "name"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "createdAt"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                  kind: "NamedType",
                                                  name: {
                                                    kind: "Name",
                                                    value: "Participant"
                                                  }
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "identifier"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "createdAt"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "private"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "protected"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "immutable"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "key" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "val" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "index"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "current"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "version"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "vector"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "node" },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "__typename"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "id"
                                                }
                                              },
                                              {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                  kind: "NamedType",
                                                  name: {
                                                    kind: "Name",
                                                    value: "Scope"
                                                  }
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "kind"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "name"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "cursor" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var ScopesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "Scopes" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "filter" }
          },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: {
                kind: "NamedType",
                name: { kind: "Name", value: "ScopedAttributesInput" }
              }
            }
          }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "after" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "first" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "before" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "scopes" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "filter" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "after" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "first" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "before" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "last" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "edges" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "name" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "kind" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "attributes" },
                              arguments: [
                                {
                                  kind: "Argument",
                                  name: { kind: "Name", value: "first" },
                                  value: { kind: "IntValue", value: "100" }
                                }
                              ],
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "totalCount" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "pageInfo" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasNextPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasPreviousPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "startCursor"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "endCursor"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "edges" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "node" },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "__typename"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "id"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdBy"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "User"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "username"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Service"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Participant"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "identifier"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "private"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "protected"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "immutable"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "deletedAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "key"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "val"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "index"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "current"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "version"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "vector"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "node"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Scope"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "kind"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "cursor"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "pageInfo" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasNextPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasPreviousPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "startCursor" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "endCursor" }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var ScopedAttributesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "subscription",
      name: { kind: "Name", value: "ScopedAttributes" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: { kind: "Name", value: "ScopedAttributesInput" }
                }
              }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "scopedAttributes" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attribute" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdBy" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "User" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "username" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Service" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Participant" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "identifier" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "private" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "protected" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "immutable" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "deletedAt" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "key" } },
                      { kind: "Field", name: { kind: "Name", value: "val" } },
                      { kind: "Field", name: { kind: "Name", value: "index" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "current" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "version" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "vector" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Scope" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "kind" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                { kind: "Field", name: { kind: "Name", value: "isNew" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "scopesUpdated" }
                },
                { kind: "Field", name: { kind: "Name", value: "done" } }
              ]
            }
          }
        ]
      }
    }
  ]
};
var GlobalAttributesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "subscription",
      name: { kind: "Name", value: "GlobalAttributes" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "globalAttributes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attribute" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdBy" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "User" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "username" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Service" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Participant" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "identifier" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "private" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "protected" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "immutable" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "deletedAt" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "key" } },
                      { kind: "Field", name: { kind: "Name", value: "val" } },
                      { kind: "Field", name: { kind: "Name", value: "index" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "current" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "version" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "vector" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Scope" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "kind" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                { kind: "Field", name: { kind: "Name", value: "isNew" } },
                { kind: "Field", name: { kind: "Name", value: "done" } }
              ]
            }
          }
        ]
      }
    }
  ]
};
var RegisterServiceDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "RegisterService" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "RegisterServiceInput" }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "registerService" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "service" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "name" } }
                    ]
                  }
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "sessionToken" }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var AddStepsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "AddSteps" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: { kind: "Name", value: "AddStepInput" }
                }
              }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "addSteps" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "step" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdBy" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "User" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "username" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Service" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Participant" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "identifier" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "duration" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "startedAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "endedAt" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "state" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "transitions" },
                        arguments: [
                          {
                            kind: "Argument",
                            name: { kind: "Name", value: "first" },
                            value: { kind: "IntValue", value: "100" }
                          }
                        ],
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "totalCount" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "pageInfo" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "hasNextPage"
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "hasPreviousPage"
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "startCursor"
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "endCursor" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "edges" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "node" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "__typename"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdBy"
                                          },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                  kind: "NamedType",
                                                  name: {
                                                    kind: "Name",
                                                    value: "User"
                                                  }
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "username"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "name"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "createdAt"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                  kind: "NamedType",
                                                  name: {
                                                    kind: "Name",
                                                    value: "Service"
                                                  }
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "name"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "createdAt"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                  kind: "NamedType",
                                                  name: {
                                                    kind: "Name",
                                                    value: "Participant"
                                                  }
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "identifier"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "createdAt"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "from" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "to" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "node" },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "__typename"
                                                }
                                              },
                                              {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                  kind: "NamedType",
                                                  name: {
                                                    kind: "Name",
                                                    value: "Step"
                                                  }
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "id"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "duration"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "state"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "startedAt"
                                                      }
                                                    },
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "endedAt"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "cursor" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var StepsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "Steps" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "after" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "first" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "before" }
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "Cursor" } }
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "steps" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "after" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "first" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "before" }
                }
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "last" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "edges" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdBy" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "User" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "username"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: { kind: "Name", value: "Service" }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "name" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                      kind: "NamedType",
                                      name: {
                                        kind: "Name",
                                        value: "Participant"
                                      }
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "id" }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "identifier"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "createdAt"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "duration" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "startedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "endedAt" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "state" }
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "transitions" },
                              arguments: [
                                {
                                  kind: "Argument",
                                  name: { kind: "Name", value: "first" },
                                  value: { kind: "IntValue", value: "100" }
                                }
                              ],
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "totalCount" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "pageInfo" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasNextPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "hasPreviousPage"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "startCursor"
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "endCursor"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "edges" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: { kind: "Name", value: "node" },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "__typename"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "id"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdAt"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "createdBy"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "User"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "username"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Service"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "name"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Participant"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "identifier"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "createdAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "from"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "to"
                                                }
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "node"
                                                },
                                                selectionSet: {
                                                  kind: "SelectionSet",
                                                  selections: [
                                                    {
                                                      kind: "Field",
                                                      name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                      }
                                                    },
                                                    {
                                                      kind: "InlineFragment",
                                                      typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                          kind: "Name",
                                                          value: "Step"
                                                        }
                                                      },
                                                      selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "id"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "duration"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "state"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "startedAt"
                                                            }
                                                          },
                                                          {
                                                            kind: "Field",
                                                            name: {
                                                              kind: "Name",
                                                              value: "endedAt"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "cursor"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "pageInfo" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasNextPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasPreviousPage" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "startCursor" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "endCursor" }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var TransitionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "Transition" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "TransitionInput" }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "transition" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "transition" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdBy" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "User" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "username" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Service" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "name" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Participant" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "identifier" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      { kind: "Field", name: { kind: "Name", value: "from" } },
                      { kind: "Field", name: { kind: "Name", value: "to" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "__typename" }
                            },
                            {
                              kind: "InlineFragment",
                              typeCondition: {
                                kind: "NamedType",
                                name: { kind: "Name", value: "Step" }
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "duration" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "state" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "startedAt" }
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "endedAt" }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var LoginDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "Login" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "LoginInput" }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "login" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "user" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "username" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "name" } }
                    ]
                  }
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "sessionToken" }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var TokenLoginDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "TokenLogin" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "input" }
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "TokenLoginInput" }
            }
          }
        }
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "tokenLogin" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "input" }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "user" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "__typename" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "createdAt" }
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "username" }
                      },
                      { kind: "Field", name: { kind: "Name", value: "name" } }
                    ]
                  }
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "sessionToken" }
                }
              ]
            }
          }
        ]
      }
    }
  ]
};
var isDefinedNonNullAny = (v2) => v2 !== void 0 && v2 !== null;
mod.any().refine((v2) => isDefinedNonNullAny(v2));
mod.nativeEnum(EventType);
mod.nativeEnum(OrderDirection);
mod.nativeEnum(Role);
mod.nativeEnum(State);
mod.nativeEnum(StepOrderField);
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys2(target) {
    return Object.getOwnPropertyNames(target).concat(
      Object.getOwnPropertySymbols(target)
    );
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys2(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn)
    console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
var events_default = EventEmitter;
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = void 0;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = void 0;
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== "function") {
    throw new TypeError(
      'The "listener" argument must be of type Function. Received type ' + typeof listener
    );
  }
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError(
        'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + "."
      );
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function() {
  if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
    this._events = /* @__PURE__ */ Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || void 0;
};
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n9) {
  if (typeof n9 !== "number" || n9 < 0 || NumberIsNaN(n9)) {
    throw new RangeError(
      'The value of "n" is out of range. It must be a non-negative number. Received ' + n9 + "."
    );
  }
  this._maxListeners = n9;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === void 0)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i2 = 1; i2 < arguments.length; i2++)
    args.push(arguments[i2]);
  var doError = type === "error";
  var events = this._events;
  if (events !== void 0)
    doError = doError && events.error === void 0;
  else if (!doError)
    return false;
  if (doError) {
    var er2;
    if (args.length > 0)
      er2 = args[0];
    if (er2 instanceof Error) {
      throw er2;
    }
    var err = new Error(
      "Unhandled error." + (er2 ? " (" + er2.message + ")" : "")
    );
    err.context = er2;
    throw err;
  }
  var handler = events[type];
  if (handler === void 0)
    return false;
  if (typeof handler === "function") {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i2 = 0; i2 < len; ++i2)
      ReflectApply(listeners2[i2], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m2;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === void 0) {
    events = target._events = /* @__PURE__ */ Object.create(null);
    target._eventsCount = 0;
  } else {
    if (events.newListener !== void 0) {
      target.emit(
        "newListener",
        type,
        listener.listener ? listener.listener : listener
      );
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === void 0) {
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === "function") {
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }
    m2 = _getMaxListeners(target);
    if (m2 > 0 && existing.length > m2 && !existing.warned) {
      existing.warned = true;
      var w2 = new Error(
        "Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit"
      );
      w2.name = "MaxListenersExceededWarning";
      w2.emitter = target;
      w2.type = type;
      w2.count = existing.length;
      ProcessEmitWarning(w2);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: void 0,
    target,
    type,
    listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i2, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === void 0)
    return this;
  list = events[type];
  if (list === void 0)
    return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0)
      this._events = /* @__PURE__ */ Object.create(null);
    else {
      delete events[type];
      if (events.removeListener)
        this.emit("removeListener", type, list.listener || listener);
    }
  } else if (typeof list !== "function") {
    position = -1;
    for (i2 = list.length - 1; i2 >= 0; i2--) {
      if (list[i2] === listener || list[i2].listener === listener) {
        originalListener = list[i2].listener;
        position = i2;
        break;
      }
    }
    if (position < 0)
      return this;
    if (position === 0)
      list.shift();
    else {
      spliceOne(list, position);
    }
    if (list.length === 1)
      events[type] = list[0];
    if (events.removeListener !== void 0)
      this.emit("removeListener", type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners2, events, i2;
  events = this._events;
  if (events === void 0)
    return this;
  if (events.removeListener === void 0) {
    if (arguments.length === 0) {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== void 0) {
      if (--this._eventsCount === 0)
        this._events = /* @__PURE__ */ Object.create(null);
      else
        delete events[type];
    }
    return this;
  }
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i2 = 0; i2 < keys.length; ++i2) {
      key = keys[i2];
      if (key === "removeListener")
        continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners("removeListener");
    this._events = /* @__PURE__ */ Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners2 = events[type];
  if (typeof listeners2 === "function") {
    this.removeListener(type, listeners2);
  } else if (listeners2 !== void 0) {
    for (i2 = listeners2.length - 1; i2 >= 0; i2--) {
      this.removeListener(type, listeners2[i2]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === void 0)
    return [];
  var evlistener = events[type];
  if (evlistener === void 0)
    return [];
  if (typeof evlistener === "function")
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === "function") {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== void 0) {
    var evlistener = events[type];
    if (typeof evlistener === "function") {
      return 1;
    } else if (evlistener !== void 0) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n9) {
  var copy = new Array(n9);
  for (var i2 = 0; i2 < n9; ++i2)
    copy[i2] = arr[i2];
  return copy;
}
function spliceOne(list, index2) {
  for (; index2 + 1 < list.length; index2++)
    list[index2] = list[index2 + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i2 = 0; i2 < ret.length; ++i2) {
    ret[i2] = arr[i2].listener || arr[i2];
  }
  return ret;
}
var DefaultAddress = "http://localhost:4737/query";
var Tajriba = class extends events_default {
  constructor(url = DefaultAddress, token) {
    super();
    this.url = url;
    this.token = token;
    this.userAgent = "Tajriba.js";
    this.useHTTP = false;
    this._connected = false;
  }
  static create(url = DefaultAddress) {
    return new Tajriba(url);
  }
  static connect(url = DefaultAddress) {
    const t2 = new Tajriba(url);
    t2.connect();
    return t2;
  }
  static async createAndAwait(url = DefaultAddress) {
    const t2 = new Tajriba(url);
    const p2 = t2.connectionStatus();
    t2.connect();
    await p2;
    return t2;
  }
  async connectAndAwait() {
    const p2 = this.connectionStatus();
    this.connect();
    await p2;
  }
  static async authenticated(url = DefaultAddress, token) {
    const t2 = new Tajriba(url, token);
    const p2 = t2.connectionStatus();
    t2.connect();
    try {
      await p2;
    } catch (err) {
      t2.stop();
      throw err;
    }
    return t2;
  }
  async sessionAdmin(sessionToken) {
    const t2 = new TajribaAdmin(this.url, sessionToken);
    t2.useHTTP = this.useHTTP;
    const p2 = t2.connectionStatus();
    t2.connect();
    try {
      await p2;
    } catch (err) {
      t2.stop();
      throw err;
    }
    return t2;
  }
  async sessionParticipant(sessionToken, participant) {
    if (!participant) {
      throw "participant required";
    }
    const t2 = new TajribaParticipant(this.url, sessionToken, participant);
    t2.useHTTP = this.useHTTP;
    const p2 = t2.connectionStatus();
    t2.connect();
    try {
      await p2;
    } catch (err) {
      t2.stop();
      throw err;
    }
    return t2;
  }
  get connected() {
    return this._connected;
  }
  async login(username, password) {
    var _a;
    const loginRes = await this.client.mutation(LoginDocument, {
      input: {
        username,
        password
      }
    }).toPromise();
    const sessionToken = (_a = loginRes.data) == null ? void 0 : _a.login.sessionToken;
    if (!sessionToken) {
      throw "Authentication failed";
    }
    return sessionToken;
  }
  async tokenLogin(token) {
    var _a;
    const loginRes = await this.client.mutation(TokenLoginDocument, {
      input: {
        token
      }
    }).toPromise();
    const sessionToken = (_a = loginRes.data) == null ? void 0 : _a.tokenLogin.sessionToken;
    if (!sessionToken) {
      throw "Authentication failed";
    }
    return sessionToken;
  }
  async registerService(name, token) {
    var _a;
    const res = await this.client.mutation(RegisterServiceDocument, {
      input: {
        name,
        token
      }
    }).toPromise();
    const rs = (_a = res.data) == null ? void 0 : _a.registerService;
    if (!rs) {
      console.error(res);
      throw "Failed service registration";
    }
    const { sessionToken } = rs;
    if (!sessionToken) {
      console.error(res);
      throw "Authentication failed";
    }
    return sessionToken;
  }
  async registerParticipant(identifier) {
    var _a;
    const addPartRes = await this.client.mutation(AddParticipantDocument, {
      input: {
        identifier
      }
    }).toPromise();
    const addParticipant = (_a = addPartRes.data) == null ? void 0 : _a.addParticipant;
    if (!addParticipant) {
      throw "Unknown participant";
    }
    const { sessionToken, participant } = addParticipant;
    if (!sessionToken || !participant) {
      throw "Authentication failed";
    }
    return [sessionToken, participant];
  }
  get wsURL() {
    if (this.url.startsWith("http://")) {
      return this.url.replace("http://", "ws://");
    } else if (this.url.startsWith("https://")) {
      return this.url.replace("https://", "wss://");
    } else {
      throw "invalid URL";
    }
  }
  connectionStatus() {
    return new Promise((resolve, reject) => {
      this._firstConnProm = { resolve, reject };
    });
  }
  get client() {
    if (!this._client) {
      this.connect();
    }
    return this._client;
  }
  connect() {
    if (this._client) {
      return;
    }
    let authToken = "";
    if (this.token) {
      authToken = `Bearer ${this.token}`;
    }
    const wsClient = createClient({
      url: this.wsURL,
      connectionAckWaitTimeout: 5e3,
      retryAttempts: 1e10,
      lazy: false,
      shouldRetry: () => true,
      webSocketImpl: WebSocket$1,
      on: {
        connecting: () => {
        },
        connected: () => {
        },
        opened: (sock) => {
          if (this._firstConnProm && sock.readyState === WebSocket$1.OPEN) {
            this._firstConnProm.resolve();
            delete this._firstConnProm;
          }
          this.emit("connected");
          this._connected = true;
        },
        closed: (event) => {
          this.emit("disconnected");
          this._connected = false;
        },
        error: (err) => {
          this.emit("error", err);
        }
      },
      connectionParams: () => {
        const params = {
          "User-Agent": this.userAgent
        };
        if (authToken) {
          params["authToken"] = authToken;
        }
        return params;
      },
      onNonLazyError: (err) => {
        console.debug("websocket: error (laz)", err);
        if (this._firstConnProm) {
          this._firstConnProm.reject(err);
          delete this._firstConnProm;
        }
      }
    });
    this._wsClient = wsClient;
    this._client = W({
      url: this.url,
      exchanges: [
        fetchExchange,
        subscriptionExchange({
          enableAllOperations: !this.useHTTP,
          forwardSubscription: (operation) => {
            return {
              subscribe: (sink) => {
                return {
                  unsubscribe: wsClient.subscribe(operation, sink)
                };
              }
            };
          }
        })
      ]
    });
  }
  stop() {
    if (this._wsClient) {
      this._wsClient.dispose();
      delete this._wsClient;
    }
    if (this._client) {
      delete this._client;
    }
    this.emit("closed");
  }
  async setAttributes(input) {
    return await this.mutate(
      SetAttributesDocument,
      { input },
      (data) => data == null ? void 0 : data.setAttributes.map((p2) => p2.attribute)
    );
  }
  async setAttribute(input) {
    return (await this.setAttributes([input]))[0];
  }
  globalAttributes() {
    return this.subscribe(GlobalAttributesDocument, {}, (data) => {
      if (data.globalAttributes) {
        return data.globalAttributes;
      }
    });
  }
  async query(query, variables, data) {
    const res = await this.client.query(query, variables).toPromise();
    if (res.error) {
      throw res.error;
    }
    if (res.data) {
      const d2 = data(res.data);
      if (d2) {
        return d2;
      }
    }
    throw "no results";
  }
  async mutate(mutation, variables, data) {
    const res = await this.client.mutation(mutation, variables).toPromise();
    if (res.error) {
      throw res.error;
    }
    let r2;
    if (res.data) {
      r2 = data(res.data);
    }
    if (!r2) {
      console.log("NOT FOUND", JSON.stringify(res, null, "  "));
      throw new Error("not found");
    }
    return r2;
  }
  subscribe(query, variables, data) {
    return new Observable((subscriber) => {
      return pipe(
        this.client.subscription(query, variables),
        N((res) => {
          if (res.error) {
            for (let err of res.error.graphQLErrors) {
              if (err.message === "Access Denied") {
                this.emit("accessDenied");
                this.stop();
                return;
              }
            }
            subscriber.error(res.error);
            return;
          }
          if (res.data) {
            const r2 = data(res.data);
            if (r2) {
              subscriber.next(r2);
              return;
            }
          }
          subscriber.error(new Error("subscription data missing"));
        })
      );
    });
  }
};
var TajribaAdmin = class extends Tajriba {
  async addSteps(input) {
    return await this.mutate(
      AddStepsDocument,
      { input },
      (data) => data == null ? void 0 : data.addSteps.map((p2) => p2.step)
    );
  }
  async addStep(input) {
    return (await this.addSteps([input]))[0];
  }
  async steps(input) {
    return await this.query(StepsDocument, { ...input }, (data) => data == null ? void 0 : data.steps);
  }
  async addGroups(input) {
    return await this.mutate(
      AddGroupsDocument,
      { input },
      (data) => data == null ? void 0 : data.addGroups.map((p2) => p2.group)
    );
  }
  async addGroup(input) {
    return (await this.addGroups([input]))[0];
  }
  async groups(input) {
    return await this.query(
      GroupsDocument,
      { ...input },
      (data) => data == null ? void 0 : data.groups
    );
  }
  async addScopes(input) {
    return await this.mutate(
      AddScopesDocument,
      { input },
      (data) => data == null ? void 0 : data.addScopes.map((p2) => p2.scope)
    );
  }
  async addScope(input) {
    return (await this.addScopes([input]))[0];
  }
  async scopes(input) {
    return await this.query(
      ScopesDocument,
      { ...input },
      (data) => data == null ? void 0 : data.scopes
    );
  }
  async attributes(input) {
    return await this.query(
      AttributesDocument,
      { ...input },
      (data) => data == null ? void 0 : data.attributes
    );
  }
  async participants(input) {
    return await this.query(
      ParticipantsDocument,
      { ...input },
      (data) => data == null ? void 0 : data.participants
    );
  }
  async transition(input) {
    return await this.mutate(
      TransitionDocument,
      { input },
      (data) => data == null ? void 0 : data.transition.transition
    );
  }
  async addLink(input) {
    return await this.mutate(LinkDocument, { input }, (data) => data == null ? void 0 : data.link);
  }
  async link(input) {
    return await this.addLink({ ...input, link: true });
  }
  async unlink(input) {
    return await this.addLink({ ...input, link: false });
  }
  scopedAttributes(input) {
    return this.subscribe(ScopedAttributesDocument, { input }, (data) => {
      if (data.scopedAttributes) {
        return data.scopedAttributes;
      }
    });
  }
  onEvent(input) {
    return this.subscribe(OnEventDocument, { input }, (data) => {
      if (data.onEvent) {
        return data.onEvent;
      }
    });
  }
  onAnyEvent(input) {
    return this.subscribe(OnAnyEventDocument, { input }, (data) => {
      if (data.onAnyEvent) {
        return data.onAnyEvent;
      }
    });
  }
};
var TajribaParticipant = class extends Tajriba {
  constructor(url = DefaultAddress, token, participant) {
    super(url, token);
    this.url = url;
    this.token = token;
    this.participant = participant;
  }
  get id() {
    return this.participant.id;
  }
  get identifier() {
    return this.participant.identifier;
  }
  changes() {
    return this.subscribe(ChangesDocument, {}, (data) => {
      if (data.changes) {
        return data.changes;
      }
    });
  }
};
function bs(init) {
  return new BehaviorSubject(init);
}
function bsu(init = void 0) {
  return new BehaviorSubject(init);
}
var ErrNotConnected = new Error("not connected");
var TajribaConnection = class {
  constructor(url) {
    this.url = url;
    this._connected = bs(false);
    this._connecting = bs(true);
    this._stopped = bs(false);
    this.tajriba = Tajriba.connect(this.url);
    this._connected.next(this.tajriba.connected);
    this.tajriba.on("connected", () => {
      this._connected.next(true);
      this._connecting.next(false);
    });
    this.tajriba.on("disconnected", () => {
      this._connected.next(false);
      this._connecting.next(true);
    });
  }
  get connecting() {
    return this._connecting;
  }
  get connected() {
    return this._connected;
  }
  get stopped() {
    return this._stopped;
  }
  async sessionParticipant(token, pident) {
    if (!this._connected.getValue()) {
      throw ErrNotConnected;
    }
    return await this.tajriba.sessionParticipant(token, pident);
  }
  async sessionAdmin(token) {
    if (!this._connected.getValue()) {
      throw ErrNotConnected;
    }
    return await this.tajriba.sessionAdmin(token);
  }
  stop() {
    if (this._stopped.getValue()) {
      return;
    }
    if (this.tajriba) {
      this.tajriba.removeAllListeners("connected");
      this.tajriba.removeAllListeners("disconnected");
      this.tajriba.stop();
    }
    this._connecting.next(false);
    this._connected.next(false);
    this._stopped.next(true);
  }
};
function subscribeAsync(obs, fn2) {
  const cancel = new Subject();
  obs.pipe(concatMap(fn2), takeUntil(cancel)).subscribe();
  return {
    closed: false,
    unsubscribe() {
      if (this.closed) {
        warn("closing a closed async observable subscription");
        return;
      }
      this.closed = true;
      cancel.next();
      cancel.unsubscribe();
    }
  };
}
var ParticipantConnection = class {
  constructor(taj, sessions, resetSession) {
    this.resetSession = resetSession;
    this._tajribaPart = bsu();
    this._connected = bs(false);
    this._connecting = bs(false);
    this._stopped = bs(false);
    let session;
    let connected = false;
    this._sessionsSub = subscribeAsync(
      merge(taj.connected, sessions),
      async (sessionOrConnected) => {
        if (typeof sessionOrConnected === "boolean") {
          connected = sessionOrConnected;
        } else {
          session = sessionOrConnected;
        }
        if (!session || !connected) {
          return;
        }
        if (this._connected.getValue() || this._connecting.getValue()) {
          return;
        }
        this._connecting.next(true);
        try {
          const tajPart = await taj.sessionParticipant(
            session.token,
            session.participant
          );
          this._tajribaPart.next(tajPart);
          if (tajPart.connected) {
            this._connected.next(true);
            this._connecting.next(false);
          }
          tajPart.on("connected", () => {
            if (!this._connected.getValue()) {
              this._connected.next(true);
              this._connecting.next(false);
            }
          });
          tajPart.on("disconnected", () => {
            if (this._connected.getValue()) {
              this._connected.next(false);
              this._connecting.next(false);
            }
          });
          tajPart.on("error", (err) => {
            this._connecting.next(false);
            error("conn error", err);
          });
          tajPart.on("accessDenied", () => {
            if (this._connected.getValue()) {
              this._connected.next(false);
              this._connecting.next(false);
            }
            console.log(
              "accessDenied",
              session == null ? void 0 : session.participant.id,
              session == null ? void 0 : session.token
            );
            this.resetSession();
          });
        } catch (err) {
          if (err !== ErrNotConnected) {
            error("new conn error", err);
            this.resetSession();
          }
        }
      }
    );
  }
  stop() {
    if (this._stopped.getValue()) {
      return;
    }
    const taj = this._tajribaPart.getValue();
    if (taj) {
      taj.removeAllListeners("connected");
      taj.removeAllListeners("disconnected");
      taj.stop();
      this._tajribaPart.next(void 0);
    }
    this._sessionsSub.unsubscribe();
    this._connecting.next(false);
    this._connected.next(false);
    this._stopped.next(true);
  }
  get connecting() {
    return this._connecting;
  }
  get connected() {
    return this._connected;
  }
  get stopped() {
    return this._stopped;
  }
  get participant() {
    return this._tajribaPart;
  }
};
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
var storage;
if (isBrowser) {
  storage = window.localStorage;
}
var _ParticipantSession = class {
  constructor(ns2, resetSession) {
    this.ns = ns2;
    this._token = this.strg.getItem(this.tokenKey) || void 0;
    const participantStr = this.strg.getItem(this.partKey) || void 0;
    if (participantStr) {
      this._participant = JSON.parse(participantStr);
    }
    const sess = this.calcSession();
    this._sessions = bsu(sess);
    resetSession.subscribe({
      next: () => {
        this.clearSession();
      }
    });
  }
  get sessions() {
    return this._sessions;
  }
  get session() {
    return this._sessions.getValue();
  }
  get token() {
    return this._token;
  }
  get participant() {
    return this._participant;
  }
  get tokenKey() {
    return `${_ParticipantSession.tokenKey}:${this.ns}`;
  }
  get partKey() {
    return `${_ParticipantSession.partKey}:${this.ns}`;
  }
  updateSession(token, participant) {
    this.strg.setItem(this.tokenKey, token);
    this.strg.setItem(this.partKey, JSON.stringify(participant));
    this._token = token;
    this._participant = participant;
    this._sessions.next(this.calcSession());
  }
  clearSession() {
    delete this._token;
    delete this._participant;
    this.strg.removeItem(this.tokenKey);
    this.strg.removeItem(this.partKey);
    this._sessions.next(void 0);
  }
  calcSession() {
    if (this._token && this._participant) {
      return {
        token: this._token,
        participant: this._participant
      };
    }
    return void 0;
  }
  get strg() {
    return _ParticipantSession.storage;
  }
};
var ParticipantSession = _ParticipantSession;
ParticipantSession.tokenKey = "empirica:token";
ParticipantSession.partKey = "empirica:participant";
ParticipantSession.storage = storage;
var ParticipantContext = class {
  constructor(url, ns2) {
    this.provider = bsu();
    this.globals = bsu();
    this.tajriba = new TajribaConnection(url);
    this.resetSession = new Subject();
    this.session = new ParticipantSession(ns2, this.resetSession);
    this.participant = new ParticipantConnection(
      this.tajriba,
      this.session.sessions,
      this.resetSession.next.bind(this.resetSession)
    );
    subscribeAsync(this.participant.connected, async (connected) => {
      const part = this.participant.participant.getValue();
      if (connected && part) {
        if (!this.provider.getValue()) {
          this.provider.next(
            new TajribaProvider(
              part.changes(),
              this.tajriba.tajriba.globalAttributes(),
              part.setAttributes.bind(part)
            )
          );
        }
      } else {
        const provider = this.provider.getValue();
        if (provider) {
          this.provider.next(void 0);
        }
      }
    });
    subscribeAsync(this.tajriba.connected, async (connected) => {
      if (connected) {
        this.globals.next(new Globals(this.tajriba.tajriba.globalAttributes()));
      } else {
        const glob = this.globals.getValue();
        if (glob) {
          this.globals.next(void 0);
        }
      }
    });
  }
  get connecting() {
    return this.participant.connecting;
  }
  get connected() {
    return this.participant.connected;
  }
  async register(playerIdentifier) {
    if (!this.tajriba.connected.getValue()) {
      throw ErrNotConnected;
    }
    const [token, participant] = await this.tajriba.tajriba.registerParticipant(
      playerIdentifier
    );
    if (!token) {
      throw new Error("invalid registration");
    }
    this.session.updateSession(token, participant);
  }
  stop() {
    this.tajriba.stop();
    this.participant.stop();
  }
};
var ParticipantMode = class {
  constructor(participant, provider, modeFunc) {
    this._mode = new BehaviorSubject(void 0);
    subscribeAsync(provider, async (provider2) => {
      var _a;
      const id2 = (_a = participant.getValue()) == null ? void 0 : _a.id;
      if (id2 && provider2 && this._mode.getValue()) {
        warn("spurious provider condition");
        window.location.reload();
      }
      if (id2 && provider2) {
        this._mode.next(modeFunc(id2, provider2));
      } else {
        const mode = this._mode.getValue();
        if (mode) {
          this._mode.next(void 0);
        }
      }
    });
  }
  get mode() {
    return this._mode;
  }
};
var ParticipantModeContext = class extends ParticipantContext {
  constructor(url, ns2, modeFunc) {
    super(url, ns2);
    this._mode = new ParticipantMode(
      this.participant.participant,
      this.provider,
      modeFunc
    );
  }
  get mode() {
    return this._mode.mode;
  }
};
var defaultTitle$1 = "Do you consent to participate in this experiment?";
var defaultText$1 = `This experiment is part of a scientific project. Your decision
to participate in this experiment is entirely voluntary. There
are no known or anticipated risks to participating in this
experiment. There is no way for us to identify you. The only
information we will have, in addition to your responses, is
the timestamps of your interactions with our site. The results
of our research may be presented at scientific meetings or
published in scientific journals. Clicking on the "I AGREE"
button indicates that you are at least 18 years of age, and
agree to participate voluntary.`;
var defaultButtonText$1 = "I AGREE";
function Consent({
  title = defaultTitle$1,
  text = defaultText$1,
  buttonText = defaultButtonText$1,
  onConsent
}) {
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      className: "relative h-full z-10 overflow-y-auto",
      "aria-labelledby": "modal-title",
      role: "dialog",
      "aria-modal": "true"
    },
    /* @__PURE__ */ React.createElement("div", { className: "flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0" }, /* @__PURE__ */ React.createElement(
      "div",
      {
        className: "absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity",
        "aria-hidden": "true"
      }
    ), /* @__PURE__ */ React.createElement(
      "span",
      {
        className: "hidden sm:inline-block sm:align-middle sm:h-screen",
        "aria-hidden": "true"
      },
      "\u200B"
    ), /* @__PURE__ */ React.createElement("div", { className: "inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100" }, /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-6 w-6 text-green-600",
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        stroke: "currentColor",
        "aria-hidden": "true"
      },
      /* @__PURE__ */ React.createElement(
        "path",
        {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "2",
          d: "M5 13l4 4L19 7"
        }
      )
    )), /* @__PURE__ */ React.createElement("div", { className: "mt-3 sm:mt-5" }, /* @__PURE__ */ React.createElement(
      "h3",
      {
        className: "text-lg text-center leading-6 font-medium text-gray-900",
        id: "modal-title"
      },
      title
    ), /* @__PURE__ */ React.createElement("div", { className: "mt-2" }, /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500 text-justify" }, text)))), /* @__PURE__ */ React.createElement("div", { className: "mt-5 sm:mt-6" }, /* @__PURE__ */ React.createElement(
      "button",
      {
        type: "button",
        className: "inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-empirica-600 text-base font-medium text-white hover:bg-empirica-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500 sm:text-sm",
        onClick: onConsent
      },
      buttonText
    ))))
  );
}
function Logo() {
  return /* @__PURE__ */ React.createElement(
    "svg",
    {
      className: "h-full w-full fill-current",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 195 185"
    },
    /* @__PURE__ */ React.createElement("path", { d: "M25.164 81.9737C22.31 81.9737 19.998 84.2877 20 87.1417L20.028 128.458C20.03 131.309 22.341 133.619 25.192 133.619C28.046 133.619 30.359 131.304 30.357 128.451L30.328 87.1347C30.326 84.2837 28.015 81.9737 25.164 81.9737Z" }),
    /* @__PURE__ */ React.createElement("path", { d: "M87.1367 61.3158C84.2837 61.3158 81.9707 63.6298 81.9727 66.4828L82.0017 118.128C82.0037 120.979 84.3147 123.29 87.1667 123.29C90.0197 123.29 92.3327 120.976 92.3307 118.122L92.3007 66.4778C92.2997 63.6258 89.9877 61.3158 87.1367 61.3158Z" }),
    /* @__PURE__ */ React.createElement("path", { d: "M107.793 20C104.94 20 102.628 22.313 102.629 25.166L102.661 159.442C102.662 162.294 104.974 164.605 107.826 164.605C110.679 164.605 112.991 162.293 112.99 159.44L112.957 25.163C112.957 22.311 110.645 20 107.793 20Z" }),
    /* @__PURE__ */ React.createElement("path", { d: "M128.451 20C125.598 20 123.286 22.313 123.287 25.166L123.319 159.442C123.32 162.294 125.632 164.605 128.484 164.605C131.337 164.605 133.649 162.293 133.648 159.44L133.615 25.163C133.615 22.311 131.303 20 128.451 20Z" }),
    /* @__PURE__ */ React.createElement("path", { d: "M149.11 20C146.257 20 143.944 22.313 143.946 25.167L143.977 102.634C143.978 105.485 146.29 107.796 149.141 107.796C151.994 107.796 154.307 105.483 154.306 102.63L154.274 25.162C154.273 22.311 151.961 20 149.11 20Z" }),
    /* @__PURE__ */ React.createElement("path", { d: "M169.75 40.6579C166.897 40.6579 164.585 42.9709 164.586 45.8239L164.617 138.785C164.618 141.637 166.93 143.948 169.782 143.948C172.635 143.948 174.947 141.634 174.946 138.781L174.914 45.8209C174.914 42.9689 172.602 40.6579 169.75 40.6579Z" }),
    /* @__PURE__ */ React.createElement("path", { d: "M45.8203 61.3158C42.9673 61.3158 40.6553 63.6288 40.6563 66.4818L40.6873 159.443C40.6883 162.295 43.0003 164.606 45.8523 164.606C48.7053 164.606 51.0173 162.292 51.0163 159.439L50.9843 66.4788C50.9843 63.6268 48.6723 61.3158 45.8203 61.3158Z" }),
    /* @__PURE__ */ React.createElement("path", { d: "M66.4785 61.3158C63.6255 61.3158 61.3135 63.6288 61.3145 66.4818L61.3455 159.443C61.3465 162.295 63.6585 164.606 66.5105 164.606C69.3635 164.606 71.6755 162.292 71.6745 159.439L71.6425 66.4788C71.6415 63.6268 69.3305 61.3158 66.4785 61.3158Z" })
  );
}
var ParticipantCtx = React.createContext(void 0);
var contexts = {};
function EmpiricaParticipant({
  url,
  ns: ns2,
  modeFunc,
  children
}) {
  let partCtx;
  if (ns2 in contexts) {
    partCtx = contexts[ns2];
  } else {
    if (modeFunc) {
      partCtx = new ParticipantModeContext(url, ns2, modeFunc);
    } else {
      partCtx = new ParticipantContext(url, ns2);
    }
    contexts[ns2] = partCtx;
  }
  return /* @__PURE__ */ React.createElement(ParticipantCtx.Provider, { value: partCtx }, children);
}
function useParticipantContext() {
  return react.exports.useContext(ParticipantCtx);
}
function useTajribaConnected() {
  return useTajribaCtxKey("connected");
}
function usePartConnected() {
  return usePartCtxKey("connected");
}
function useTajriba() {
  const ctx = useParticipantContext();
  return ctx == null ? void 0 : ctx.tajriba;
}
function useGlobal() {
  const ctx = usePartCtxKey("globals");
  const [val, setVal] = react.exports.useState({ g: void 0 });
  react.exports.useEffect(() => {
    if (!ctx || !ctx.self) {
      return;
    }
    const sub = ctx.self.subscribe({
      next(g2) {
        setVal({ g: g2 });
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [ctx]);
  return val.g;
}
var defaultConsentKey = "empirica:consent";
function useConsent(ns2 = "") {
  const key = `${defaultConsentKey}${ns2 ? `:${ns2}` : ""}`;
  const getConsented = () => Boolean(window.localStorage[key]);
  const [consented, setConsented] = react.exports.useState(getConsented());
  function onConsent() {
    window.localStorage[key] = true;
    setConsented(true);
  }
  return [consented, consented ? void 0 : onConsent];
}
function usePlayerID() {
  const ctx = useParticipantContext();
  const [connecting, setConnecting] = react.exports.useState(true);
  const [playerID, setPlayerID] = react.exports.useState(void 0);
  const [changePlayerID, setChangePlayerID] = react.exports.useState(void 0);
  react.exports.useEffect(() => {
    if (!ctx) {
      return;
    }
    let _connecting = true;
    let session;
    const sub = merge(
      ctx.participant.connecting,
      ctx.session.sessions
    ).subscribe({
      next(sessionOrConnecting) {
        if (typeof sessionOrConnecting === "boolean") {
          setConnecting(sessionOrConnecting);
          _connecting = sessionOrConnecting;
        } else {
          session = sessionOrConnecting;
        }
        if (_connecting) {
          setPlayerID(void 0);
          setChangePlayerID(void 0);
        } else if (!session) {
          setPlayerID(void 0);
          setChangePlayerID(() => async (playerIdentifier) => {
            await ctx.register(playerIdentifier);
          });
        } else {
          setPlayerID(session.participant.identifier);
          setChangePlayerID(void 0);
        }
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [ctx]);
  return [connecting, playerID, changePlayerID];
}
function useTajribaCtxKey(name) {
  return useCtxKey(useTajriba, name);
}
function usePartCtxKey(name) {
  return useCtxKey(useParticipantContext, name);
}
function useCtxKey(ctxFunc, name) {
  const ctx = ctxFunc();
  const [val, setVal] = react.exports.useState(void 0);
  react.exports.useEffect(() => {
    if (!ctx || !ctx[name]) {
      return;
    }
    const obs = ctx[name];
    const sub = obs.subscribe({
      next(g2) {
        setVal(g2);
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [ctx]);
  return val;
}
function EmpiricaMenu({ position = "bottom-left" }) {
  const ctx = useParticipantContext();
  if (!ctx) {
    return null;
  }
  function resetSession() {
    ctx.session.clearSession();
    window.location.reload();
  }
  let className = "backdrop-blur-md bg-gray-200/50 rounded fixed z-20 flex space-x-1 text-gray-500";
  switch (position) {
    case "top":
      className += " top-0 mt-2 ml-1/2 -translate-x-1/2";
      break;
    case "top-left":
      className += " top-0 left-0 mt-2 ml-2";
      break;
    case "top-right":
      className += " top-0 right-0 mt-2 mr-2";
      break;
    case "bottom":
      className += " bottom-0 mb-2 ml-1/2 -translate-x-1/2";
      break;
    case "bottom-right":
      className += " bottom-0 right-0 mb-2 mr-2";
      break;
    case "bottom-left":
    default:
      className += " bottom-0 left-0 mb-2 ml-2";
      break;
  }
  const buttons = [
    {
      onClick: () => {
        window.open("https://empirica.ly", "_blank");
      },
      icon: /* @__PURE__ */ React.createElement(Logo, null),
      title: "Empirica",
      inDevOnly: position === "top" || position === "bottom"
    },
    {
      onClick: () => createNewParticipant(),
      icon: /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          fill: "none",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          className: "h-full w-full stroke-current"
        },
        /* @__PURE__ */ React.createElement("path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" }),
        /* @__PURE__ */ React.createElement("circle", { cx: "9", cy: "7", r: "4" }),
        /* @__PURE__ */ React.createElement("line", { x1: "19", x2: "19", y1: "8", y2: "14" }),
        /* @__PURE__ */ React.createElement("line", { x1: "22", x2: "16", y1: "11", y2: "11" })
      ),
      inDevOnly: true,
      title: "New Participant"
    },
    {
      onClick: resetSession,
      icon: /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          fill: "none",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          className: "h-full w-full stroke-current"
        },
        /* @__PURE__ */ React.createElement("path", { d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" }),
        /* @__PURE__ */ React.createElement("path", { d: "M3 3v5h5" })
      ),
      inDevOnly: true,
      title: "Reset Session"
    },
    {
      onClick: () => {
        window.open("/admin", "_blank");
      },
      icon: /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          fill: "none",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          className: "h-full w-full stroke-current"
        },
        /* @__PURE__ */ React.createElement("path", { d: "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z" })
      ),
      inDevOnly: true,
      title: "Admin"
    },
    {
      onClick: () => {
        window.open("https://docs.empirica.ly", "_blank");
      },
      icon: /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          fill: "none",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          className: "h-full w-full stroke-current"
        },
        /* @__PURE__ */ React.createElement("path", { d: "M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z" }),
        /* @__PURE__ */ React.createElement("path", { d: "M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z" })
      ),
      inDevOnly: true,
      title: "Documentation"
    }
  ];
  return /* @__PURE__ */ React.createElement("div", { className }, buttons.map((button, i2) => {
    let sizing = "";
    if (i2 === 0) {
      sizing = "w-9 h-8 p-1.5 pl-2.5";
      if (buttons.length === 0) {
        sizing += " pr-2.5";
      }
    } else if (i2 === buttons.length - 1) {
      sizing += "w-8.5 h-8 p-2 pr-2.5";
    }
    return /* @__PURE__ */ React.createElement(ToolButton, { key: i2, ...button, sizing });
  }));
}
function ToolButton({
  onClick,
  icon,
  title,
  sizing = "",
  inDevOnly = false
}) {
  if (inDevOnly && !isDevelopment) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null);
  }
  let size = "w-8 h-8 p-2";
  if (sizing) {
    size = sizing;
  }
  let className = "block bg-transparent hover:text-empirica-600 hover:bg-gray-300 rounded " + size;
  return /* @__PURE__ */ React.createElement("button", { onClick, className, title }, icon);
}
function Finished() {
  return /* @__PURE__ */ React.createElement("div", { className: "h-full flex flex-col items-center justify-center" }, /* @__PURE__ */ React.createElement("h2", { className: "font-medium text-gray-700" }, "Finished"), /* @__PURE__ */ React.createElement("p", { className: "mt-2 text-gray-400" }, "Thank you for participating"));
}
function Loading() {
  return /* @__PURE__ */ React.createElement("div", { className: "h-full w-full flex items-center justify-center" }, /* @__PURE__ */ React.createElement(
    "svg",
    {
      width: "44",
      height: "44",
      viewBox: "0 0 44 44",
      xmlns: "http://www.w3.org/2000/svg",
      className: "text-empirica-200 stroke-current"
    },
    /* @__PURE__ */ React.createElement("g", { fill: "none", fillRule: "evenodd", strokeWidth: "2" }, /* @__PURE__ */ React.createElement("circle", { cx: "22", cy: "22", r: "1" }, /* @__PURE__ */ React.createElement(
      "animate",
      {
        attributeName: "r",
        begin: "0s",
        dur: "1.8s",
        values: "1; 20",
        calcMode: "spline",
        keyTimes: "0; 1",
        keySplines: "0.165, 0.84, 0.44, 1",
        repeatCount: "indefinite"
      }
    ), /* @__PURE__ */ React.createElement(
      "animate",
      {
        attributeName: "stroke-opacity",
        begin: "0s",
        dur: "1.8s",
        values: "1; 0",
        calcMode: "spline",
        keyTimes: "0; 1",
        keySplines: "0.3, 0.61, 0.355, 1",
        repeatCount: "indefinite"
      }
    )), /* @__PURE__ */ React.createElement("circle", { cx: "22", cy: "22", r: "1" }, /* @__PURE__ */ React.createElement(
      "animate",
      {
        attributeName: "r",
        begin: "-0.9s",
        dur: "1.8s",
        values: "1; 20",
        calcMode: "spline",
        keyTimes: "0; 1",
        keySplines: "0.165, 0.84, 0.44, 1",
        repeatCount: "indefinite"
      }
    ), /* @__PURE__ */ React.createElement(
      "animate",
      {
        attributeName: "stroke-opacity",
        begin: "-0.9s",
        dur: "1.8s",
        values: "1; 0",
        calcMode: "spline",
        keyTimes: "0; 1",
        keySplines: "0.3, 0.61, 0.355, 1",
        repeatCount: "indefinite"
      }
    )))
  ));
}
function NoGames() {
  return /* @__PURE__ */ React.createElement("div", { className: "h-screen flex items-center justify-center" }, /* @__PURE__ */ React.createElement("div", { className: "w-92 flex flex-col items-center" }, /* @__PURE__ */ React.createElement("h2", { className: "text-gray-700 font-medium" }, "No experiments available"), /* @__PURE__ */ React.createElement("p", { className: "mt-2 text-gray-400 text-justify" }, "There are currently no available experiments. Please wait until an experiment becomes available or come back at a later date."), ""));
}
function PlayerCreate({ onPlayerID, connecting }) {
  const [playerID, setPlayerID] = react.exports.useState("");
  const handleSubmit = (evt) => {
    evt.preventDefault();
    if (!playerID || playerID.trim() === "") {
      return;
    }
    onPlayerID(playerID);
  };
  return /* @__PURE__ */ React.createElement("div", { className: "min-h-screen bg-empirica-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" }, /* @__PURE__ */ React.createElement("div", { className: "sm:mx-auto sm:w-full sm:max-w-md" }, /* @__PURE__ */ React.createElement("h2", { className: "mt-6 text-center text-3xl font-extrabold text-gray-900" }, "Enter your Player Identifier")), /* @__PURE__ */ React.createElement("div", { className: "mt-8 sm:mx-auto sm:w-full sm:max-w-md" }, /* @__PURE__ */ React.createElement("div", { className: "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" }, /* @__PURE__ */ React.createElement(
    "form",
    {
      className: "space-y-6",
      action: "#",
      method: "POST",
      onSubmit: handleSubmit
    },
    /* @__PURE__ */ React.createElement("fieldset", { disabled: connecting }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
      "label",
      {
        htmlFor: "email",
        className: "block text-sm font-medium text-gray-700"
      },
      "Identifier"
    ), /* @__PURE__ */ React.createElement("div", { className: "mt-1" }, /* @__PURE__ */ React.createElement(
      "input",
      {
        id: "playerID",
        name: "playerID",
        type: "text",
        autoComplete: "off",
        required: true,
        autoFocus: true,
        className: "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-empirica-500 focus:border-empirica-500 sm:text-sm",
        value: playerID,
        onChange: (e2) => setPlayerID(e2.target.value)
      }
    ), /* @__PURE__ */ React.createElement(
      "p",
      {
        className: "mt-2 text-sm text-gray-500",
        id: "playerID-description"
      },
      "This should be given to you. E.g. email, code..."
    ))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
      "button",
      {
        type: "submit",
        className: "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-empirica-600 hover:bg-empirica-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500"
      },
      "Enter"
    )))
  ))));
}
function usePlayer() {
  return usePartModeCtxKey(
    "player"
  );
}
function useGame() {
  return usePartModeCtxKey("game");
}
function useRound() {
  return usePartModeCtxKey(
    "round"
  );
}
function useStage() {
  return usePartModeCtxKey(
    "stage"
  );
}
function usePlayers() {
  return usePartModeCtxKey(
    "players"
  );
}
function usePartModeCtx() {
  var _a;
  const ctx = useParticipantContext();
  const [mode, setMode] = react.exports.useState({
    data: (_a = ctx == null ? void 0 : ctx.mode) == null ? void 0 : _a.getValue()
  });
  react.exports.useEffect(() => {
    if (!ctx || !ctx.mode) {
      return;
    }
    const sub = ctx.mode.subscribe({
      next(m2) {
        setMode({ data: m2 });
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [ctx]);
  return mode.data;
}
function usePartModeCtxKey(name) {
  const mode = usePartModeCtx();
  const iniVal = mode && mode[name];
  const [val, setVal] = react.exports.useState({
    data: iniVal == null ? void 0 : iniVal.getValue()
  });
  react.exports.useEffect(() => {
    if (!mode) {
      return;
    }
    const obs = mode[name];
    const sub = obs.subscribe({
      next(val2) {
        setVal({ data: val2 });
      }
    });
    return sub.unsubscribe.bind(sub);
  }, [mode]);
  return val.data;
}
function Lobby() {
  const player2 = usePlayer();
  if (!player2) {
    return /* @__PURE__ */ React.createElement(Loading, null);
  }
  const treatment = player2.get("treatment");
  if (!treatment || !treatment.playerCount) {
    warn("lobby: no treatment found on player");
    return /* @__PURE__ */ React.createElement(Loading, null);
  }
  return /* @__PURE__ */ React.createElement("div", { className: "flex h-full items-center justify-center" }, /* @__PURE__ */ React.createElement("div", { className: "text-center" }, /* @__PURE__ */ React.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 640 512",
      className: "mx-auto h-12 w-12 text-gray-400",
      stroke: "none",
      fill: "currentColor",
      "aria-hidden": "true"
    },
    /* @__PURE__ */ React.createElement("path", { d: "M544 224c44.2 0 80-35.8 80-80s-35.8-80-80-80-80 35.8-80 80 35.8 80 80 80zm0-128c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zM320 256c61.9 0 112-50.1 112-112S381.9 32 320 32 208 82.1 208 144s50.1 112 112 112zm0-192c44.1 0 80 35.9 80 80s-35.9 80-80 80-80-35.9-80-80 35.9-80 80-80zm244 192h-40c-15.2 0-29.3 4.8-41.1 12.9 9.4 6.4 17.9 13.9 25.4 22.4 4.9-2.1 10.2-3.3 15.7-3.3h40c24.2 0 44 21.5 44 48 0 8.8 7.2 16 16 16s16-7.2 16-16c0-44.1-34.1-80-76-80zM96 224c44.2 0 80-35.8 80-80s-35.8-80-80-80-80 35.8-80 80 35.8 80 80 80zm0-128c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm304.1 180c-33.4 0-41.7 12-80.1 12-38.4 0-46.7-12-80.1-12-36.3 0-71.6 16.2-92.3 46.9-12.4 18.4-19.6 40.5-19.6 64.3V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-44.8c0-23.8-7.2-45.9-19.6-64.3-20.7-30.7-56-46.9-92.3-46.9zM480 432c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16v-44.8c0-16.6 4.9-32.7 14.1-46.4 13.8-20.5 38.4-32.8 65.7-32.8 27.4 0 37.2 12 80.2 12s52.8-12 80.1-12c27.3 0 51.9 12.3 65.7 32.8 9.2 13.7 14.1 29.8 14.1 46.4V432zM157.1 268.9c-11.9-8.1-26-12.9-41.1-12.9H76c-41.9 0-76 35.9-76 80 0 8.8 7.2 16 16 16s16-7.2 16-16c0-26.5 19.8-48 44-48h40c5.5 0 10.8 1.2 15.7 3.3 7.5-8.5 16.1-16 25.4-22.4z" })
  ), /* @__PURE__ */ React.createElement("h3", { className: "mt-2 text-sm font-medium text-gray-900" }, treatment.playerCount > 1 ? "Waiting for other players" : "Game loading"), /* @__PURE__ */ React.createElement("p", { className: "mt-1 text-sm text-gray-500" }, "Please wait for the game to be ready.")));
}
function Steps({
  steps,
  progressKey,
  doneKey,
  object,
  children
}) {
  let obj;
  const game = useGame();
  const player2 = usePlayer();
  const [stps, setStps] = react.exports.useState([]);
  const [stpsSet, setStpsSet] = react.exports.useState(false);
  react.exports.useEffect(() => {
    let s4;
    if (typeof steps === "function") {
      s4 = steps({ game, player: player2 });
    } else {
      s4 = steps;
    }
    setStps(s4);
    setStpsSet(true);
  }, [steps]);
  react.exports.useEffect(() => {
    if (obj && !obj.get(doneKey) && stpsSet && (!stps || stps.length === 0)) {
      obj.set(doneKey, true);
    }
  }, [stps]);
  if (object) {
    obj = object;
  } else if (player2) {
    obj = player2;
  } else {
    error("no receiver and no player in Steps");
    return /* @__PURE__ */ React.createElement("div", null, "Missing attribute");
  }
  if (obj.get(doneKey)) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  }
  const index2 = obj.get(progressKey) || 0;
  const next = () => {
    if (index2 + 1 >= stps.length) {
      obj.set(doneKey, true);
    } else {
      obj.set(progressKey, index2 + 1);
    }
  };
  const previous = () => {
    if (index2 > 0) {
      obj.set(progressKey, index2 - 1);
    }
  };
  const Step2 = stps[index2];
  if (!Step2) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null);
  }
  return /* @__PURE__ */ React.createElement(Step2, { index: index2, previous, next });
}
function EmpiricaContext({
  noGames: NoGamesComp = NoGames,
  consent: ConsentComp = Consent,
  playerCreate: PlayerCreateForm = PlayerCreate,
  introSteps = [],
  lobby = Lobby,
  exitSteps = [],
  finished = Finished,
  loading: LoadingComp = Loading,
  connecting: ConnectingComp = Loading,
  unmanagedGame = false,
  unmanagedAssignment = false,
  disableConsent = false,
  disableNoGames = false,
  disableURLParamsCapture = false,
  children
}) {
  const tajribaConnected = useTajribaConnected();
  const participantConnected = usePartConnected();
  const globals = useGlobal();
  const player2 = usePlayer();
  const game = useGame();
  const [connecting, hasPlayer, onPlayerID] = usePlayerID();
  const [consented, onConsent] = useConsent();
  if (!tajribaConnected || connecting) {
    return /* @__PURE__ */ React.createElement(ConnectingComp, null);
  }
  if (player2 && player2.get("ended")) {
    return /* @__PURE__ */ React.createElement(Exit, { exitSteps, finished });
  }
  if (!globals || hasPlayer && (!participantConnected || !player2 || game === void 0)) {
    return /* @__PURE__ */ React.createElement(LoadingComp, null);
  }
  if (!disableNoGames && !globals.get("experimentOpen") && (!hasPlayer || !(player2 == null ? void 0 : player2.get("gameID")))) {
    return /* @__PURE__ */ React.createElement(NoGamesComp, null);
  }
  if (!disableConsent && !consented) {
    return /* @__PURE__ */ React.createElement(ConsentComp, { onConsent });
  }
  if (!hasPlayer) {
    return /* @__PURE__ */ React.createElement(PlayerCreateForm, { onPlayerID, connecting });
  }
  if (!player2 || !unmanagedGame && !game) {
    return /* @__PURE__ */ React.createElement(LoadingComp, null);
  }
  if (!disableURLParamsCapture && !player2.get("urlParams")) {
    const urlParams = new URLSearchParams(window.location.search);
    player2.set("urlParams", Object.fromEntries(urlParams.entries()));
  }
  if (unmanagedAssignment) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  }
  if (game && game.hasEnded) {
    if (!player2.get("ended")) {
      return /* @__PURE__ */ React.createElement(LoadingComp, null);
    }
    return /* @__PURE__ */ React.createElement(Exit, { exitSteps, finished });
  }
  return /* @__PURE__ */ React.createElement(Steps, { progressKey: "intro", doneKey: "introDone", steps: introSteps }, /* @__PURE__ */ React.createElement(
    EmpiricaInnerContext,
    {
      exitSteps,
      lobby,
      finished,
      loading: LoadingComp,
      unmanagedGame
    },
    children
  ));
}
function EmpiricaInnerContext({
  children,
  lobby: Lobby2,
  finished,
  exitSteps,
  loading: LoadingComp,
  unmanagedGame = false
}) {
  const player2 = usePlayer();
  const game = useGame();
  const allReady = useAllReady();
  if (!game) {
    if (unmanagedGame) {
      return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
    } else {
      return /* @__PURE__ */ React.createElement(LoadingComp, null);
    }
  }
  if (!Boolean(game.get("status"))) {
    return /* @__PURE__ */ React.createElement(Lobby2, null);
  }
  if (game.hasEnded) {
    if (!(player2 == null ? void 0 : player2.get("ended"))) {
      return /* @__PURE__ */ React.createElement(LoadingComp, null);
    }
    return /* @__PURE__ */ React.createElement(Exit, { exitSteps, finished });
  }
  if (unmanagedGame || allReady) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  }
  return /* @__PURE__ */ React.createElement(LoadingComp, null);
}
function Exit({
  exitSteps,
  finished: Finished2
}) {
  return /* @__PURE__ */ React.createElement(Steps, { progressKey: "exitStep", doneKey: "exitStepDone", steps: exitSteps }, /* @__PURE__ */ React.createElement(Finished2, null));
}
function useAllReady() {
  const player2 = usePlayer();
  const players = usePlayers();
  const game = useGame();
  const stage = useStage();
  const round = useRound();
  if (!player2 || !players || !stage || !round || !game || !player2.game || !player2.round || !player2.stage) {
    return false;
  }
  const treatment = game.get("treatment");
  const playerCount = treatment["playerCount"];
  if (players.length < playerCount) {
    return false;
  }
  for (const p2 of players) {
    if (!p2.game || !p2.round || !p2.stage) {
      return false;
    }
  }
  return true;
}
const base$2 = "inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500";
function AudioRoom({
  userName,
  roomCode,
  className = "",
  forceJoin = false
}) {
  const player2 = usePlayer();
  const hmsActions = v();
  const handleSubmit = async (e2) => {
    const authToken = await hmsActions.getAuthTokenByRoomCode({ roomCode });
    try {
      player2.stage.set("joinedRoom", true);
      console.log(player2.stage.get("joinedRoom", true));
      await hmsActions.join({ userName, authToken });
    } catch (e22) {
      console.error("Error joining room:", e22);
    }
  };
  if (forceJoin) {
    handleSubmit();
    return null;
  } else {
    return /* @__PURE__ */ React.createElement("button", {
      className: `${base$2} ${className}`,
      onClick: handleSubmit
    }, "Join");
  }
}
function Choice() {
  usePlayer();
  return /* @__PURE__ */ React.createElement("div", null);
}
const base$1 = "inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500";
const prim = "border-gray-300 shadow-sm text-gray-700 bg-white hover:bg-gray-50";
const sec = "border-transparent shadow-sm text-white bg-empirica-600 hover:bg-empirica-700";
function Button({
  children,
  handleClick = null,
  className = "",
  primary = false,
  type = "button",
  autoFocus = false,
  disabled = false
}) {
  return /* @__PURE__ */ React.createElement("button", {
    type,
    onClick: handleClick,
    disabled,
    className: `${base$1} ${primary ? prim : sec} ${className}`,
    autoFocus
  }, children);
}
function Result() {
  const player2 = usePlayer();
  const round = useRound();
  const rightSelection = round.get("decision") == round.get("target");
  const messageSubject = player2.get("role") == "guesser" ? "You" : "Your partner";
  const messageContinuation = rightSelection ? " made the right selection!" : " made the wrong selection!";
  const message = messageSubject + messageContinuation;
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", {
    style: { paddingRight: "10px" }
  }, " ", message, "  "), /* @__PURE__ */ React.createElement("td", null, " ", /* @__PURE__ */ React.createElement(Button, {
    handleClick: () => player2.stage.set("submit", true)
  }, " Continue "), " "))));
}
function JoinRoom() {
  const player2 = usePlayer();
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", {
    style: { paddingRight: "10px" }
  }, ' Click "Join" connect to an audio chat with your partner (connecting may take a moment). Say Hello, then press "Continue". '), /* @__PURE__ */ React.createElement("td", null, " ", player2.stage.get("joinedRoom") ? /* @__PURE__ */ React.createElement(Button, {
    handleClick: () => player2.stage.set("submit", true)
  }, " Continue ") : null, " "))));
}
function Train() {
  const player2 = usePlayer();
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", {
    style: { paddingRight: "10px" }
  }, " Memorize the name of this image. "), /* @__PURE__ */ React.createElement("td", null, " ", /* @__PURE__ */ React.createElement(Button, {
    handleClick: () => player2.stage.set("submit", true)
  }, " Continue "), " "))));
}
function Recall() {
  usePlayer();
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tbody", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", {
    style: { paddingRight: "10px" }
  }, " Correctly label the image. ")))));
}
function RecallResult() {
  usePlayer();
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", {
    style: { paddingRight: "10px" }
  }, " Nice job! "))));
}
function ExChoice() {
  const player2 = usePlayer();
  const instructions = player2.get("role") == "director" ? "Describe the target image." : "Click on the target image.";
  player2.get("role") == "director" ? /* @__PURE__ */ React.createElement(Button, {
    handleClick: () => player2.stage.set("submit", true)
  }, " Continue ") : null;
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", {
    style: { paddingRight: "10px" }
  }, " You are the ", /* @__PURE__ */ React.createElement("strong", null, player2.get("role")), ". ", instructions, " "), /* @__PURE__ */ React.createElement("td", null, " ", /* @__PURE__ */ React.createElement(Button, {
    handleClick: () => player2.stage.set("submit", true)
  }, " Continue "), " "))));
}
function ExResult() {
  const player2 = usePlayer();
  player2.get("role") == "director" ? "Describe the target image." : "Click on the target image.";
  player2.get("role") == "director" ? /* @__PURE__ */ React.createElement(Button, {
    handleClick: () => player2.stage.set("submit", true)
  }, " Continue ") : null;
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tbody", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", {
    style: { paddingRight: "10px" }
  }, " Nice job! "), /* @__PURE__ */ React.createElement("td", null, " ", /* @__PURE__ */ React.createElement(Button, {
    handleClick: () => player2.stage.set("submit", true)
  }, " Continue "), " ")))));
}
function Stage() {
  const player2 = usePlayer();
  const stage = useStage();
  if (player2.stage.get("submit")) {
    return /* @__PURE__ */ React.createElement("div", {
      className: "text-center text-gray-400 pointer-events-none"
    }, "Please wait for other player.");
  }
  switch (stage.get("name")) {
    case "joinroom":
      return /* @__PURE__ */ React.createElement(JoinRoom, null);
    case "choice":
      return /* @__PURE__ */ React.createElement(Choice, null);
    case "result":
      return /* @__PURE__ */ React.createElement(Result, null);
    case "train":
      return /* @__PURE__ */ React.createElement(Train, null);
    case "recall":
      return /* @__PURE__ */ React.createElement(Recall, null);
    case "recall-result":
      return /* @__PURE__ */ React.createElement(RecallResult, null);
    case "tutorial-choice":
      return /* @__PURE__ */ React.createElement(ExChoice, null);
    case "tutorial-result":
      return /* @__PURE__ */ React.createElement(ExResult, null);
    case "instructions":
      return /* @__PURE__ */ React.createElement(Button, {
        handleClick: () => player2.stage.set("submit", true)
      }, " Continue ");
    default:
      return /* @__PURE__ */ React.createElement(Loading, null);
  }
}
function Profile() {
  const player2 = usePlayer();
  const round = useRound();
  useStage();
  player2.get("score") || 0;
  return /* @__PURE__ */ React.createElement("div", {
    className: "min-w-lg md:min-w-2xl mt-2 m-x-auto px-3 py-2 text-gray-500 rounded-md grid grid-cols-3 items-center border-.5"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "leading-tight ml-1"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "text-gray-600 font-semibold"
  }, round ? round.get("name") + "/82" : "")), /* @__PURE__ */ React.createElement("div", null, " ", /* @__PURE__ */ React.createElement(Stage, null), " "));
}
function RefGameImage({
  children,
  tag = "",
  handleClick = null
}) {
  const player2 = usePlayer();
  const stage = useStage();
  const round = useRound();
  const highlightImage = (player2.get("role") == "director" || stage.get("name") == "result") & (round.get("target") == tag || stage.get("name") == "result" & round.get("decision") == tag);
  const borderWidth = highlightImage ? "5px" : "0px";
  const borderColor = stage.get("name") == "choice" ? "black" : round.get("target") == tag ? "green" : "red";
  const director_images = /* @__PURE__ */ React.createElement("div", {
    style: { width: "400px", border: `solid ${borderWidth} ${borderColor}`, padding: "2px" }
  }, /* @__PURE__ */ React.createElement("img", {
    onClick: handleClick,
    src: "../../img/finished_stimuli/" + tag + ".jpg",
    className: ""
  }));
  const guessor_images = /* @__PURE__ */ React.createElement("div", {
    style: { width: "400px", border: `solid ${borderWidth} ${borderColor}`, padding: "2px" }
  }, /* @__PURE__ */ React.createElement("img", {
    onClick: handleClick,
    src: "../../img/finished_stimuli/" + tag + ".jpg",
    className: "",
    style: { cursor: "pointer" }
  }));
  if (player2.get("role") == "director") {
    return director_images;
  } else {
    return guessor_images;
  }
}
function Options() {
  const player2 = usePlayer();
  const round = useRound();
  const players = usePlayers();
  const stage = useStage();
  function onClick(choice) {
    if (player2.get("role") == "guesser" & stage.get("name") == "choice") {
      round.set("decision", choice);
      players.map((p2) => p2.stage.set("submit", true));
    }
  }
  const imgOrder = player2.get("role") == "guesser" ? round.get("guesserOrder") : round.get("directorOrder");
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    className: "flex justify-center m-5"
  }, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("caption", null, stage.get("name") == "result" ? null : player2.get("role") == "director" ? /* @__PURE__ */ React.createElement("p", null, " Make a sentence with the verb ", /* @__PURE__ */ React.createElement("strong", null, " ", round.get("verb"), " "), ", to tell your partner what Sally will do: ") : /* @__PURE__ */ React.createElement("p", null, " Please select the picture that shows what Sally will do today, based on your partner's description. ")), /* @__PURE__ */ React.createElement("tbody", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", null, /* @__PURE__ */ React.createElement(RefGameImage, {
    tag: imgOrder[0],
    handleClick: () => onClick(imgOrder[0])
  })), /* @__PURE__ */ React.createElement("td", null, /* @__PURE__ */ React.createElement(RefGameImage, {
    tag: imgOrder[1],
    handleClick: () => onClick(imgOrder[1])
  })), /* @__PURE__ */ React.createElement("td", null, /* @__PURE__ */ React.createElement(RefGameImage, {
    tag: imgOrder[2],
    handleClick: () => onClick(imgOrder[2])
  }))), /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", null, /* @__PURE__ */ React.createElement("img", {
    src: "../../img/sally.png",
    width: "100"
  })))))));
}
function TrainImage({}) {
  const round = useRound();
  return /* @__PURE__ */ React.createElement("div", {
    className: "justify-center m-5",
    style: { width: "400px", padding: "2px" }
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex justify-center m-5",
    style: { width: "360px", border: "solid 5px black", padding: "2px" }
  }, /* @__PURE__ */ React.createElement("img", {
    src: "../../img/nouns/" + round.get("label") + ".png"
  })), /* @__PURE__ */ React.createElement("div", {
    className: "flex justify-center m-5"
  }, /* @__PURE__ */ React.createElement("strong", {
    className: "text-2xl"
  }, round.get("label"))));
}
function RecallImage() {
  const round = useRound();
  const player2 = usePlayer();
  const [formData, setFormData] = react.exports.useState({ userGuess: "" });
  const [errors, setErrors] = react.exports.useState({});
  const handleValidation = () => {
    const formFields = { ...formData };
    const formErrors = {};
    let formIsValid = true;
    let isGoodString = /^[a-zA-Z]+$/.test(formFields["userGuess"]);
    let isEmptyGuess = !formFields["userGuess"];
    console.log(isGoodString);
    if (isEmptyGuess || !isGoodString) {
      formIsValid = false;
      formErrors["userGuess"] = "Cannot be empty";
    }
    setErrors(formErrors);
    return formIsValid;
  };
  const handleCheckAnswer = (event) => {
    console.log("hello");
    if (!handleValidation()) {
      alert("Please enter a name for this object.");
    } else {
      player2.stage.set("checkAnswer", true);
    }
  };
  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));
    player2.round.set("decision", value);
  };
  const handleSubmit = (event) => {
    event.preventDefault();
    player2.stage.set("checkAnswer", true);
  };
  function nounFeedback(userResponse, correctResponse, nounType) {
    const recallCorrectly = /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tbody", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", null, "Great! We called this ", nounType == "count" ? "a" : "", /* @__PURE__ */ React.createElement("strong", null, " ", userResponse), ".")))));
    const recalledIncorrectly = /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tbody", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", null, "Oops! We called this ", nounType == "count" ? "a" : "", /* @__PURE__ */ React.createElement("strong", null, " ", correctResponse), "; you said ", /* @__PURE__ */ React.createElement("strong", null, " ", userResponse), ".")))));
    if (userResponse == correctResponse) {
      return recallCorrectly;
    } else {
      return recalledIncorrectly;
    }
  }
  return /* @__PURE__ */ React.createElement("form", {
    onSubmit: handleSubmit
  }, /* @__PURE__ */ React.createElement("img", {
    src: "../../img/nouns/" + round.get("label") + ".png",
    width: "300"
  }), /* @__PURE__ */ React.createElement("label", {
    htmlFor: "userGuess"
  }), player2.stage.get("checkAnswer") ? null : /* @__PURE__ */ React.createElement("input", {
    type: "text",
    id: "userGuess",
    name: "userGuess",
    value: formData.userGuess,
    onChange: handleChange
  }), player2.stage.get("checkAnswer") ? null : /* @__PURE__ */ React.createElement(Button, {
    handleClick: handleCheckAnswer
  }, " Check Answer "), player2.stage.get("checkAnswer") ? nounFeedback(formData.userGuess, round.get("label"), round.get("nounType")) : null, player2.stage.get("checkAnswer") ? player2.stage.get("submit") ? `Please wait for your partner to check their answer.` : /* @__PURE__ */ React.createElement(Button, {
    handleClick: () => player2.stage.set("submit", true)
  }, " Next ") : null);
}
function Instructions() {
  const round = useRound();
  const player2 = usePlayer();
  function trainInstructions() {
    return /* @__PURE__ */ React.createElement("div", {
      className: "mt-3 sm:mt-5 p-50"
    }, /* @__PURE__ */ React.createElement("h2", null, /* @__PURE__ */ React.createElement("strong", null, "Phase 1: Memorization")), /* @__PURE__ */ React.createElement("ul", {
      className: "list-disc list-inside"
    }, /* @__PURE__ */ React.createElement("li", null, " In this phase, you will see a series of objects with labels. "), /* @__PURE__ */ React.createElement("li", null, " Memorize the label for each object, then click continue. "), /* @__PURE__ */ React.createElement("li", null, " You and your partner see each object at the same time, so remember to click coninue: ", /* @__PURE__ */ React.createElement("strong", null, " they cannot move on without you. "), " "), /* @__PURE__ */ React.createElement("li", null, " There are 44 images to see.")));
  }
  function recallInstructions() {
    return /* @__PURE__ */ React.createElement("div", {
      className: "mt-3 sm:mt-5 p-50"
    }, /* @__PURE__ */ React.createElement("h2", null, /* @__PURE__ */ React.createElement("strong", null, "Phase 2: Recall")), /* @__PURE__ */ React.createElement("ul", {
      className: "list-disc list-inside"
    }, /* @__PURE__ */ React.createElement("li", null, " In this phase, you will test your memory of the objects you learned."), /* @__PURE__ */ React.createElement("li", null, " Once you have labelled one image, click submit to move to the next. "), /* @__PURE__ */ React.createElement("li", null, " You and your partner see each object at the same time, so remember to click coninue: ", /* @__PURE__ */ React.createElement("strong", null, " they cannot move on without you. "), " "), /* @__PURE__ */ React.createElement("li", null, " Don't worry if you cannot remember the name of some of the objects, or about spelling! ")));
  }
  function tutorialInstructionsDirector() {
    return /* @__PURE__ */ React.createElement("div", {
      className: "mt-3 sm:mt-5 p-5"
    }, /* @__PURE__ */ React.createElement("h2", null, /* @__PURE__ */ React.createElement("strong", null, "Tutorial Phase")), /* @__PURE__ */ React.createElement("ul", {
      className: "list-disc list-inside"
    }, /* @__PURE__ */ React.createElement("li", null, " This is Sally. You will be describing what Sally will do today. "), /* @__PURE__ */ React.createElement("li", null, " You will see a verb and three pictures, and you will describe the images to your partner. "), /* @__PURE__ */ React.createElement("li", null, " Please ", /* @__PURE__ */ React.createElement("strong", null, " mention Sally in your sentence, use complete sentences, and remember to use the provided verb. "), " "), /* @__PURE__ */ React.createElement("li", null, " You will now see two examples. ")), /* @__PURE__ */ React.createElement("img", {
      src: "../../img/sally.png",
      width: "150",
      className: "topCenter"
    }));
  }
  function tutorialInstructionsGuesser() {
    return /* @__PURE__ */ React.createElement("div", {
      className: "mt-3 sm:mt-5 p-50"
    }, /* @__PURE__ */ React.createElement("h2", null, /* @__PURE__ */ React.createElement("strong", null, "Tutorial Phase")), /* @__PURE__ */ React.createElement("ul", {
      className: "list-disc list-inside"
    }, /* @__PURE__ */ React.createElement("li", null, " This is Sally. You will be deciding what Sally will do today.  "), /* @__PURE__ */ React.createElement("li", null, " You will see three pictures, and your partner will tell you which image describes what Sally will do today: Please click on the image showing what Sally will do."), /* @__PURE__ */ React.createElement("li", null, " You will now see two examples. ")), /* @__PURE__ */ React.createElement("img", {
      src: "../../img/sally.png",
      width: "150",
      className: "topCenter"
    }));
  }
  function choiceInstructionsGuesser() {
    return /* @__PURE__ */ React.createElement("div", {
      className: "mt-3 sm:mt-5 p-50"
    }, /* @__PURE__ */ React.createElement("h2", null, /* @__PURE__ */ React.createElement("strong", null, "Game Phase")), /* @__PURE__ */ React.createElement("ul", {
      className: "list-disc list-inside"
    }, /* @__PURE__ */ React.createElement("li", null, " You will now be connected with another participant, who will tell you what to click on. "), /* @__PURE__ */ React.createElement("li", null, " Click Continue to join the audio chat and say hello. ")), /* @__PURE__ */ React.createElement("img", {
      src: "../../img/sally.png",
      width: "150",
      className: "topCenter"
    }));
  }
  function choiceInstructionsDirector() {
    return /* @__PURE__ */ React.createElement("div", {
      className: "mt-3 sm:mt-5 p-50"
    }, /* @__PURE__ */ React.createElement("h2", null, /* @__PURE__ */ React.createElement("strong", null, "Game Phase")), /* @__PURE__ */ React.createElement("ul", {
      className: "list-disc list-inside"
    }, /* @__PURE__ */ React.createElement("li", null, " You will now be connected with another participant, and describe the images to them. "), /* @__PURE__ */ React.createElement("li", null, " Click Continue to join the audio chat and say hello. ")), /* @__PURE__ */ React.createElement("img", {
      src: "../../img/sally.png",
      width: "150",
      className: "topCenter"
    }));
  }
  const roundPhase = round.get("instructions");
  const returnme = roundPhase == "tutorial" && player2.get("role") == "director" ? tutorialInstructionsDirector() : roundPhase == "tutorial" && player2.get("role") == "guesser" ? tutorialInstructionsGuesser() : roundPhase == "choice" && player2.get("role") == "director" ? choiceInstructionsDirector() : roundPhase == "choice" && player2.get("role") == "guesser" ? choiceInstructionsGuesser() : roundPhase == "recall" ? recallInstructions() : roundPhase == "train" ? trainInstructions() : console.log(returnme);
  return returnme;
}
function RefGameTutorialImage({
  children,
  tag = "",
  handleClick = null
}) {
  const player2 = usePlayer();
  const stage = useStage();
  const round = useRound();
  const highlightImage = round.get("target") == tag && player2.get("role") == "director" || (round.get("target") == tag && player2.get("role") == "guesser" && stage.get("name") == "tutorial-result" || round.get("decision") == tag && player2.get("role") == "guesser" && stage.get("name") == "tutorial-choice");
  const borderWidth = highlightImage ? "5px" : "0px";
  const borderColor = player2.get("role") == "guesser" && player2.stage.get("submit") ? "black" : "green";
  const director_images = /* @__PURE__ */ React.createElement("div", {
    style: { width: "400px", border: `solid ${borderWidth} ${borderColor}`, padding: "2px" }
  }, /* @__PURE__ */ React.createElement("img", {
    onClick: handleClick,
    src: "../../img/finished_stimuli/" + tag + ".jpg",
    className: ""
  }));
  const guessor_images = /* @__PURE__ */ React.createElement("div", {
    style: { width: "400px", border: `solid ${borderWidth} ${borderColor}`, padding: "2px" }
  }, /* @__PURE__ */ React.createElement("img", {
    onClick: handleClick,
    src: "../../img/finished_stimuli/" + tag + ".jpg",
    className: "",
    style: { cursor: "pointer" }
  }));
  if (player2.get("role") == "director") {
    return director_images;
  } else {
    return guessor_images;
  }
}
function TutorialOptions() {
  const player2 = usePlayer();
  const round = useRound();
  usePlayers();
  const stage = useStage();
  function onClick(choice) {
    if (player2.get("role") == "guesser" & stage.get("name") == "tutorial-choice") {
      round.set("decision", choice);
      player2.stage.set("submit", true);
    }
  }
  const imgOrder = player2.get("role") == "guesser" ? round.get("guesserOrder") : round.get("directorOrder");
  if (player2.get("role") == "director" && stage.get("name") == "tutorial-choice" && !player2.stage.get("submit")) {
    var instructions = /* @__PURE__ */ React.createElement("div", null, "Tell your partner what Sally will do today, shown in the picture circled in green. ", /* @__PURE__ */ React.createElement("br", null), "Please use a full sentence, the verb ", /* @__PURE__ */ React.createElement("strong", null, " ", round.get("verb")), ", and remember to mention Sally.");
  } else if (player2.get("role") == "director" && (stage.get("name") == "tutorial-result" || player2.stage.get("submit"))) {
    var instructions = /* @__PURE__ */ React.createElement("div", null, 'To describe this image, you could have said "', /* @__PURE__ */ React.createElement("strong", null, round.get("sentence")), '".');
  } else if (stage.get("name") == "tutorial-choice" && player2.get("role") == "guesser") {
    var instructions = /* @__PURE__ */ React.createElement("div", null, 'Imagine your partner says "', round.get("sentence"), '". ', /* @__PURE__ */ React.createElement("br", null), " Click on the image you think they are describing.");
  } else if (stage.get("name") == "tutorial-result" && player2.get("role") == "guesser") {
    var instructions = /* @__PURE__ */ React.createElement("div", null, 'Imagine your partner said "', round.get("sentence"), '". ', /* @__PURE__ */ React.createElement("br", null), " You should have clicked on the image highlighted with a green square.");
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: "justify-center m-5"
  }, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("caption", null, instructions), /* @__PURE__ */ React.createElement("tbody", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", null, /* @__PURE__ */ React.createElement(RefGameTutorialImage, {
    tag: imgOrder[0],
    handleClick: () => onClick(imgOrder[0])
  })), /* @__PURE__ */ React.createElement("td", null, /* @__PURE__ */ React.createElement(RefGameTutorialImage, {
    tag: imgOrder[1],
    handleClick: () => onClick(imgOrder[1])
  })), /* @__PURE__ */ React.createElement("td", null, /* @__PURE__ */ React.createElement(RefGameTutorialImage, {
    tag: imgOrder[2],
    handleClick: () => onClick(imgOrder[2])
  }))))));
}
function Game() {
  const stage = useStage();
  const player2 = usePlayer();
  const options = stage.get("name") == "result" & player2.stage.get("submit") ? null : stage.get("name") == "joinroom" ? /* @__PURE__ */ React.createElement(AudioRoom, {
    userName: player2.id,
    roomCode: player2.get("roomCode"),
    forceJoin: false
  }) : stage.get("name") == "train" ? /* @__PURE__ */ React.createElement(TrainImage, null) : stage.get("name") == "recall" ? /* @__PURE__ */ React.createElement(RecallImage, null) : stage.get("name") == "instructions" ? /* @__PURE__ */ React.createElement(Instructions, null) : stage.get("name") == "tutorial-choice" ? /* @__PURE__ */ React.createElement(TutorialOptions, null) : stage.get("name") == "tutorial-result" ? /* @__PURE__ */ React.createElement(TutorialOptions, null) : /* @__PURE__ */ React.createElement(Options, null);
  return /* @__PURE__ */ React.createElement("div", {
    className: "h-full w-full flex"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "h-full w-full flex flex-col"
  }, /* @__PURE__ */ React.createElement(Profile, null), /* @__PURE__ */ React.createElement("div", {
    className: "h-full flex items-center justify-center"
  }, options)));
}
function Alert({ children, title, kind = "normal" }) {
  let bg2, icn, ttl, chld;
  switch (kind) {
    case "warn":
      bg2 = "bg-yellow-50";
      icn = "text-yellow-400";
      ttl = "text-yellow-800";
      chld = "text-yellow-700";
    case "error":
      bg2 = "bg-red-50";
      icn = "text-red-400";
      ttl = "text-red-800";
      chld = "text-red-700";
    case "success":
      bg2 = "bg-green-50";
      icn = "text-green-400";
      ttl = "text-green-800";
      chld = "text-green-700";
    default:
      bg2 = "bg-empirica-50";
      icn = "text-empirica-400";
      ttl = "text-empirica-800";
      chld = "text-empirica-700";
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: `rounded-md p-4 ${bg2}`
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex-shrink-0"
  }, /* @__PURE__ */ React.createElement("svg", {
    className: `h-5 w-5 ${icn}`,
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    "aria-hidden": "true"
  }, /* @__PURE__ */ React.createElement("path", {
    fillRule: "evenodd",
    d: "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z",
    clipRule: "evenodd"
  }))), /* @__PURE__ */ React.createElement("div", {
    className: "ml-3"
  }, /* @__PURE__ */ React.createElement("h3", {
    className: `text-sm font-medium ${ttl}`
  }, title), /* @__PURE__ */ React.createElement("div", {
    className: `mt-2 text-sm text-yellow-700 ${chld}`
  }, children))));
}
function ExitSurvey({ next }) {
  const labelClassName = "block text-sm font-medium text-gray-700 my-2";
  const inputClassName = "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-empirica-500 focus:border-empirica-500 sm:text-sm";
  const player2 = usePlayer();
  const [age, setAge] = react.exports.useState("");
  const [gender, setGender] = react.exports.useState("");
  const [browser, setBrowser] = react.exports.useState("");
  const [fair, setFair] = react.exports.useState("");
  const [feedback, setFeedback] = react.exports.useState("");
  const [taskCorrectly, setTaskCorrectly] = react.exports.useState("");
  const [nativeLanguage, setNativeLanguage] = react.exports.useState("");
  const [enjoyment, setEnjoyment] = react.exports.useState("");
  function handleSubmit(event) {
    event.preventDefault();
    player2.set("exitSurvey", {
      age,
      gender,
      nativeLanguage,
      browser,
      fair,
      feedback,
      taskCorrectly,
      enjoyment
    });
    next();
  }
  function handleTaskCorrectlyChange(e2) {
    setTaskCorrectly(e2.target.value);
  }
  function handleEnjoymentChange(e2) {
    setEnjoyment(e2.target.value);
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: "py-8 max-w-5xl mx-auto px-4 sm:px-6 lg:px-8"
  }, /* @__PURE__ */ React.createElement(Alert, {
    title: "Completion Code"
  }, /* @__PURE__ */ React.createElement("p", null, "Please submit the following prolific completion code: ", " ", /* @__PURE__ */ React.createElement("strong", null, "C1LSRMRO"))), /* @__PURE__ */ React.createElement("form", {
    className: "mt-12 space-y-8 divide-y divide-gray-200",
    onSubmit: handleSubmit
  }, /* @__PURE__ */ React.createElement("div", {
    className: "space-y-8 divide-y divide-gray-200"
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h3", {
    className: "text-lg leading-6 font-medium text-gray-900"
  }, "Exit Survey"), /* @__PURE__ */ React.createElement("p", {
    className: "mt-1 text-sm text-gray-500"
  }, "Thank you for completing the experiment! These questions are optional.")), /* @__PURE__ */ React.createElement("div", {
    className: "space-y-8 mt-6"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex flex-row"
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", {
    htmlFor: "email",
    className: labelClassName
  }, "Native Language"), /* @__PURE__ */ React.createElement("div", {
    className: "mt-1"
  }, /* @__PURE__ */ React.createElement("input", {
    id: "nativeLanguage",
    name: "nativeLanguage",
    autoComplete: "off",
    className: inputClassName,
    value: nativeLanguage,
    onChange: (e2) => setNativeLanguage(e2.target.value)
  }))), /* @__PURE__ */ React.createElement("div", {
    className: "ml-5"
  }, /* @__PURE__ */ React.createElement("label", {
    htmlFor: "email",
    className: labelClassName
  }, "Age"), /* @__PURE__ */ React.createElement("div", {
    className: "mt-1"
  }, /* @__PURE__ */ React.createElement("input", {
    id: "age",
    name: "age",
    type: "number",
    autoComplete: "off",
    className: inputClassName,
    value: age,
    onChange: (e2) => setAge(e2.target.value)
  }))), /* @__PURE__ */ React.createElement("div", {
    className: "ml-5"
  }, /* @__PURE__ */ React.createElement("label", {
    htmlFor: "email",
    className: labelClassName
  }, "Gender"), /* @__PURE__ */ React.createElement("div", {
    className: "mt-1"
  }, /* @__PURE__ */ React.createElement("input", {
    id: "gender",
    name: "gender",
    autoComplete: "off",
    className: inputClassName,
    value: gender,
    onChange: (e2) => setGender(e2.target.value)
  })))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", {
    className: labelClassName
  }, "Did you read the instructions and do you think you did the task correctly?"), /* @__PURE__ */ React.createElement("div", {
    className: "grid gap-2"
  }, /* @__PURE__ */ React.createElement(Radio, {
    selected: taskCorrectly,
    name: "taskCorrectly",
    value: "Yes",
    label: "Yes",
    onChange: handleTaskCorrectlyChange
  }), /* @__PURE__ */ React.createElement(Radio, {
    selected: taskCorrectly,
    name: "taskCorrectly",
    value: "No",
    label: "No",
    onChange: handleTaskCorrectlyChange
  }), /* @__PURE__ */ React.createElement(Radio, {
    selected: taskCorrectly,
    name: "taskCorrectly",
    value: "I was confused",
    label: "I was confused",
    onChange: handleTaskCorrectlyChange
  }))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", {
    className: labelClassName
  }, "Did you enjoy the experiment?"), /* @__PURE__ */ React.createElement("div", {
    className: "grid gap-2"
  }, /* @__PURE__ */ React.createElement(Radio, {
    selected: enjoyment,
    name: "enjoyment",
    value: "yesEnjoy",
    label: "Yes",
    onChange: handleEnjoymentChange
  }), /* @__PURE__ */ React.createElement(Radio, {
    selected: enjoyment,
    name: "enjoyment",
    value: "NoEnjoy",
    label: "No",
    onChange: handleEnjoymentChange
  }), /* @__PURE__ */ React.createElement(Radio, {
    selected: enjoyment,
    name: "enjoyment",
    value: "BetterEnjoy",
    label: "Better than Average Experiment",
    onChange: handleEnjoymentChange
  }))), /* @__PURE__ */ React.createElement("div", {
    className: "grid grid-cols-3 gap-x-6 gap-y-3"
  }, /* @__PURE__ */ React.createElement("label", {
    className: labelClassName
  }, "What browser did you use to complete this experiment?"), /* @__PURE__ */ React.createElement("label", {
    className: labelClassName
  }, "Do you feel the pay was fair?"), /* @__PURE__ */ React.createElement("label", {
    className: labelClassName
  }, "Feedback, including problems you encountered."), /* @__PURE__ */ React.createElement("textarea", {
    className: inputClassName,
    dir: "auto",
    id: "browser",
    name: "browser",
    rows: 4,
    value: browser,
    onChange: (e2) => setBrowser(e2.target.value)
  }), /* @__PURE__ */ React.createElement("textarea", {
    className: inputClassName,
    dir: "auto",
    id: "fair",
    name: "fair",
    rows: 4,
    value: fair,
    onChange: (e2) => setFair(e2.target.value)
  }), /* @__PURE__ */ React.createElement("textarea", {
    className: inputClassName,
    dir: "auto",
    id: "feedback",
    name: "feedback",
    rows: 4,
    value: feedback,
    onChange: (e2) => setFeedback(e2.target.value)
  })), /* @__PURE__ */ React.createElement("div", {
    className: "mb-12"
  }, /* @__PURE__ */ React.createElement(Button, {
    type: "submit"
  }, "Submit")))))));
}
function Radio({ selected, name, value, label, onChange }) {
  return /* @__PURE__ */ React.createElement("label", {
    className: "text-sm font-medium text-gray-700"
  }, /* @__PURE__ */ React.createElement("input", {
    className: "mr-2 shadow-sm sm:text-sm",
    type: "radio",
    name,
    value,
    checked: selected === value,
    onChange
  }), label);
}
function Introduction({ next }) {
  return /* @__PURE__ */ React.createElement("div", {
    className: "mt-3 sm:mt-5 p-20"
  }, /* @__PURE__ */ React.createElement("h3", {
    className: "text-xl leading-6 font-bold text-gray-900"
  }, "Welcome!"), /* @__PURE__ */ React.createElement("div", {
    className: "mt-2 mb-6"
  }, /* @__PURE__ */ React.createElement("p", null, "You will be paired with another participant for this game, and speak to them in an audio chat room. First, we need to test your mic.")), /* @__PURE__ */ React.createElement(Button, {
    handleClick: next,
    autoFocus: true
  }, /* @__PURE__ */ React.createElement("p", null, "Next")));
}
const base = "inline-flex flex-col items-center px-4 py-2 border text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500 m-5";
const AudioTest = () => {
  const [isRecording, setIsRecording] = react.exports.useState(false);
  const [audioUrl, setAudioUrl] = react.exports.useState("");
  const mediaRecorderRef = react.exports.useRef(null);
  const startRecording = async () => {
    setIsRecording(true);
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      mediaRecorder.start();
      const audioChunks = [];
      mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };
      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
        const audioUrl2 = URL.createObjectURL(audioBlob);
        setAudioUrl(audioUrl2);
      };
    } catch (e2) {
      console.error("Error accessing mic:", e2);
    }
  };
  const stopRecording = () => {
    if (mediaRecorderRef.current) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: `flex flex-col items-center justify-center`
  }, /* @__PURE__ */ React.createElement("button", {
    className: `${base}`,
    onClick: isRecording ? stopRecording : startRecording
  }, isRecording ? "Stop Recording" : "Start Recording"), audioUrl && /* @__PURE__ */ React.createElement("audio", {
    className: `${base}`,
    src: audioUrl,
    controls: true
  }));
};
function MicTest({ next }) {
  return /* @__PURE__ */ React.createElement("div", {
    className: "mt-3 sm:mt-5 p-20"
  }, /* @__PURE__ */ React.createElement("h3", {
    className: "text-lg leading-6 font-medium text-gray-900"
  }, "Microphone and Speaker Test"), /* @__PURE__ */ React.createElement("div", {
    className: "mt-2 mb-6"
  }, /* @__PURE__ */ React.createElement("p", {
    className: "text-sm text-gray-500"
  }, "Record and play back audio to make sure your mic and speaker are both working. The task relies on a working microphone and speaker.")), /* @__PURE__ */ React.createElement(AudioTest, null), /* @__PURE__ */ React.createElement(Button, {
    handleClick: next,
    autoFocus: true
  }, /* @__PURE__ */ React.createElement("p", null, "Next")));
}
function MyPlayerCreate({ onPlayerID, connecting }) {
  const [playerID, setPlayerID] = react.exports.useState("");
  const handleSubmit = (evt) => {
    evt.preventDefault();
    if (!playerID || playerID.trim() === "") {
      return;
    }
    onPlayerID(playerID);
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: "min-h-screen bg-empirica-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "sm:mx-auto sm:w-full sm:max-w-md"
  }, /* @__PURE__ */ React.createElement("h2", {
    className: "mt-6 text-center text-3xl font-extrabold text-gray-900"
  }, "Enter your Player Identifier")), /* @__PURE__ */ React.createElement("div", {
    className: "mt-8 sm:mx-auto sm:w-full sm:max-w-md"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10"
  }, /* @__PURE__ */ React.createElement("form", {
    className: "space-y-6",
    action: "#",
    method: "POST",
    onSubmit: handleSubmit
  }, /* @__PURE__ */ React.createElement("fieldset", {
    disabled: connecting
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", {
    htmlFor: "email",
    className: "block text-sm font-medium text-gray-700"
  }, "Prolific ID"), /* @__PURE__ */ React.createElement("div", {
    className: "mt-1"
  }, /* @__PURE__ */ React.createElement("input", {
    id: "playerID",
    name: "playerID",
    type: "text",
    autoComplete: "off",
    required: true,
    autoFocus: true,
    className: "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-empirica-500 focus:border-empirica-500 sm:text-sm",
    value: playerID,
    onChange: (e2) => setPlayerID(e2.target.value)
  }), /* @__PURE__ */ React.createElement("p", {
    className: "mt-2 text-sm text-gray-500",
    id: "playerID-description"
  }, "Please copy + paste your ID from prolific. ", /* @__PURE__ */ React.createElement("br", null), " We CANNOT pay you without it!"))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("button", {
    type: "submit",
    className: "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-empirica-600 hover:bg-empirica-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500"
  }, "Enter")))))));
}
const defaultTitle = "Do you consent to participate in this experiment?";
const defaultText = `
We invite you to participate in a research study on language production and comprehension. Your experimenter will ask you to do a linguistic task such as reading sentences or words, naming pictures or describing scenes, making up sentences of your own, or participating in a simple language game.
There are no risks or benefits of any kind involved in this study.
You will be paid for your participation at the posted rate. If you have read this form and have decided to participate in this experiment, please understand your participation is voluntary and you have the right to withdraw your consent or discontinue participation at any time without penalty or loss of benefits to which you are otherwise entitled. You have the right to refuse to do particular tasks. Your individual privacy will be maintained in all published and written data resulting from the study. You may print this form for your records.`;
const contactInfo = `CONTACT INFORMATION: If you have any questions, concerns or complaints about this research study, its procedures, risks and benefits, you should contact the Protocol Director Meghan Sumner at (650)-725-9336. If you are not satisfied with how this study is being conducted, or if you have any concerns, complaints, or general questions about the research or your rights as a participant, please contact the Stanford Institutional Review Board (IRB) to speak to someone independent of the research team at (650)-723-2480 or toll free at 1-866-680-2906.
You can also write to the Stanford IRB, Stanford University, 3000 El Camino Real, Five Palo Alto Square, 4th Floor, Palo Alto, CA 94306 USA.
If you agree to participate, please proceed to the study tasks.`;
const defaultButtonText = "I AGREE";
function ConsentForm({
  title = defaultTitle,
  text = defaultText,
  buttonText = defaultButtonText,
  contact = contactInfo,
  onConsent
}) {
  return /* @__PURE__ */ React.createElement("div", {
    className: "relative h-full z-10 overflow-y-auto",
    "aria-labelledby": "modal-title",
    role: "dialog",
    "aria-modal": "true"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity",
    "aria-hidden": "true"
  }), /* @__PURE__ */ React.createElement("span", {
    className: "hidden sm:inline-block sm:align-middle sm:h-screen",
    "aria-hidden": "true"
  }, "\u200B"), /* @__PURE__ */ React.createElement("div", {
    className: "inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6"
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", {
    className: "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100"
  }, /* @__PURE__ */ React.createElement("svg", {
    className: "h-6 w-6 text-green-600",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor",
    "aria-hidden": "true"
  }, /* @__PURE__ */ React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2",
    d: "M5 13l4 4L19 7"
  }))), /* @__PURE__ */ React.createElement("div", {
    className: "mt-3 sm:mt-5"
  }, /* @__PURE__ */ React.createElement("h3", {
    className: "text-lg text-center leading-6 font-medium text-gray-900",
    id: "modal-title"
  }, title), /* @__PURE__ */ React.createElement("div", {
    className: "mt-2"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "text-sm text-gray-500 text-justify"
  }, text), /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement("div", {
    className: "text-sm text-gray-500 text-justify"
  }, contact)))), /* @__PURE__ */ React.createElement("div", {
    className: "mt-5 sm:mt-6"
  }, /* @__PURE__ */ React.createElement("button", {
    type: "button",
    className: "inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-empirica-600 text-base font-medium text-white hover:bg-empirica-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-empirica-500 sm:text-sm",
    onClick: onConsent
  }, buttonText)))));
}
function App() {
  const urlParams = new URLSearchParams(window.location.search);
  const playerKey = urlParams.get("participantKey") || "";
  const { protocol, host } = window.location;
  const url = `${protocol}//${host}/query`;
  function introSteps({ game, player: player2 }) {
    return [Introduction, MicTest];
  }
  function exitSteps({ game, player: player2 }) {
    return [ExitSurvey];
  }
  return /* @__PURE__ */ React.createElement(EmpiricaParticipant, {
    url,
    ns: playerKey,
    modeFunc: EmpiricaClassic
  }, /* @__PURE__ */ React.createElement("div", {
    className: "h-screen relative"
  }, /* @__PURE__ */ React.createElement(EmpiricaMenu, {
    position: "bottom-left"
  }), /* @__PURE__ */ React.createElement("div", {
    className: "h-full overflow-auto"
  }, /* @__PURE__ */ React.createElement(EmpiricaContext, {
    introSteps,
    exitSteps,
    consent: ConsentForm,
    playerCreate: MyPlayerCreate
  }, /* @__PURE__ */ React.createElement(Game, null)))));
}
var index = "";
const container = document.getElementById("root");
const root = createRoot(container);
root.render(
  /* @__PURE__ */ React.createElement(React.StrictMode, null, /* @__PURE__ */ React.createElement(l$2, null, /* @__PURE__ */ React.createElement(App, null)))
);
